{
  "address": "0x7ab73C2F083B2725E5b6e245E6EA945d5f3CaaeA",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "contract ISoulboundIdentity",
          "name": "_soulboundIdentity",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_extension",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_contractURI",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "AddressDoesNotHaveIdentity",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        }
      ],
      "name": "CallerNotOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "InvalidTokenURI",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "NameAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "NameNotFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "NameRegisteredByOtherAccount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SameValue",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "TokenNotFound",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "URIAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "ZeroLengthName",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "yearsPeriod",
          "type": "uint256"
        }
      ],
      "name": "ZeroYearsPeriod",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "yearsPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newExpirationDate",
          "type": "uint256"
        }
      ],
      "name": "YearsPeriodRenewed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "extension",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExtension",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "identityId",
          "type": "uint256"
        }
      ],
      "name": "getSoulNames",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "sbtNames",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getSoulNames",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "sbtNames",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "getTokenData",
      "outputs": [
        {
          "internalType": "string",
          "name": "sbtName",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "linked",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "identityId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expirationDate",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "getTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "isAvailable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "available",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "yearsPeriod",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "nameData",
      "outputs": [
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yearsPeriod",
          "type": "uint256"
        }
      ],
      "name": "renewYearsPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_contractURI",
          "type": "string"
        }
      ],
      "name": "setContractURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_extension",
          "type": "string"
        }
      ],
      "name": "setExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISoulboundIdentity",
          "name": "_soulboundIdentity",
          "type": "address"
        }
      ],
      "name": "setSoulboundIdentity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "soulboundIdentity",
      "outputs": [
        {
          "internalType": "contract ISoulboundIdentity",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenData",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "expirationDate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x326453cf2c9c1ec350b1d4678a27bc32e48be5de101e6d5eb33476da9b3b5f44",
  "receipt": {
    "to": null,
    "from": "0x84a74cC52048dd8421Df4a9EB139D91bb7744b4E",
    "contractAddress": "0x7ab73C2F083B2725E5b6e245E6EA945d5f3CaaeA",
    "transactionIndex": 90,
    "gasUsed": "3575503",
    "logsBloom": "0x
    "blockHash": "0x9eaf02c8a793e369936ba788edafbfa4817e95bbd181c7b436b7bd534fe21d30",
    "transactionHash": "0x326453cf2c9c1ec350b1d4678a27bc32e48be5de101e6d5eb33476da9b3b5f44",
    "logs": [
      {
        "transactionIndex": 90,
        "blockNumber": 16391876,
        "transactionHash": "0x326453cf2c9c1ec350b1d4678a27bc32e48be5de101e6d5eb33476da9b3b5f44",
        "address": "0x7ab73C2F083B2725E5b6e245E6EA945d5f3CaaeA",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000084a74cc52048dd8421df4a9eb139d91bb7744b4e"
        ],
        "data": "0x",
        "logIndex": 198,
        "blockHash": "0x9eaf02c8a793e369936ba788edafbfa4817e95bbd181c7b436b7bd534fe21d30"
      },
      {
        "transactionIndex": 90,
        "blockNumber": 16391876,
        "transactionHash": "0x326453cf2c9c1ec350b1d4678a27bc32e48be5de101e6d5eb33476da9b3b5f44",
        "address": "0x7ab73C2F083B2725E5b6e245E6EA945d5f3CaaeA",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x00000000000000000000000084a74cc52048dd8421df4a9eb139d91bb7744b4e",
          "0x000000000000000000000000bb4125c48e8c69b0f06e0c635dfcd0aa250fcbf9"
        ],
        "data": "0x",
        "logIndex": 199,
        "blockHash": "0x9eaf02c8a793e369936ba788edafbfa4817e95bbd181c7b436b7bd534fe21d30"
      },
      {
        "transactionIndex": 90,
        "blockNumber": 16391876,
        "transactionHash": "0x326453cf2c9c1ec350b1d4678a27bc32e48be5de101e6d5eb33476da9b3b5f44",
        "address": "0x7ab73C2F083B2725E5b6e245E6EA945d5f3CaaeA",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bb4125c48e8c69b0f06e0c635dfcd0aa250fcbf9",
          "0x00000000000000000000000084a74cc52048dd8421df4a9eb139d91bb7744b4e"
        ],
        "data": "0x",
        "logIndex": 200,
        "blockHash": "0x9eaf02c8a793e369936ba788edafbfa4817e95bbd181c7b436b7bd534fe21d30"
      },
      {
        "transactionIndex": 90,
        "blockNumber": 16391876,
        "transactionHash": "0x326453cf2c9c1ec350b1d4678a27bc32e48be5de101e6d5eb33476da9b3b5f44",
        "address": "0x7ab73C2F083B2725E5b6e245E6EA945d5f3CaaeA",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6",
          "0x000000000000000000000000bb4125c48e8c69b0f06e0c635dfcd0aa250fcbf9",
          "0x00000000000000000000000084a74cc52048dd8421df4a9eb139d91bb7744b4e"
        ],
        "data": "0x",
        "logIndex": 201,
        "blockHash": "0x9eaf02c8a793e369936ba788edafbfa4817e95bbd181c7b436b7bd534fe21d30"
      }
    ],
    "blockNumber": 16391876,
    "cumulativeGasUsed": "11297137",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xBb4125C48e8c69b0F06E0c635dfCd0Aa250fcbF9",
    "0x8903D8D4F4c06814D7ecb42b1258E2209d53A7d4",
    ".soul",
    "ar://vFTF3cpr4r-oqBpeIlpd0VpGU-8AzGS2AQqNgnDXWAM"
  ],
  "numDeployments": 1,
  "solcInputHash": "df3812bfd9c35650fa2653add91d7cc0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"contract ISoulboundIdentity\",\"name\":\"_soulboundIdentity\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_extension\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_contractURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"AddressDoesNotHaveIdentity\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"CallerNotOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"InvalidTokenURI\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"NameAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"NameNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NameRegisteredByOtherAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SameValue\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenNotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"URIAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"ZeroLengthName\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"yearsPeriod\",\"type\":\"uint256\"}],\"name\":\"ZeroYearsPeriod\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yearsPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newExpirationDate\",\"type\":\"uint256\"}],\"name\":\"YearsPeriodRenewed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extension\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExtension\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"identityId\",\"type\":\"uint256\"}],\"name\":\"getSoulNames\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"sbtNames\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getSoulNames\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"sbtNames\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"getTokenData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"sbtName\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"linked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"identityId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationDate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"isAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"available\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"yearsPeriod\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"nameData\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yearsPeriod\",\"type\":\"uint256\"}],\"name\":\"renewYearsPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_contractURI\",\"type\":\"string\"}],\"name\":\"setContractURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_extension\",\"type\":\"string\"}],\"name\":\"setExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISoulboundIdentity\",\"name\":\"_soulboundIdentity\",\"type\":\"address\"}],\"name\":\"setSoulboundIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soulboundIdentity\",\"outputs\":[{\"internalType\":\"contract ISoulboundIdentity\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"expirationDate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Masa Finance\",\"details\":\"SoulName NFT, that inherits from the NFT contract, and points to a Soulbound identity token. It has an extension, and stores all the information about the identity names.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"The caller must be the owner or an approved address of the soul name.\",\"params\":{\"tokenId\":\"TokenId of the soul name to burn\"}},\"constructor\":{\"details\":\"Creates a new SoulName NFT, that points to a Soulbound identity, inheriting from the NFT contract.\",\"params\":{\"_contractURI\":\"URI of the smart contract metadata\",\"_extension\":\"Extension of the soul name\",\"_soulboundIdentity\":\"Address of the Soulbound identity contract\",\"admin\":\"Administrator of the smart contract\"}},\"exists(uint256)\":{\"details\":\"Returns true if the token has been minted\",\"params\":{\"tokenId\":\"Token to check\"},\"returns\":{\"_0\":\"True if the token exists\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getExtension()\":{\"details\":\"This function is used to get the extension of the soul name\",\"returns\":{\"_0\":\"Extension of the soul name\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getSoulNames(address)\":{\"details\":\"This function queries all the identity names of the specified account\",\"params\":{\"owner\":\"Address of the owner of the identities\"},\"returns\":{\"sbtNames\":\"Array of soul names associated to the account\"}},\"getSoulNames(uint256)\":{\"details\":\"This function queries all the identity names of the specified identity Id\",\"params\":{\"identityId\":\"TokenId of the identity\"},\"returns\":{\"sbtNames\":\"Array of soul names associated to the identity Id\"}},\"getTokenData(string)\":{\"details\":\"This function queries the information of a soul name\",\"params\":{\"name\":\"Name of the soul name\"},\"returns\":{\"active\":\"`true` if the soul name is active, `false` otherwise\",\"expirationDate\":\"Expiration date of the soul name\",\"identityId\":\"Identity id of the soul name\",\"linked\":\"`true` if the soul name is linked, `false` otherwise\",\"sbtName\":\"Soul name, in upper/lower case and extension\",\"tokenId\":\"SoulName id of the soul name\"}},\"getTokenId(string)\":{\"details\":\"This function queries the token id of a soul name\",\"params\":{\"name\":\"Name of the soul name\"},\"returns\":{\"_0\":\"SoulName id of the soul name\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"isAvailable(string)\":{\"details\":\"This function queries if a soul name already exists and is in the available state\",\"params\":{\"name\":\"Name of the soul name\"},\"returns\":{\"available\":\"`true` if the soul name is available, `false` otherwise\"}},\"mint(address,string,uint256,string)\":{\"details\":\"The caller can mint more than one name. The soul name must be unique.\",\"params\":{\"_tokenURI\":\"URI of the NFT\",\"name\":\"Name of the new soul name\",\"to\":\"Address of the owner of the new soul name\",\"yearsPeriod\":\"Years of validity of the name\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renewYearsPeriod(uint256,uint256)\":{\"details\":\"The caller must be the owner or an approved address of the soul name.\",\"params\":{\"tokenId\":\"TokenId of the soul name\",\"yearsPeriod\":\"Years of validity of the name\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setContractURI(string)\":{\"details\":\"The caller must have the admin role to call this function\",\"params\":{\"_contractURI\":\"URI of the smart contract metadata\"}},\"setExtension(string)\":{\"details\":\"The caller must have the admin role to call this function\",\"params\":{\"_extension\":\"Extension of the soul name\"}},\"setSoulboundIdentity(address)\":{\"details\":\"The caller must have the admin role to call this function\",\"params\":{\"_soulboundIdentity\":\"Address of the SoulboundIdentity contract\"}},\"supportsInterface(bytes4)\":{\"details\":\"Interface identification is specified in ERC-165.\",\"params\":{\"interfaceId\":\"The interface identifier, as specified in ERC-165\"},\"returns\":{\"_0\":\"`true` if the contract implements `interfaceId` and  `interfaceId` is not 0xffffffff, `false` otherwise\"}},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(string)\":{\"details\":\"This function returns the token URI of the soul name specified by the name\",\"params\":{\"name\":\"Name of the soul name\"},\"returns\":{\"_0\":\"URI of the soulname associated to a name\"}},\"tokenURI(uint256)\":{\"details\":\"Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC  3986. The URI may point to a JSON file that conforms to the \\\"ERC721  Metadata JSON Schema\\\".\",\"params\":{\"tokenId\":\"NFT to get the URI of\"},\"returns\":{\"_0\":\"URI of the NFT\"}},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"SoulName NFT\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"Burn a soul name\"},\"constructor\":{\"notice\":\"Creates a new SoulName NFT\"},\"exists(uint256)\":{\"notice\":\"Returns true if the token exists\"},\"getExtension()\":{\"notice\":\"Returns the extension of the soul name\"},\"getSoulNames(address)\":{\"notice\":\"Returns all the active soul names of an account\"},\"getSoulNames(uint256)\":{\"notice\":\"Returns all the active soul names of an account\"},\"getTokenData(string)\":{\"notice\":\"Returns the information of a soul name\"},\"getTokenId(string)\":{\"notice\":\"Returns the token id of a soul name\"},\"isAvailable(string)\":{\"notice\":\"Checks if a soul name is available\"},\"mint(address,string,uint256,string)\":{\"notice\":\"Mints a new soul name\"},\"renewYearsPeriod(uint256,uint256)\":{\"notice\":\"Update the expiration date of a soul name\"},\"setContractURI(string)\":{\"notice\":\"Sets the URI of the smart contract metadata\"},\"setExtension(string)\":{\"notice\":\"Sets the extension of the soul name\"},\"setSoulboundIdentity(address)\":{\"notice\":\"Sets the SoulboundIdentity contract address linked to this soul name\"},\"supportsInterface(bytes4)\":{\"notice\":\"Query if a contract implements an interface\"},\"tokenURI(string)\":{\"notice\":\"A distinct Uniform Resource Identifier (URI) for a given asset.\"},\"tokenURI(uint256)\":{\"notice\":\"A distinct Uniform Resource Identifier (URI) for a given asset.\"}},\"notice\":\"SoulName NFT that points to a Soulbound identity token\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SoulName.sol\":\"SoulName\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xfa6873a010382f62e9ffe4592b305ef6e60f55502c95ed0ffa51eb10b5200d45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x0a79511df8151b10b0a0004d6a76ad956582d32824af4c0f4886bdbdfe5746e5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/SoulName.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"./libraries/Errors.sol\\\";\\nimport \\\"./libraries/Utils.sol\\\";\\nimport \\\"./interfaces/ISoulboundIdentity.sol\\\";\\nimport \\\"./interfaces/ISoulName.sol\\\";\\nimport \\\"./tokens/MasaNFT.sol\\\";\\n\\n/// @title SoulName NFT\\n/// @author Masa Finance\\n/// @notice SoulName NFT that points to a Soulbound identity token\\n/// @dev SoulName NFT, that inherits from the NFT contract, and points to a Soulbound identity token.\\n/// It has an extension, and stores all the information about the identity names.\\ncontract SoulName is MasaNFT, ISoulName, ReentrancyGuard {\\n    /* ========== STATE VARIABLES ========== */\\n    using SafeMath for uint256;\\n\\n    uint256 constant YEAR = 31536000; // 60 seconds * 60 minutes * 24 hours * 365 days\\n\\n    ISoulboundIdentity public soulboundIdentity;\\n    string public extension; // suffix of the names (.sol?)\\n\\n    // contractURI() points to the smart contract metadata\\n    // see https://docs.opensea.io/docs/contract-level-metadata\\n    string public contractURI;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n    mapping(string => bool) private _URIs; // used to check if a uri is already used\\n\\n    mapping(uint256 => TokenData) public tokenData; // used to store the data of the token id\\n    mapping(string => NameData) public nameData; // stores the token id of the current active soul name\\n\\n    struct TokenData {\\n        string name; // Name with lowercase and uppercase\\n        uint256 expirationDate;\\n    }\\n\\n    struct NameData {\\n        bool exists;\\n        uint256 tokenId;\\n    }\\n\\n    /* ========== INITIALIZE ========== */\\n\\n    /// @notice Creates a new SoulName NFT\\n    /// @dev Creates a new SoulName NFT, that points to a Soulbound identity, inheriting from the NFT contract.\\n    /// @param admin Administrator of the smart contract\\n    /// @param _soulboundIdentity Address of the Soulbound identity contract\\n    /// @param _extension Extension of the soul name\\n    /// @param _contractURI URI of the smart contract metadata\\n    constructor(\\n        address admin,\\n        ISoulboundIdentity _soulboundIdentity,\\n        string memory _extension,\\n        string memory _contractURI\\n    ) MasaNFT(admin, \\\"Masa Soul Name\\\", \\\"MSN\\\", \\\"\\\") {\\n        if (address(_soulboundIdentity) == address(0)) revert ZeroAddress();\\n\\n        soulboundIdentity = _soulboundIdentity;\\n        extension = _extension;\\n        contractURI = _contractURI;\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ====================================== */\\n\\n    /// @notice Sets the SoulboundIdentity contract address linked to this soul name\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _soulboundIdentity Address of the SoulboundIdentity contract\\n    function setSoulboundIdentity(ISoulboundIdentity _soulboundIdentity)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        if (address(_soulboundIdentity) == address(0)) revert ZeroAddress();\\n        if (soulboundIdentity == _soulboundIdentity) revert SameValue();\\n        soulboundIdentity = _soulboundIdentity;\\n    }\\n\\n    /// @notice Sets the extension of the soul name\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _extension Extension of the soul name\\n    function setExtension(string memory _extension)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        if (\\n            keccak256(abi.encodePacked((extension))) ==\\n            keccak256(abi.encodePacked((_extension)))\\n        ) revert SameValue();\\n        extension = _extension;\\n    }\\n\\n    /// @notice Sets the URI of the smart contract metadata\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _contractURI URI of the smart contract metadata\\n    function setContractURI(string memory _contractURI)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        if (\\n            keccak256(abi.encodePacked((contractURI))) ==\\n            keccak256(abi.encodePacked((_contractURI)))\\n        ) revert SameValue();\\n        contractURI = _contractURI;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /// @notice Mints a new soul name\\n    /// @dev The caller can mint more than one name. The soul name must be unique.\\n    /// @param to Address of the owner of the new soul name\\n    /// @param name Name of the new soul name\\n    /// @param yearsPeriod Years of validity of the name\\n    /// @param _tokenURI URI of the NFT\\n    function mint(\\n        address to,\\n        string memory name,\\n        uint256 yearsPeriod,\\n        string memory _tokenURI\\n    ) public override nonReentrant returns (uint256) {\\n        if (!isAvailable(name)) revert NameAlreadyExists(name);\\n        if (bytes(name).length == 0) revert ZeroLengthName(name);\\n        if (yearsPeriod == 0) revert ZeroYearsPeriod(yearsPeriod);\\n        if (soulboundIdentity.balanceOf(to) == 0)\\n            revert AddressDoesNotHaveIdentity(to);\\n        if (\\n            !Utils.startsWith(_tokenURI, \\\"ar://\\\") &&\\n            !Utils.startsWith(_tokenURI, \\\"ipfs://\\\")\\n        ) revert InvalidTokenURI(_tokenURI);\\n\\n        uint256 tokenId = _mintWithCounter(to);\\n        _setTokenURI(tokenId, _tokenURI);\\n\\n        tokenData[tokenId].name = name;\\n        tokenData[tokenId].expirationDate = block.timestamp.add(\\n            YEAR.mul(yearsPeriod)\\n        );\\n\\n        string memory lowercaseName = Utils.toLowerCase(name);\\n        nameData[lowercaseName].tokenId = tokenId;\\n        nameData[lowercaseName].exists = true;\\n\\n        return tokenId;\\n    }\\n\\n    /// @notice Update the expiration date of a soul name\\n    /// @dev The caller must be the owner or an approved address of the soul name.\\n    /// @param tokenId TokenId of the soul name\\n    /// @param yearsPeriod Years of validity of the name\\n    function renewYearsPeriod(uint256 tokenId, uint256 yearsPeriod) external {\\n        // ERC721: caller is not token owner nor approved\\n        if (!_isApprovedOrOwner(_msgSender(), tokenId))\\n            revert CallerNotOwner(_msgSender());\\n        if (yearsPeriod == 0) revert ZeroYearsPeriod(yearsPeriod);\\n\\n        // check that the last registered tokenId for that name is the current token\\n        string memory lowercaseName = Utils.toLowerCase(\\n            tokenData[tokenId].name\\n        );\\n        if (nameData[lowercaseName].tokenId != tokenId)\\n            revert NameRegisteredByOtherAccount(lowercaseName, tokenId);\\n\\n        // check if the name is expired\\n        if (tokenData[tokenId].expirationDate < block.timestamp) {\\n            tokenData[tokenId].expirationDate = block.timestamp.add(\\n                YEAR.mul(yearsPeriod)\\n            );\\n        } else {\\n            tokenData[tokenId].expirationDate = tokenData[tokenId]\\n                .expirationDate\\n                .add(YEAR.mul(yearsPeriod));\\n        }\\n\\n        emit YearsPeriodRenewed(\\n            tokenId,\\n            yearsPeriod,\\n            tokenData[tokenId].expirationDate\\n        );\\n    }\\n\\n    /// @notice Burn a soul name\\n    /// @dev The caller must be the owner or an approved address of the soul name.\\n    /// @param tokenId TokenId of the soul name to burn\\n    function burn(uint256 tokenId) public override {\\n        if (!_exists(tokenId)) revert TokenNotFound(tokenId);\\n\\n        string memory lowercaseName = Utils.toLowerCase(\\n            tokenData[tokenId].name\\n        );\\n\\n        // remove info from tokenIdName and tokenData\\n        delete tokenData[tokenId];\\n\\n        // if the last owner of the name is burning it, remove the name from nameData\\n        if (nameData[lowercaseName].tokenId == tokenId) {\\n            delete nameData[lowercaseName];\\n        }\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            _URIs[_tokenURIs[tokenId]] = false;\\n            delete _tokenURIs[tokenId];\\n        }\\n\\n        super.burn(tokenId);\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    /// @notice Returns the extension of the soul name\\n    /// @dev This function is used to get the extension of the soul name\\n    /// @return Extension of the soul name\\n    function getExtension() external view override returns (string memory) {\\n        return extension;\\n    }\\n\\n    /// @notice Checks if a soul name is available\\n    /// @dev This function queries if a soul name already exists and is in the available state\\n    /// @param name Name of the soul name\\n    /// @return available `true` if the soul name is available, `false` otherwise\\n    function isAvailable(string memory name)\\n        public\\n        view\\n        override\\n        returns (bool available)\\n    {\\n        string memory lowercaseName = Utils.toLowerCase(name);\\n        if (nameData[lowercaseName].exists) {\\n            uint256 tokenId = nameData[lowercaseName].tokenId;\\n            return tokenData[tokenId].expirationDate < block.timestamp;\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /// @notice Returns the information of a soul name\\n    /// @dev This function queries the information of a soul name\\n    /// @param name Name of the soul name\\n    /// @return sbtName Soul name, in upper/lower case and extension\\n    /// @return linked `true` if the soul name is linked, `false` otherwise\\n    /// @return identityId Identity id of the soul name\\n    /// @return tokenId SoulName id of the soul name\\n    /// @return expirationDate Expiration date of the soul name\\n    /// @return active `true` if the soul name is active, `false` otherwise\\n    function getTokenData(string memory name)\\n        external\\n        view\\n        override\\n        returns (\\n            string memory sbtName,\\n            bool linked,\\n            uint256 identityId,\\n            uint256 tokenId,\\n            uint256 expirationDate,\\n            bool active\\n        )\\n    {\\n        tokenId = _getTokenId(name);\\n        address _owner = ownerOf(tokenId);\\n        bool _linked = soulboundIdentity.balanceOf(_owner) > 0;\\n        uint256 _identityId = 0;\\n        if (_linked) {\\n            _identityId = soulboundIdentity.tokenOfOwner(_owner);\\n        }\\n\\n        TokenData memory _tokenData = tokenData[tokenId];\\n\\n        return (\\n            _getName(_tokenData.name),\\n            _linked,\\n            _identityId,\\n            tokenId,\\n            _tokenData.expirationDate,\\n            _tokenData.expirationDate >= block.timestamp\\n        );\\n    }\\n\\n    /// @notice Returns the token id of a soul name\\n    /// @dev This function queries the token id of a soul name\\n    /// @param name Name of the soul name\\n    /// @return SoulName id of the soul name\\n    function getTokenId(string memory name)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _getTokenId(name);\\n    }\\n\\n    /// @notice Returns all the active soul names of an account\\n    /// @dev This function queries all the identity names of the specified identity Id\\n    /// @param identityId TokenId of the identity\\n    /// @return sbtNames Array of soul names associated to the identity Id\\n    function getSoulNames(uint256 identityId)\\n        external\\n        view\\n        override\\n        returns (string[] memory sbtNames)\\n    {\\n        // return owner if exists\\n        address _owner = soulboundIdentity.ownerOf(identityId);\\n\\n        return getSoulNames(_owner);\\n    }\\n\\n    /// @notice Returns all the active soul names of an account\\n    /// @dev This function queries all the identity names of the specified account\\n    /// @param owner Address of the owner of the identities\\n    /// @return sbtNames Array of soul names associated to the account\\n    function getSoulNames(address owner)\\n        public\\n        view\\n        override\\n        returns (string[] memory sbtNames)\\n    {\\n        uint256 results = 0;\\n        uint256 balance = balanceOf(owner);\\n\\n        for (uint256 i = 0; i < balance; i++) {\\n            uint256 tokenId = tokenOfOwnerByIndex(owner, i);\\n            if (tokenData[tokenId].expirationDate >= block.timestamp) {\\n                results = results.add(1);\\n            }\\n        }\\n\\n        string[] memory _sbtNames = new string[](results);\\n        uint256 index = 0;\\n\\n        for (uint256 i = 0; i < balance; i++) {\\n            uint256 tokenId = tokenOfOwnerByIndex(owner, i);\\n            if (tokenData[tokenId].expirationDate >= block.timestamp) {\\n                _sbtNames[index] = Utils.toLowerCase(tokenData[tokenId].name);\\n                index = index.add(1);\\n            }\\n        }\\n\\n        // return identity names if exists and are active\\n        return _sbtNames;\\n    }\\n\\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n    /// @dev This function returns the token URI of the soul name specified by the name\\n    /// @param name Name of the soul name\\n    /// @return URI of the soulname associated to a name\\n    function tokenURI(string memory name)\\n        external\\n        view\\n        virtual\\n        returns (string memory)\\n    {\\n        uint256 tokenId = _getTokenId(name);\\n        return tokenURI(tokenId);\\n    }\\n\\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n    /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\\n    ///  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\n    ///  Metadata JSON Schema\\\".\\n    /// @param tokenId NFT to get the URI of\\n    /// @return URI of the NFT\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /* ========== PRIVATE FUNCTIONS ========== */\\n\\n    function _getName(string memory name) private view returns (string memory) {\\n        return string(bytes.concat(bytes(name), bytes(extension)));\\n    }\\n\\n    function _getTokenId(string memory name) private view returns (uint256) {\\n        string memory lowercaseName = Utils.toLowerCase(name);\\n        if (!nameData[lowercaseName].exists) revert NameNotFound(name);\\n\\n        return nameData[lowercaseName].tokenId;\\n    }\\n\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI)\\n        internal\\n        virtual\\n    {\\n        if (!_exists(tokenId)) revert TokenNotFound(tokenId);\\n        if (_URIs[_tokenURI]) revert URIAlreadyExists(_tokenURI);\\n\\n        _tokenURIs[tokenId] = _tokenURI;\\n        _URIs[_tokenURI] = true;\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    /* ========== EVENTS ========== */\\n\\n    event YearsPeriodRenewed(\\n        uint256 tokenId,\\n        uint256 yearsPeriod,\\n        uint256 newExpirationDate\\n    );\\n}\\n\",\"keccak256\":\"0xe1cc76af736110c89b1c55115f60e769860d9efac37f01167a47bcbe43564120\",\"license\":\"MIT\"},\"contracts/interfaces/ISoulName.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface ISoulName {\\n    function mint(\\n        address to,\\n        string memory name,\\n        uint256 yearsPeriod,\\n        string memory _tokenURI\\n    ) external returns (uint256);\\n\\n    function getExtension() external view returns (string memory);\\n\\n    function isAvailable(string memory name)\\n        external\\n        view\\n        returns (bool available);\\n\\n    function getTokenData(string memory name)\\n        external\\n        view\\n        returns (\\n            string memory sbtName,\\n            bool linked,\\n            uint256 identityId,\\n            uint256 tokenId,\\n            uint256 expirationDate,\\n            bool active\\n        );\\n\\n    function getTokenId(string memory name) external view returns (uint256);\\n\\n    function getSoulNames(address owner)\\n        external\\n        view\\n        returns (string[] memory sbtNames);\\n\\n    function getSoulNames(uint256 identityId)\\n        external\\n        view\\n        returns (string[] memory sbtNames);\\n}\\n\",\"keccak256\":\"0x8793d235ae8c9d723280f7ef0b35f1fb8a3fd0a706c7d9943c7a68db850e31c7\",\"license\":\"MIT\"},\"contracts/interfaces/ISoulboundIdentity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"../tokens/SBT/ISBT.sol\\\";\\n\\nimport \\\"./ISoulName.sol\\\";\\n\\ninterface ISoulboundIdentity is ISBT {\\n    function mint(address to) external returns (uint256);\\n\\n    function mintIdentityWithName(\\n        address to,\\n        string memory name,\\n        uint256 yearsPeriod,\\n        string memory _tokenURI\\n    ) external returns (uint256);\\n\\n    function getSoulName() external view returns (ISoulName);\\n\\n    function tokenOfOwner(address owner) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x443506c61e4b65b8587c43928ed004d880feb4e272a56f474bb8def5d9090c0a\",\"license\":\"MIT\"},\"contracts/libraries/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nerror AddressDoesNotHaveIdentity(address to);\\nerror AlreadyAdded();\\nerror AuthorityNotExists(address authority);\\nerror CallerNotOwner(address caller);\\nerror CallerNotReader(address caller);\\nerror CreditScoreAlreadyCreated(address to);\\nerror IdentityAlreadyCreated(address to);\\nerror IdentityOwnerIsReader(uint256 readerIdentityId);\\nerror InsufficientEthAmount(uint256 amount);\\nerror IdentityOwnerNotTokenOwner(uint256 tokenId, uint256 ownerIdentityId);\\nerror InvalidPaymentMethod(address paymentMethod);\\nerror InvalidSignature();\\nerror InvalidSignatureDate(uint256 signatureDate);\\nerror InvalidToken(address token);\\nerror InvalidTokenURI(string tokenURI);\\nerror LinkAlreadyExists(\\n    address token,\\n    uint256 tokenId,\\n    uint256 readerIdentityId,\\n    uint256 signatureDate\\n);\\nerror LinkAlreadyRevoked();\\nerror LinkDoesNotExist();\\nerror NameAlreadyExists(string name);\\nerror NameNotFound(string name);\\nerror NameRegisteredByOtherAccount(string name, uint256 tokenId);\\nerror NotAuthorized(address signer);\\nerror NonExistingErc20Token(address erc20token);\\nerror RefundFailed();\\nerror SameValue();\\nerror SBTAlreadyLinked(address token);\\nerror SoulNameContractNotSet();\\nerror TokenNotFound(uint256 tokenId);\\nerror TransferFailed();\\nerror URIAlreadyExists(string tokenURI);\\nerror ValidPeriodExpired(uint256 expirationDate);\\nerror ZeroAddress();\\nerror ZeroLengthName(string name);\\nerror ZeroYearsPeriod(uint256 yearsPeriod);\\n\",\"keccak256\":\"0xb5466d180d92f935450276dff6132f555226a4a03822cc6370ad6de9b39f15d2\",\"license\":\"MIT\"},\"contracts/libraries/Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n/// @title Utilities library for Masa Contracts Identity repository\\n/// @author Masa Finance\\n/// @notice Library of utilities for Masa Contracts Identity repository\\nlibrary Utils {\\n    struct slice {\\n        uint256 _len;\\n        uint256 _ptr;\\n    }\\n\\n    function toLowerCase(string memory _str)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory bStr = bytes(_str);\\n        bytes memory bLower = new bytes(bStr.length);\\n\\n        for (uint256 i = 0; i < bStr.length; i++) {\\n            // Uppercase character...\\n            if ((bStr[i] >= 0x41) && (bStr[i] <= 0x5A)) {\\n                // So we add 0x20 to make it lowercase\\n                bLower[i] = bytes1(uint8(bStr[i]) + 0x20);\\n            } else {\\n                bLower[i] = bStr[i];\\n            }\\n        }\\n        return string(bLower);\\n    }\\n\\n    function toSlice(string memory self) private pure returns (slice memory) {\\n        uint256 ptr;\\n        assembly {\\n            ptr := add(self, 0x20)\\n        }\\n        return slice(bytes(self).length, ptr);\\n    }\\n\\n    function startsWith(string memory str, string memory needle)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        slice memory s_str = toSlice(str);\\n        slice memory s_needle = toSlice(needle);\\n\\n        if (s_str._len < s_needle._len) {\\n            return false;\\n        }\\n\\n        if (s_str._ptr == s_needle._ptr) {\\n            return true;\\n        }\\n\\n        bool equal;\\n        assembly {\\n            let length := mload(s_needle)\\n            let selfptr := mload(add(s_str, 0x20))\\n            let needleptr := mload(add(s_needle, 0x20))\\n            equal := eq(\\n                keccak256(selfptr, length),\\n                keccak256(needleptr, length)\\n            )\\n        }\\n        return equal;\\n    }\\n}\\n\",\"keccak256\":\"0x93ada7c5c59bff283d460e8374cd39262cee66ab8e5bc1cb5da050762f2b410d\",\"license\":\"MIT\"},\"contracts/tokens/MasaNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/// @title MasaNFT\\n/// @author Masa Finance\\n/// @notice Non-fungible token is a token that is not fungible.\\n/// @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard,\\n/// that inherits from {ERC721Enumerable}, {Ownable}, {AccessControl} and {ERC721Burnable}.\\nabstract contract MasaNFT is\\n    ERC721,\\n    ERC721Enumerable,\\n    Ownable,\\n    AccessControl,\\n    ERC721Burnable\\n{\\n    /* ========== STATE VARIABLES =========================================== */\\n\\n    using Strings for uint256;\\n    using Counters for Counters.Counter;\\n\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    Counters.Counter private _tokenIdCounter;\\n\\n    string private _baseTokenURI;\\n\\n    /* ========== INITIALIZE ================================================ */\\n\\n    /// @notice Creates a new NFT\\n    /// @dev Creates a new Non-fungible token\\n    /// @param admin Administrator of the smart contract\\n    /// @param name Name of the token\\n    /// @param symbol Symbol of the token\\n    /// @param baseTokenURI Base URI of the token\\n    constructor(\\n        address admin,\\n        string memory name,\\n        string memory symbol,\\n        string memory baseTokenURI\\n    ) ERC721(name, symbol) {\\n        Ownable.transferOwnership(admin);\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\\n        _grantRole(MINTER_ROLE, admin);\\n\\n        _baseTokenURI = baseTokenURI;\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ====================================== */\\n\\n    function _mintWithCounter(address to)\\n        internal\\n        onlyRole(MINTER_ROLE)\\n        returns (uint256)\\n    {\\n        uint256 tokenId = _tokenIdCounter.current();\\n        _tokenIdCounter.increment();\\n        _safeMint(to, tokenId);\\n\\n        return tokenId;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ======================================== */\\n\\n    /* ========== VIEWS ===================================================== */\\n\\n    /// @notice Returns true if the token exists\\n    /// @dev Returns true if the token has been minted\\n    /// @param tokenId Token to check\\n    /// @return True if the token exists\\n    function exists(uint256 tokenId) external view returns (bool) {\\n        return _exists(tokenId);\\n    }\\n\\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n    /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\\n    ///  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\n    ///  Metadata JSON Schema\\\".\\n    /// @param tokenId NFT to get the URI of\\n    /// @return URI of the NFT\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return\\n            bytes(baseURI).length > 0\\n                ? string(abi.encodePacked(baseURI, tokenId.toString(), \\\".json\\\"))\\n                : \\\"\\\";\\n    }\\n\\n    /// @notice Query if a contract implements an interface\\n    /// @dev Interface identification is specified in ERC-165.\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @return `true` if the contract implements `interfaceId` and\\n    ///  `interfaceId` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC721, ERC721Enumerable, AccessControl)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /* ========== PRIVATE FUNCTIONS ========================================= */\\n\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return _baseTokenURI;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override(ERC721, ERC721Enumerable) {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /* ========== MODIFIERS ================================================= */\\n\\n    /* ========== EVENTS ==================================================== */\\n}\\n\",\"keccak256\":\"0x058eee3dccf50e46c0baac3b42e0f75fd3db342c224bae099922148a7ce4c2dc\",\"license\":\"MIT\"},\"contracts/tokens/SBT/ISBT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface ISBT is IERC165 {\\n    /// @dev This emits when an SBT is newly minted.\\n    ///  This event emits when SBTs are created\\n    event Mint(address indexed _owner, uint256 indexed _tokenId);\\n\\n    /// @dev This emits when an SBT is burned\\n    ///  This event emits when SBTs are destroyed\\n    event Burn(address indexed _owner, uint256 indexed _tokenId);\\n\\n    /// @notice Count all SBTs assigned to an owner\\n    /// @dev SBTs assigned to the zero address are considered invalid, and this\\n    ///  function throws for queries about the zero address.\\n    /// @param _owner An address for whom to query the balance\\n    /// @return The number of SBTs owned by `_owner`, possibly zero\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    /// @notice Find the owner of an SBT\\n    /// @dev SBTs assigned to zero address are considered invalid, and queries\\n    ///  about them do throw.\\n    /// @param _tokenId The identifier for an SBT\\n    /// @return The address of the owner of the SBT\\n    function ownerOf(uint256 _tokenId) external view returns (address);\\n}\\n\",\"keccak256\":\"0xe3bbe44185c28e82bafd54b2197ea0971af74864dd1e7148ac4bbc673d52d738\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620041873803806200418783398101604081905262000034916200046d565b604080518082018252600e81526d4d61736120536f756c204e616d6560901b602080830191825283518085018552600381526226a9a760e91b818301528451918201909452600080825283518995938592859262000093929062000334565b508051620000a990600190602084019062000334565b505050620000c6620000c0620001ad60201b60201c565b620001b1565b620000dc846200020360201b620018291760201c565b620000e96000856200024d565b620001157f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6856200024d565b80516200012a90600d90602084019062000334565b50506001600e555050506001600160a01b0383166200015c5760405163d92e233d60e01b815260040160405180910390fd5b600f80546001600160a01b0319166001600160a01b03851617905581516200018c90601090602085019062000334565b508051620001a290601190602084019062000334565b5050505050620006f5565b3390565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6200020d620002d8565b6001600160a01b0381166200023f5760405162461bcd60e51b8152600401620002369062000513565b60405180910390fd5b6200024a81620001b1565b50565b62000259828262000307565b620002d4576000828152600b602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620002933390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b600a546001600160a01b03163314620003055760405162461bcd60e51b815260040162000236906200055e565b565b6000828152600b602090815260408083206001600160a01b038516845290915290205460ff165b92915050565b82805462000342906200063a565b90600052602060002090601f016020900481019282620003665760008555620003b1565b82601f106200038157805160ff1916838001178555620003b1565b82800160010185558215620003b1579182015b82811115620003b157825182559160200191906001019062000394565b50620003bf929150620003c3565b5090565b5b80821115620003bf5760008155600101620003c4565b6000620003f1620003eb84620005b8565b62000599565b9050828152602081018484840111156200040e576200040e600080fd5b6200041b84828562000607565b509392505050565b80516200032e81620006d3565b80516200032e81620006ea565b600082601f830112620004535762000453600080fd5b815162000465848260208601620003da565b949350505050565b60008060008060808587031215620004885762000488600080fd5b600062000496878762000423565b9450506020620004a98782880162000430565b93505060408501516001600160401b03811115620004ca57620004ca600080fd5b620004d8878288016200043d565b92505060608501516001600160401b03811115620004f957620004f9600080fd5b62000507878288016200043d565b91505092959194509250565b602080825281016200032e81602681527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160208201526564647265737360d01b604082015260600190565b60208082528181019081527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726040830152606082016200032e565b6000620005a560405190565b9050620005b382826200066b565b919050565b60006001600160401b03821115620005d457620005d4620006b3565b620005df82620006c9565b60200192915050565b60006001600160a01b0382166200032e565b60006200032e82620005e8565b60005b83811015620006245781810151838201526020016200060a565b8381111562000634576000848401525b50505050565b6002810460018216806200064f57607f821691505b602082108114156200066557620006656200069d565b50919050565b6200067682620006c9565b81018181106001600160401b0382111715620006965762000696620006b3565b6040525050565b634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b601f01601f191690565b620006de81620005e8565b81146200024a57600080fd5b620006de81620005fa565b613a8280620007056000396000f3fe608060405234801561001057600080fd5b506004361061020f5760003560e01c806301ffc9a71461021457806306fdde031461023d578063081812fc14610252578063095ea7b31461027257806318160ddd146102875780631e7663bc1461029857806323b872dd146102ab578063248a9ca3146102be5780632d5537b0146102d15780632f2ff15d146102d95780632f745c59146102ec57806336568abe146102ff5780633ad3033e146103125780633dd904301461032557806342842e0e1461033857806342966c681461034b57806346b2b0871461035e5780634cf12d26146103835780634f558e79146103965780634f6ccce7146103a95780636352211e146103bc57806370a08231146103cf578063715018a6146103e2578063776ce6a1146103ea57806377bed5ed146103f25780637e2285aa146104125780637e669891146104255780638da5cb5b1461044557806391d148541461044d578063938e3d7b1461046057806395d89b4114610473578063965306aa1461047b578063a217fddf1461048e578063a22cb46514610496578063b4b5b48f146104a9578063b79636b6146104ca578063b88d4fde146104dd578063bdf29a85146104f0578063c87b56dd14610536578063d539139314610549578063d547741f1461055e578063e8a3d48514610571578063e985e9c514610579578063ebfcbee11461058c578063f2fde38b1461059f575b600080fd5b610227610222366004612d83565b6105b2565b6040516102349190613563565b60405180910390f35b6102456105c3565b60405161023491906135a8565b610265610260366004612d40565b610655565b6040516102349190613500565b610285610280366004612d0d565b61067c565b005b6008545b604051610234919061358c565b61028b6102a6366004612de6565b61070b565b6102856102b9366004612bbc565b610716565b61028b6102cc366004612d40565b610748565b61024561075d565b6102856102e7366004612d61565b6107eb565b61028b6102fa366004612d0d565b610807565b61028561030d366004612d61565b610859565b610285610320366004612dc5565b61088f565b61028b610333366004612cbd565b610913565b610285610346366004612bbc565b610b96565b610285610359366004612d40565b610bb1565b61037161036c366004612de6565b610d75565b604051610234969594939291906135b9565b610245610391366004612de6565b610f89565b6102276103a4366004612d40565b610fa8565b61028b6103b7366004612d40565b610fb3565b6102656103ca366004612d40565b611001565b61028b6103dd366004612b3d565b611036565b61028561107a565b61024561108e565b600f54610405906001600160a01b031681565b604051610234919061359a565b610285610420366004612de6565b61109d565b610438610433366004612d40565b611129565b6040516102349190613552565b6102656111ba565b61022761045b366004612d61565b6111c9565b61028561046e366004612de6565b6111f4565b610245611280565b610227610489366004612de6565b61128f565b61028b600081565b6102856104a4366004612c8a565b61131c565b6104bc6104b7366004612d40565b611327565b604051610234929190613618565b6104386104d8366004612b3d565b6113cb565b6102856104eb366004612c0c565b611519565b6105286104fe366004612de6565b80516020818301810180516015825292820191909301209152805460019091015460ff9091169082565b604051610234929190613571565b610245610544366004612d40565b611552565b61028b600080516020613a0d83398151915281565b61028561056c366004612d61565b611656565b610245611672565b610227610587366004612b7f565b61167f565b61028561059a366004612e41565b6116ad565b6102856105ad366004612b3d565b611829565b60006105bd82611863565b92915050565b6060600080546105d2906138c0565b80601f01602080910402602001604051908101604052809291908181526020018280546105fe906138c0565b801561064b5780601f106106205761010080835404028352916020019161064b565b820191906000526020600020905b81548152906001019060200180831161062e57829003601f168201915b5050505050905090565b600061066082611888565b506000908152600460205260409020546001600160a01b031690565b600061068782611001565b9050806001600160a01b0316836001600160a01b031614156106c45760405162461bcd60e51b81526004016106bb90613708565b60405180910390fd5b336001600160a01b03821614806106e057506106e0813361167f565b6106fc5760405162461bcd60e51b81526004016106bb906136c8565b61070683836118ad565b505050565b60006105bd8261191b565b610721335b82611995565b61073d5760405162461bcd60e51b81526004016106bb90613728565b6107068383836119f3565b6000908152600b602052604090206001015490565b6010805461076a906138c0565b80601f0160208091040260200160405190810160405280929190818152602001828054610796906138c0565b80156107e35780601f106107b8576101008083540402835291602001916107e3565b820191906000526020600020905b8154815290600101906020018083116107c657829003601f168201915b505050505081565b6107f482610748565b6107fd81611b0e565b6107068383611b18565b600061081283611036565b82106108305760405162461bcd60e51b81526004016106bb90613648565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6001600160a01b03811633146108815760405162461bcd60e51b81526004016106bb90613748565b61088b8282611b9e565b5050565b600061089a81611b0e565b6001600160a01b0382166108c15760405163d92e233d60e01b815260040160405180910390fd5b600f546001600160a01b03838116911614156108f05760405163c23f6ccb60e01b815260040160405180910390fd5b50600f80546001600160a01b0319166001600160a01b0392909216919091179055565b60006002600e5414156109385760405162461bcd60e51b81526004016106bb90613738565b6002600e556109468461128f565b61096557836040516309463f9760e31b81526004016106bb91906135a8565b8351610986578360405163234371eb60e21b81526004016106bb91906135a8565b826109a657826040516372eab4d960e01b81526004016106bb919061358c565b600f546040516370a0823160e01b81526001600160a01b03909116906370a08231906109d6908890600401613500565b60206040518083038186803b1580156109ee57600080fd5b505afa158015610a02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a269190612e20565b610a45578460405163678391f160e01b81526004016106bb9190613500565b610a6c826040518060400160405280600581526020016461723a2f2f60d81b815250611c05565b158015610a9f5750610a9d8260405180604001604052806007815260200166697066733a2f2f60c81b815250611c05565b155b15610abf5781604051639bc1a52f60e01b81526004016106bb91906135a8565b6000610aca86611c6b565b9050610ad68184611caa565b60008181526014602090815260409091208651610af5928801906129b9565b50610b0e610b076301e1338086611d6b565b4290611d77565b600082815260146020526040812060010191909155610b2c86611d83565b905081601582604051610b3f9190613454565b9081526020016040518091039020600101819055506001601582604051610b669190613454565b908152604051908190036020019020805491151560ff199092169190911790555090506001600e55949350505050565b61070683838360405180602001604052806000815250611519565b610bba81611ef9565b610bd957806040516306caeb1360e41b81526004016106bb919061358c565b60008181526014602052604081208054610c7a9190610bf7906138c0565b80601f0160208091040260200160405190810160405280929190818152602001828054610c23906138c0565b8015610c705780601f10610c4557610100808354040283529160200191610c70565b820191906000526020600020905b815481529060010190602001808311610c5357829003601f168201915b5050505050611d83565b6000838152601460205260408120919250610c958282612a3d565b6001820160009055505081601582604051610cb09190613454565b9081526020016040518091039020600101541415610cf857601581604051610cd89190613454565b908152604051908190036020019020805460ff1916815560006001909101555b60008281526012602052604090208054610d11906138c0565b159050610d6c576000828152601260205260408082209051601391610d35916134a6565b9081526040805160209281900383019020805460ff19169315159390931790925560008481526012909152908120610d6c91612a3d565b61088b82611f16565b60606000806000806000610d888761191b565b92506000610d9584611001565b600f546040516370a0823160e01b815291925060009182916001600160a01b0316906370a0823190610dcb908690600401613500565b60206040518083038186803b158015610de357600080fd5b505afa158015610df7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1b9190612e20565b11905060008115610ea957600f5460405163294cdf0d60e01b81526001600160a01b039091169063294cdf0d90610e56908690600401613500565b60206040518083038186803b158015610e6e57600080fd5b505afa158015610e82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea69190612e20565b90505b6000868152601460205260408082208151808301909252805482908290610ecf906138c0565b80601f0160208091040260200160405190810160405280929190818152602001828054610efb906138c0565b8015610f485780601f10610f1d57610100808354040283529160200191610f48565b820191906000526020600020905b815481529060010190602001808311610f2b57829003601f168201915b505050505081526020016001820154815250509050610f6a8160000151611f44565b6020909101519099509197509550925050504281101591939550919395565b60606000610f968361191b565b9050610fa181611552565b9392505050565b60006105bd82611ef9565b6000610fbe60085490565b8210610fdc5760405162461bcd60e51b81526004016106bb90613718565b60088281548110610fef57610fef61399b565b90600052602060002001549050919050565b6000818152600260205260408120546001600160a01b0316806105bd5760405162461bcd60e51b81526004016106bb906136f8565b60006001600160a01b03821661105e5760405162461bcd60e51b81526004016106bb906136b8565b506001600160a01b031660009081526003602052604090205490565b611082611f70565b61108c6000611f9f565b565b6060601080546105d2906138c0565b60006110a881611b0e565b816040516020016110b99190613454565b6040516020818303038152906040528051906020012060106040516020016110e191906134a6565b6040516020818303038152906040528051906020012014156111165760405163c23f6ccb60e01b815260040160405180910390fd5b81516107069060109060208501906129b9565b600f546040516331a9108f60e11b81526060916000916001600160a01b0390911690636352211e9061115f90869060040161358c565b60206040518083038186803b15801561117757600080fd5b505afa15801561118b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111af9190612b5e565b9050610fa1816113cb565b600a546001600160a01b031690565b6000918252600b602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60006111ff81611b0e565b816040516020016112109190613454565b60405160208183030381529060405280519060200120601160405160200161123891906134a6565b60405160208183030381529060405280519060200120141561126d5760405163c23f6ccb60e01b815260040160405180910390fd5b81516107069060119060208501906129b9565b6060600180546105d2906138c0565b60008061129b83611d83565b90506015816040516112ad9190613454565b9081526040519081900360200190205460ff161561130d5760006015826040516112d79190613454565b90815260200160405180910390206001015490504260146000838152602001908152602001600020600101541092505050919050565b50600192915050565b50919050565b61088b338383611ff1565b601460205260009081526040902080548190611342906138c0565b80601f016020809104026020016040519081016040528092919081815260200182805461136e906138c0565b80156113bb5780601f10611390576101008083540402835291602001916113bb565b820191906000526020600020905b81548152906001019060200180831161139e57829003601f168201915b5050505050908060010154905082565b60606000806113d984611036565b905060005b8181101561142e5760006113f28683610807565b600081815260146020526040902060010154909150421161141b57611418846001611d77565b93505b508061142681613914565b9150506113de565b506000826001600160401b03811115611449576114496139b1565b60405190808252806020026020018201604052801561147c57816020015b60608152602001906001900390816114675790505b5090506000805b8381101561150e5760006114978883610807565b60008181526014602052604090206001015490915042116114fb57600081815260146020526040902080546114d09190610bf7906138c0565b8484815181106114e2576114e261399b565b60209081029190910101526114f8836001611d77565b92505b508061150681613914565b915050611483565b509095945050505050565b611524335b83611995565b6115405760405162461bcd60e51b81526004016106bb90613728565b61154c84848484612094565b50505050565b606061155d82611888565b60008281526012602052604081208054611576906138c0565b80601f01602080910402602001604051908101604052809291908181526020018280546115a2906138c0565b80156115ef5780601f106115c4576101008083540402835291602001916115ef565b820191906000526020600020905b8154815290600101906020018083116115d257829003601f168201915b5050505050905060006116006120c7565b9050805160001415611613575092915050565b81511561164557808260405160200161162d929190613460565b60405160208183030381529060405292505050919050565b61164e846120d6565b949350505050565b61165f82610748565b61166881611b0e565b6107068383611b9e565b6011805461076a906138c0565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6116b63361151e565b6116d5573360405163060296c760e31b81526004016106bb9190613500565b806116f557806040516372eab4d960e01b81526004016106bb919061358c565b600082815260146020526040812080546117139190610bf7906138c0565b9050826015826040516117269190613454565b9081526020016040518091039020600101541461175a5780836040516309a3b96f60e21b81526004016106bb929190613618565b60008381526014602052604090206001015442111561179b57611784610b076301e1338084611d6b565b6000848152601460205260409020600101556117d7565b6117c46117ac6301e1338084611d6b565b60008581526014602052604090206001015490611d77565b6000848152601460205260409020600101555b600083815260146020526040908190206001015490517f88ef5d91ad01b04046836022a7aade9038eb1188da66972705cc01ae3d49f0839161181c9186918691613758565b60405180910390a1505050565b611831611f70565b6001600160a01b0381166118575760405162461bcd60e51b81526004016106bb90613668565b61186081611f9f565b50565b60006001600160e01b03198216637965db0b60e01b14806105bd57506105bd8261213c565b61189181611ef9565b6118605760405162461bcd60e51b81526004016106bb906136f8565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906118e282611001565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061192783611d83565b90506015816040516119399190613454565b9081526040519081900360200190205460ff1661196b5782604051636de04b9f60e01b81526004016106bb91906135a8565b60158160405161197b9190613454565b908152602001604051809103902060010154915050919050565b6000806119a183611001565b9050806001600160a01b0316846001600160a01b031614806119c857506119c8818561167f565b8061164e5750836001600160a01b03166119e184610655565b6001600160a01b031614949350505050565b826001600160a01b0316611a0682611001565b6001600160a01b031614611a2c5760405162461bcd60e51b81526004016106bb90613678565b6001600160a01b038216611a525760405162461bcd60e51b81526004016106bb90613698565b611a5d838383612161565b611a686000826118ad565b6001600160a01b0383166000908152600360205260408120805460019290611a91908490613833565b90915550506001600160a01b0382166000908152600360205260408120805460019290611abf9084906137c7565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b038681169182179092559151849391871691600080516020613a2d83398151915291a4505050565b611860813361216c565b611b2282826111c9565b61088b576000828152600b602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611b5a3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611ba882826111c9565b1561088b576000828152600b602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600080611c11846121d0565b90506000611c1e846121d0565b805183519192501115611c36576000925050506105bd565b806020015182602001511415611c51576001925050506105bd565b805160209283015192909101518190209120149392505050565b6000600080516020613a0d833981519152611c8581611b0e565b6000611c90600c5490565b9050611ca0600c80546001019055565b610fa184826121fd565b611cb382611ef9565b611cd257816040516306caeb1360e41b81526004016106bb919061358c565b601381604051611ce29190613454565b9081526040519081900360200190205460ff1615611d15578060405163f62081bb60e01b81526004016106bb91906135a8565b60008281526012602090815260409091208251611d34928401906129b9565b506001601382604051611d479190613454565b908152604051908190036020019020805491151560ff199092169190911790555050565b6000610fa18284613814565b6000610fa182846137c7565b60606000829050600081516001600160401b03811115611da557611da56139b1565b6040519080825280601f01601f191660200182016040528015611dcf576020820181803683370190505b50905060005b8251811015611ef157604160f81b838281518110611df557611df561399b565b01602001516001600160f81b03191610801590611e365750605a60f81b838281518110611e2457611e2461399b565b01602001516001600160f81b03191611155b15611e9857828181518110611e4d57611e4d61399b565b602001015160f81c60f81b60f81c6020611e6791906137df565b60f81b828281518110611e7c57611e7c61399b565b60200101906001600160f81b031916908160001a905350611edf565b828181518110611eaa57611eaa61399b565b602001015160f81c60f81b828281518110611ec757611ec761399b565b60200101906001600160f81b031916908160001a9053505b80611ee981613914565b915050611dd5565b509392505050565b6000908152600260205260409020546001600160a01b0316151590565b611f1f3361071b565b611f3b5760405162461bcd60e51b81526004016106bb90613728565b61186081612217565b6060816010604051602001611f5a92919061343c565b6040516020818303038152906040529050919050565b33611f796111ba565b6001600160a01b03161461108c5760405162461bcd60e51b81526004016106bb906136e8565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031614156120235760405162461bcd60e51b81526004016106bb906136a8565b6001600160a01b0383811660008181526005602090815260408083209487168084529490915290819020805460ff1916851515179055517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190612087908590613563565b60405180910390a3505050565b61209f8484846119f3565b6120ab848484846122ac565b61154c5760405162461bcd60e51b81526004016106bb90613658565b6060600d80546105d2906138c0565b60606120e182611888565b60006120eb6120c7565b9050600081511161210b5760405180602001604052806000815250610fa1565b80612115846123b9565b604051602001612126929190613478565b6040516020818303038152906040529392505050565b60006001600160e01b0319821663780e9d6360e01b14806105bd57506105bd826124b6565b610706838383612506565b61217682826111c9565b61088b5761218e816001600160a01b031660146125be565b6121998360206125be565b6040516020016121aa9291906134b2565b60408051601f198184030181529082905262461bcd60e51b82526106bb916004016135a8565b60408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b61088b828260405180602001604052806000815250612729565b600061222282611001565b905061223081600084612161565b61223b6000836118ad565b6001600160a01b0381166000908152600360205260408120805460019290612264908490613833565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b03841690600080516020613a2d833981519152908390a45050565b60006001600160a01b0384163b156123ae57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906122f090339089908890889060040161350e565b602060405180830381600087803b15801561230a57600080fd5b505af192505050801561233a575060408051601f3d908101601f1916820190925261233791810190612da4565b60015b612394573d808015612368576040519150601f19603f3d011682016040523d82523d6000602084013e61236d565b606091505b50805161238c5760405162461bcd60e51b81526004016106bb90613658565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061164e565b506001949350505050565b6060816123dd5750506040805180820190915260018152600360fc1b602082015290565b8160005b811561240757806123f181613914565b91506124009050600a83613800565b91506123e1565b6000816001600160401b03811115612421576124216139b1565b6040519080825280601f01601f19166020018201604052801561244b576020820181803683370190505b5090505b841561164e57612460600183613833565b915061246d600a8661392f565b6124789060306137c7565b60f81b81838151811061248d5761248d61399b565b60200101906001600160f81b031916908160001a9053506124af600a86613800565b945061244f565b60006001600160e01b031982166380ac58cd60e01b14806124e757506001600160e01b03198216635b5e139f60e01b145b806105bd57506301ffc9a760e01b6001600160e01b03198316146105bd565b6001600160a01b0383166125615761255c81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b612584565b816001600160a01b0316836001600160a01b03161461258457612584838261275c565b6001600160a01b03821661259b57610706816127f9565b826001600160a01b0316826001600160a01b0316146107065761070682826128a8565b606060006125cd836002613814565b6125d89060026137c7565b6001600160401b038111156125ef576125ef6139b1565b6040519080825280601f01601f191660200182016040528015612619576020820181803683370190505b509050600360fc1b816000815181106126345761263461399b565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106126635761266361399b565b60200101906001600160f81b031916908160001a9053506000612687846002613814565b6126929060016137c7565b90505b600181111561270a576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106126c6576126c661399b565b1a60f81b8282815181106126dc576126dc61399b565b60200101906001600160f81b031916908160001a90535060049490941c93612703816138a9565b9050612695565b508315610fa15760405162461bcd60e51b81526004016106bb90613638565b61273383836128ec565b61274060008484846122ac565b6107065760405162461bcd60e51b81526004016106bb90613658565b6000600161276984611036565b6127739190613833565b6000838152600760205260409020549091508082146127c6576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b60085460009061280b90600190613833565b600083815260096020526040812054600880549394509092849081106128335761283361399b565b9060005260206000200154905080600883815481106128545761285461399b565b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061288c5761288c613985565b6001900381819060005260206000200160009055905550505050565b60006128b383611036565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6001600160a01b0382166129125760405162461bcd60e51b81526004016106bb906136d8565b61291b81611ef9565b156129385760405162461bcd60e51b81526004016106bb90613688565b61294460008383612161565b6001600160a01b038216600090815260036020526040812080546001929061296d9084906137c7565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386169081179091559051839290600080516020613a2d833981519152908290a45050565b8280546129c5906138c0565b90600052602060002090601f0160209004810192826129e75760008555612a2d565b82601f10612a0057805160ff1916838001178555612a2d565b82800160010185558215612a2d579182015b82811115612a2d578251825591602001919060010190612a12565b50612a39929150612a73565b5090565b508054612a49906138c0565b6000825580601f10612a59575050565b601f01602090049060005260206000209081019061186091905b5b80821115612a395760008155600101612a74565b6000612a9b612a968461379c565b613780565b905082815260208101848484011115612ab657612ab6600080fd5b611ef1848285613871565b80356105bd816139d1565b80516105bd816139d1565b80356105bd816139e5565b80356105bd816139ed565b80356105bd816139f3565b80516105bd816139f3565b600082601f830112612b1757612b17600080fd5b813561164e848260208601612a88565b80356105bd81613a03565b80516105bd816139ed565b600060208284031215612b5257612b52600080fd5b600061164e8484612ac1565b600060208284031215612b7357612b73600080fd5b600061164e8484612acc565b60008060408385031215612b9557612b95600080fd5b6000612ba18585612ac1565b9250506020612bb285828601612ac1565b9150509250929050565b600080600060608486031215612bd457612bd4600080fd5b6000612be08686612ac1565b9350506020612bf186828701612ac1565b9250506040612c0286828701612ae2565b9150509250925092565b60008060008060808587031215612c2557612c25600080fd5b6000612c318787612ac1565b9450506020612c4287828801612ac1565b9350506040612c5387828801612ae2565b92505060608501356001600160401b03811115612c7257612c72600080fd5b612c7e87828801612b03565b91505092959194509250565b60008060408385031215612ca057612ca0600080fd5b6000612cac8585612ac1565b9250506020612bb285828601612ad7565b60008060008060808587031215612cd657612cd6600080fd5b6000612ce28787612ac1565b94505060208501356001600160401b03811115612d0157612d01600080fd5b612c4287828801612b03565b60008060408385031215612d2357612d23600080fd5b6000612d2f8585612ac1565b9250506020612bb285828601612ae2565b600060208284031215612d5557612d55600080fd5b600061164e8484612ae2565b60008060408385031215612d7757612d77600080fd5b6000612ba18585612ae2565b600060208284031215612d9857612d98600080fd5b600061164e8484612aed565b600060208284031215612db957612db9600080fd5b600061164e8484612af8565b600060208284031215612dda57612dda600080fd5b600061164e8484612b27565b600060208284031215612dfb57612dfb600080fd5b81356001600160401b03811115612e1457612e14600080fd5b61164e84828501612b03565b600060208284031215612e3557612e35600080fd5b600061164e8484612b32565b60008060408385031215612e5757612e57600080fd5b6000612d2f8585612ae2565b6000610fa18383612ef2565b612e788161384a565b82525050565b6000612e88825190565b80845260208401935083602082028501612ea28560200190565b8060005b85811015612ed75784840389528151612ebf8582612e63565b94506020830160209a909a0199925050600101612ea6565b5091979650505050505050565b801515612e78565b80612e78565b6000612efc825190565b808452602084019350612f1381856020860161387d565b612f1c816139c7565b9093019392505050565b6000612f30825190565b612f3e81856020860161387d565b9290920192915050565b60008154612f55816138c0565b600182168015612f6c5760018114612f7d57612fad565b60ff19831686528186019350612fad565b60008581526020902060005b83811015612fa557815488820152600190910190602001612f89565b838801955050505b50505092915050565b612e7881613866565b60208082527f537472696e67733a20686578206c656e67746820696e73756666696369656e74910190815260005b5060200190565b602b81526000602082017f455243373231456e756d657261626c653a206f776e657220696e646578206f7581526a74206f6620626f756e647360a81b602082015291505b5060400190565b603281526000602082017f4552433732313a207472616e7366657220746f206e6f6e20455243373231526581527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60208201529150613038565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b60208201529150613038565b602581526000602082017f4552433732313a207472616e736665722066726f6d20696e636f72726563742081526437bbb732b960d91b60208201529150613038565b601c81526000602082017b115490cdcc8c4e881d1bdad95b88185b1c9958591e481b5a5b9d195960221b81529150612fed565b602481526000602082017f4552433732313a207472616e7366657220746f20746865207a65726f206164648152637265737360e01b60208201529150613038565b601981526000602082017822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b81529150612fed565b602981526000602082017f4552433732313a2061646472657373207a65726f206973206e6f7420612076618152683634b21037bbb732b960b91b60208201529150613038565b603e81526000602082017f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f81527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c000060208201529150613038565b60208082527f4552433732313a206d696e7420746f20746865207a65726f206164647265737391019081526000612fed565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657291019081526000612fed565b6018815260006020820177115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b81529150612fed565b602181526000602082017f4552433732313a20617070726f76616c20746f2063757272656e74206f776e658152603960f91b60208201529150613038565b602c81526000602082017f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f81526b7574206f6620626f756e647360a01b60208201529150613038565b602e81526000602082017f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6581526d1c881b9bdc88185c1c1c9bdd995960921b60208201529150613038565b601f81526000602082017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081529150612fed565b602f81526000602082017f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636581526e103937b632b9903337b91039b2b63360891b60208201529150613038565b60006134488285612f26565b915061164e8284612f48565b6000610fa18284612f26565b600061346c8285612f26565b915061164e8284612f26565b60006134848285612f26565b91506134908284612f26565b64173539b7b760d91b815291506005820161164e565b6000610fa18284612f48565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260170160006134de8285612f26565b7001034b99036b4b9b9b4b733903937b6329607d1b815291506011820161346c565b602081016105bd8284612e6f565b6080810161351c8287612e6f565b6135296020830186612e6f565b6135366040830185612eec565b81810360608301526135488184612ef2565b9695505050505050565b60208082528101610fa18184612e7e565b602081016105bd8284612ee4565b6040810161357f8285612ee4565b610fa16020830184612eec565b602081016105bd8284612eec565b602081016105bd8284612fb6565b60208082528101610fa18184612ef2565b60c080825281016135ca8189612ef2565b90506135d96020830188612ee4565b6135e66040830187612eec565b6135f36060830186612eec565b6136006080830185612eec565b61360d60a0830184612ee4565b979650505050505050565b604080825281016136298185612ef2565b9050610fa16020830184612eec565b602080825281016105bd81612fbf565b602080825281016105bd81612ff4565b602080825281016105bd8161303f565b602080825281016105bd8161308e565b602080825281016105bd816130d1565b602080825281016105bd81613113565b602080825281016105bd81613146565b602080825281016105bd81613187565b602080825281016105bd816131b7565b602080825281016105bd816131fd565b602080825281016105bd81613257565b602080825281016105bd81613289565b602080825281016105bd816132bb565b602080825281016105bd816132ea565b602080825281016105bd81613328565b602080825281016105bd81613371565b602080825281016105bd816133bc565b602080825281016105bd816133f0565b606081016137668286612eec565b6137736020830185612eec565b61164e6040830184612eec565b600061378b60405190565b905061379782826138e7565b919050565b60006001600160401b038211156137b5576137b56139b1565b6137be826139c7565b60200192915050565b600082198211156137da576137da613943565b500190565b600060ff8216915060ff831692508260ff038211156137da576137da613943565b60008261380f5761380f613959565b500490565b600081600019048311821515161561382e5761382e613943565b500290565b60008282101561384557613845613943565b500390565b60006001600160a01b0382166105bd565b60006105bd8261384a565b60006105bd8261385b565b82818337506000910152565b60005b83811015613898578181015183820152602001613880565b8381111561154c5750506000910152565b6000816138b8576138b8613943565b506000190190565b6002810460018216806138d457607f821691505b602082108114156113165761131661396f565b6138f0826139c7565b81018181106001600160401b038211171561390d5761390d6139b1565b6040525050565b600060001982141561392857613928613943565b5060010190565b60008261393e5761393e613959565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b601f01601f191690565b6139da8161384a565b811461186057600080fd5b8015156139da565b806139da565b6001600160e01b031981166139da565b6139da8161385b56fe9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212202482d00bcb18db3e92c8d554932829a74c4a54a00baa6c28b6d903e1f31de69064736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061020f5760003560e01c806301ffc9a71461021457806306fdde031461023d578063081812fc14610252578063095ea7b31461027257806318160ddd146102875780631e7663bc1461029857806323b872dd146102ab578063248a9ca3146102be5780632d5537b0146102d15780632f2ff15d146102d95780632f745c59146102ec57806336568abe146102ff5780633ad3033e146103125780633dd904301461032557806342842e0e1461033857806342966c681461034b57806346b2b0871461035e5780634cf12d26146103835780634f558e79146103965780634f6ccce7146103a95780636352211e146103bc57806370a08231146103cf578063715018a6146103e2578063776ce6a1146103ea57806377bed5ed146103f25780637e2285aa146104125780637e669891146104255780638da5cb5b1461044557806391d148541461044d578063938e3d7b1461046057806395d89b4114610473578063965306aa1461047b578063a217fddf1461048e578063a22cb46514610496578063b4b5b48f146104a9578063b79636b6146104ca578063b88d4fde146104dd578063bdf29a85146104f0578063c87b56dd14610536578063d539139314610549578063d547741f1461055e578063e8a3d48514610571578063e985e9c514610579578063ebfcbee11461058c578063f2fde38b1461059f575b600080fd5b610227610222366004612d83565b6105b2565b6040516102349190613563565b60405180910390f35b6102456105c3565b60405161023491906135a8565b610265610260366004612d40565b610655565b6040516102349190613500565b610285610280366004612d0d565b61067c565b005b6008545b604051610234919061358c565b61028b6102a6366004612de6565b61070b565b6102856102b9366004612bbc565b610716565b61028b6102cc366004612d40565b610748565b61024561075d565b6102856102e7366004612d61565b6107eb565b61028b6102fa366004612d0d565b610807565b61028561030d366004612d61565b610859565b610285610320366004612dc5565b61088f565b61028b610333366004612cbd565b610913565b610285610346366004612bbc565b610b96565b610285610359366004612d40565b610bb1565b61037161036c366004612de6565b610d75565b604051610234969594939291906135b9565b610245610391366004612de6565b610f89565b6102276103a4366004612d40565b610fa8565b61028b6103b7366004612d40565b610fb3565b6102656103ca366004612d40565b611001565b61028b6103dd366004612b3d565b611036565b61028561107a565b61024561108e565b600f54610405906001600160a01b031681565b604051610234919061359a565b610285610420366004612de6565b61109d565b610438610433366004612d40565b611129565b6040516102349190613552565b6102656111ba565b61022761045b366004612d61565b6111c9565b61028561046e366004612de6565b6111f4565b610245611280565b610227610489366004612de6565b61128f565b61028b600081565b6102856104a4366004612c8a565b61131c565b6104bc6104b7366004612d40565b611327565b604051610234929190613618565b6104386104d8366004612b3d565b6113cb565b6102856104eb366004612c0c565b611519565b6105286104fe366004612de6565b80516020818301810180516015825292820191909301209152805460019091015460ff9091169082565b604051610234929190613571565b610245610544366004612d40565b611552565b61028b600080516020613a0d83398151915281565b61028561056c366004612d61565b611656565b610245611672565b610227610587366004612b7f565b61167f565b61028561059a366004612e41565b6116ad565b6102856105ad366004612b3d565b611829565b60006105bd82611863565b92915050565b6060600080546105d2906138c0565b80601f01602080910402602001604051908101604052809291908181526020018280546105fe906138c0565b801561064b5780601f106106205761010080835404028352916020019161064b565b820191906000526020600020905b81548152906001019060200180831161062e57829003601f168201915b5050505050905090565b600061066082611888565b506000908152600460205260409020546001600160a01b031690565b600061068782611001565b9050806001600160a01b0316836001600160a01b031614156106c45760405162461bcd60e51b81526004016106bb90613708565b60405180910390fd5b336001600160a01b03821614806106e057506106e0813361167f565b6106fc5760405162461bcd60e51b81526004016106bb906136c8565b61070683836118ad565b505050565b60006105bd8261191b565b610721335b82611995565b61073d5760405162461bcd60e51b81526004016106bb90613728565b6107068383836119f3565b6000908152600b602052604090206001015490565b6010805461076a906138c0565b80601f0160208091040260200160405190810160405280929190818152602001828054610796906138c0565b80156107e35780601f106107b8576101008083540402835291602001916107e3565b820191906000526020600020905b8154815290600101906020018083116107c657829003601f168201915b505050505081565b6107f482610748565b6107fd81611b0e565b6107068383611b18565b600061081283611036565b82106108305760405162461bcd60e51b81526004016106bb90613648565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6001600160a01b03811633146108815760405162461bcd60e51b81526004016106bb90613748565b61088b8282611b9e565b5050565b600061089a81611b0e565b6001600160a01b0382166108c15760405163d92e233d60e01b815260040160405180910390fd5b600f546001600160a01b03838116911614156108f05760405163c23f6ccb60e01b815260040160405180910390fd5b50600f80546001600160a01b0319166001600160a01b0392909216919091179055565b60006002600e5414156109385760405162461bcd60e51b81526004016106bb90613738565b6002600e556109468461128f565b61096557836040516309463f9760e31b81526004016106bb91906135a8565b8351610986578360405163234371eb60e21b81526004016106bb91906135a8565b826109a657826040516372eab4d960e01b81526004016106bb919061358c565b600f546040516370a0823160e01b81526001600160a01b03909116906370a08231906109d6908890600401613500565b60206040518083038186803b1580156109ee57600080fd5b505afa158015610a02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a269190612e20565b610a45578460405163678391f160e01b81526004016106bb9190613500565b610a6c826040518060400160405280600581526020016461723a2f2f60d81b815250611c05565b158015610a9f5750610a9d8260405180604001604052806007815260200166697066733a2f2f60c81b815250611c05565b155b15610abf5781604051639bc1a52f60e01b81526004016106bb91906135a8565b6000610aca86611c6b565b9050610ad68184611caa565b60008181526014602090815260409091208651610af5928801906129b9565b50610b0e610b076301e1338086611d6b565b4290611d77565b600082815260146020526040812060010191909155610b2c86611d83565b905081601582604051610b3f9190613454565b9081526020016040518091039020600101819055506001601582604051610b669190613454565b908152604051908190036020019020805491151560ff199092169190911790555090506001600e55949350505050565b61070683838360405180602001604052806000815250611519565b610bba81611ef9565b610bd957806040516306caeb1360e41b81526004016106bb919061358c565b60008181526014602052604081208054610c7a9190610bf7906138c0565b80601f0160208091040260200160405190810160405280929190818152602001828054610c23906138c0565b8015610c705780601f10610c4557610100808354040283529160200191610c70565b820191906000526020600020905b815481529060010190602001808311610c5357829003601f168201915b5050505050611d83565b6000838152601460205260408120919250610c958282612a3d565b6001820160009055505081601582604051610cb09190613454565b9081526020016040518091039020600101541415610cf857601581604051610cd89190613454565b908152604051908190036020019020805460ff1916815560006001909101555b60008281526012602052604090208054610d11906138c0565b159050610d6c576000828152601260205260408082209051601391610d35916134a6565b9081526040805160209281900383019020805460ff19169315159390931790925560008481526012909152908120610d6c91612a3d565b61088b82611f16565b60606000806000806000610d888761191b565b92506000610d9584611001565b600f546040516370a0823160e01b815291925060009182916001600160a01b0316906370a0823190610dcb908690600401613500565b60206040518083038186803b158015610de357600080fd5b505afa158015610df7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1b9190612e20565b11905060008115610ea957600f5460405163294cdf0d60e01b81526001600160a01b039091169063294cdf0d90610e56908690600401613500565b60206040518083038186803b158015610e6e57600080fd5b505afa158015610e82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea69190612e20565b90505b6000868152601460205260408082208151808301909252805482908290610ecf906138c0565b80601f0160208091040260200160405190810160405280929190818152602001828054610efb906138c0565b8015610f485780601f10610f1d57610100808354040283529160200191610f48565b820191906000526020600020905b815481529060010190602001808311610f2b57829003601f168201915b505050505081526020016001820154815250509050610f6a8160000151611f44565b6020909101519099509197509550925050504281101591939550919395565b60606000610f968361191b565b9050610fa181611552565b9392505050565b60006105bd82611ef9565b6000610fbe60085490565b8210610fdc5760405162461bcd60e51b81526004016106bb90613718565b60088281548110610fef57610fef61399b565b90600052602060002001549050919050565b6000818152600260205260408120546001600160a01b0316806105bd5760405162461bcd60e51b81526004016106bb906136f8565b60006001600160a01b03821661105e5760405162461bcd60e51b81526004016106bb906136b8565b506001600160a01b031660009081526003602052604090205490565b611082611f70565b61108c6000611f9f565b565b6060601080546105d2906138c0565b60006110a881611b0e565b816040516020016110b99190613454565b6040516020818303038152906040528051906020012060106040516020016110e191906134a6565b6040516020818303038152906040528051906020012014156111165760405163c23f6ccb60e01b815260040160405180910390fd5b81516107069060109060208501906129b9565b600f546040516331a9108f60e11b81526060916000916001600160a01b0390911690636352211e9061115f90869060040161358c565b60206040518083038186803b15801561117757600080fd5b505afa15801561118b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111af9190612b5e565b9050610fa1816113cb565b600a546001600160a01b031690565b6000918252600b602090815260408084206001600160a01b0393909316845291905290205460ff1690565b60006111ff81611b0e565b816040516020016112109190613454565b60405160208183030381529060405280519060200120601160405160200161123891906134a6565b60405160208183030381529060405280519060200120141561126d5760405163c23f6ccb60e01b815260040160405180910390fd5b81516107069060119060208501906129b9565b6060600180546105d2906138c0565b60008061129b83611d83565b90506015816040516112ad9190613454565b9081526040519081900360200190205460ff161561130d5760006015826040516112d79190613454565b90815260200160405180910390206001015490504260146000838152602001908152602001600020600101541092505050919050565b50600192915050565b50919050565b61088b338383611ff1565b601460205260009081526040902080548190611342906138c0565b80601f016020809104026020016040519081016040528092919081815260200182805461136e906138c0565b80156113bb5780601f10611390576101008083540402835291602001916113bb565b820191906000526020600020905b81548152906001019060200180831161139e57829003601f168201915b5050505050908060010154905082565b60606000806113d984611036565b905060005b8181101561142e5760006113f28683610807565b600081815260146020526040902060010154909150421161141b57611418846001611d77565b93505b508061142681613914565b9150506113de565b506000826001600160401b03811115611449576114496139b1565b60405190808252806020026020018201604052801561147c57816020015b60608152602001906001900390816114675790505b5090506000805b8381101561150e5760006114978883610807565b60008181526014602052604090206001015490915042116114fb57600081815260146020526040902080546114d09190610bf7906138c0565b8484815181106114e2576114e261399b565b60209081029190910101526114f8836001611d77565b92505b508061150681613914565b915050611483565b509095945050505050565b611524335b83611995565b6115405760405162461bcd60e51b81526004016106bb90613728565b61154c84848484612094565b50505050565b606061155d82611888565b60008281526012602052604081208054611576906138c0565b80601f01602080910402602001604051908101604052809291908181526020018280546115a2906138c0565b80156115ef5780601f106115c4576101008083540402835291602001916115ef565b820191906000526020600020905b8154815290600101906020018083116115d257829003601f168201915b5050505050905060006116006120c7565b9050805160001415611613575092915050565b81511561164557808260405160200161162d929190613460565b60405160208183030381529060405292505050919050565b61164e846120d6565b949350505050565b61165f82610748565b61166881611b0e565b6107068383611b9e565b6011805461076a906138c0565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6116b63361151e565b6116d5573360405163060296c760e31b81526004016106bb9190613500565b806116f557806040516372eab4d960e01b81526004016106bb919061358c565b600082815260146020526040812080546117139190610bf7906138c0565b9050826015826040516117269190613454565b9081526020016040518091039020600101541461175a5780836040516309a3b96f60e21b81526004016106bb929190613618565b60008381526014602052604090206001015442111561179b57611784610b076301e1338084611d6b565b6000848152601460205260409020600101556117d7565b6117c46117ac6301e1338084611d6b565b60008581526014602052604090206001015490611d77565b6000848152601460205260409020600101555b600083815260146020526040908190206001015490517f88ef5d91ad01b04046836022a7aade9038eb1188da66972705cc01ae3d49f0839161181c9186918691613758565b60405180910390a1505050565b611831611f70565b6001600160a01b0381166118575760405162461bcd60e51b81526004016106bb90613668565b61186081611f9f565b50565b60006001600160e01b03198216637965db0b60e01b14806105bd57506105bd8261213c565b61189181611ef9565b6118605760405162461bcd60e51b81526004016106bb906136f8565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906118e282611001565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061192783611d83565b90506015816040516119399190613454565b9081526040519081900360200190205460ff1661196b5782604051636de04b9f60e01b81526004016106bb91906135a8565b60158160405161197b9190613454565b908152602001604051809103902060010154915050919050565b6000806119a183611001565b9050806001600160a01b0316846001600160a01b031614806119c857506119c8818561167f565b8061164e5750836001600160a01b03166119e184610655565b6001600160a01b031614949350505050565b826001600160a01b0316611a0682611001565b6001600160a01b031614611a2c5760405162461bcd60e51b81526004016106bb90613678565b6001600160a01b038216611a525760405162461bcd60e51b81526004016106bb90613698565b611a5d838383612161565b611a686000826118ad565b6001600160a01b0383166000908152600360205260408120805460019290611a91908490613833565b90915550506001600160a01b0382166000908152600360205260408120805460019290611abf9084906137c7565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b038681169182179092559151849391871691600080516020613a2d83398151915291a4505050565b611860813361216c565b611b2282826111c9565b61088b576000828152600b602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611b5a3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611ba882826111c9565b1561088b576000828152600b602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600080611c11846121d0565b90506000611c1e846121d0565b805183519192501115611c36576000925050506105bd565b806020015182602001511415611c51576001925050506105bd565b805160209283015192909101518190209120149392505050565b6000600080516020613a0d833981519152611c8581611b0e565b6000611c90600c5490565b9050611ca0600c80546001019055565b610fa184826121fd565b611cb382611ef9565b611cd257816040516306caeb1360e41b81526004016106bb919061358c565b601381604051611ce29190613454565b9081526040519081900360200190205460ff1615611d15578060405163f62081bb60e01b81526004016106bb91906135a8565b60008281526012602090815260409091208251611d34928401906129b9565b506001601382604051611d479190613454565b908152604051908190036020019020805491151560ff199092169190911790555050565b6000610fa18284613814565b6000610fa182846137c7565b60606000829050600081516001600160401b03811115611da557611da56139b1565b6040519080825280601f01601f191660200182016040528015611dcf576020820181803683370190505b50905060005b8251811015611ef157604160f81b838281518110611df557611df561399b565b01602001516001600160f81b03191610801590611e365750605a60f81b838281518110611e2457611e2461399b565b01602001516001600160f81b03191611155b15611e9857828181518110611e4d57611e4d61399b565b602001015160f81c60f81b60f81c6020611e6791906137df565b60f81b828281518110611e7c57611e7c61399b565b60200101906001600160f81b031916908160001a905350611edf565b828181518110611eaa57611eaa61399b565b602001015160f81c60f81b828281518110611ec757611ec761399b565b60200101906001600160f81b031916908160001a9053505b80611ee981613914565b915050611dd5565b509392505050565b6000908152600260205260409020546001600160a01b0316151590565b611f1f3361071b565b611f3b5760405162461bcd60e51b81526004016106bb90613728565b61186081612217565b6060816010604051602001611f5a92919061343c565b6040516020818303038152906040529050919050565b33611f796111ba565b6001600160a01b03161461108c5760405162461bcd60e51b81526004016106bb906136e8565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031614156120235760405162461bcd60e51b81526004016106bb906136a8565b6001600160a01b0383811660008181526005602090815260408083209487168084529490915290819020805460ff1916851515179055517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190612087908590613563565b60405180910390a3505050565b61209f8484846119f3565b6120ab848484846122ac565b61154c5760405162461bcd60e51b81526004016106bb90613658565b6060600d80546105d2906138c0565b60606120e182611888565b60006120eb6120c7565b9050600081511161210b5760405180602001604052806000815250610fa1565b80612115846123b9565b604051602001612126929190613478565b6040516020818303038152906040529392505050565b60006001600160e01b0319821663780e9d6360e01b14806105bd57506105bd826124b6565b610706838383612506565b61217682826111c9565b61088b5761218e816001600160a01b031660146125be565b6121998360206125be565b6040516020016121aa9291906134b2565b60408051601f198184030181529082905262461bcd60e51b82526106bb916004016135a8565b60408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b61088b828260405180602001604052806000815250612729565b600061222282611001565b905061223081600084612161565b61223b6000836118ad565b6001600160a01b0381166000908152600360205260408120805460019290612264908490613833565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b03841690600080516020613a2d833981519152908390a45050565b60006001600160a01b0384163b156123ae57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906122f090339089908890889060040161350e565b602060405180830381600087803b15801561230a57600080fd5b505af192505050801561233a575060408051601f3d908101601f1916820190925261233791810190612da4565b60015b612394573d808015612368576040519150601f19603f3d011682016040523d82523d6000602084013e61236d565b606091505b50805161238c5760405162461bcd60e51b81526004016106bb90613658565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061164e565b506001949350505050565b6060816123dd5750506040805180820190915260018152600360fc1b602082015290565b8160005b811561240757806123f181613914565b91506124009050600a83613800565b91506123e1565b6000816001600160401b03811115612421576124216139b1565b6040519080825280601f01601f19166020018201604052801561244b576020820181803683370190505b5090505b841561164e57612460600183613833565b915061246d600a8661392f565b6124789060306137c7565b60f81b81838151811061248d5761248d61399b565b60200101906001600160f81b031916908160001a9053506124af600a86613800565b945061244f565b60006001600160e01b031982166380ac58cd60e01b14806124e757506001600160e01b03198216635b5e139f60e01b145b806105bd57506301ffc9a760e01b6001600160e01b03198316146105bd565b6001600160a01b0383166125615761255c81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b612584565b816001600160a01b0316836001600160a01b03161461258457612584838261275c565b6001600160a01b03821661259b57610706816127f9565b826001600160a01b0316826001600160a01b0316146107065761070682826128a8565b606060006125cd836002613814565b6125d89060026137c7565b6001600160401b038111156125ef576125ef6139b1565b6040519080825280601f01601f191660200182016040528015612619576020820181803683370190505b509050600360fc1b816000815181106126345761263461399b565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106126635761266361399b565b60200101906001600160f81b031916908160001a9053506000612687846002613814565b6126929060016137c7565b90505b600181111561270a576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106126c6576126c661399b565b1a60f81b8282815181106126dc576126dc61399b565b60200101906001600160f81b031916908160001a90535060049490941c93612703816138a9565b9050612695565b508315610fa15760405162461bcd60e51b81526004016106bb90613638565b61273383836128ec565b61274060008484846122ac565b6107065760405162461bcd60e51b81526004016106bb90613658565b6000600161276984611036565b6127739190613833565b6000838152600760205260409020549091508082146127c6576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b60085460009061280b90600190613833565b600083815260096020526040812054600880549394509092849081106128335761283361399b565b9060005260206000200154905080600883815481106128545761285461399b565b600091825260208083209091019290925582815260099091526040808220849055858252812055600880548061288c5761288c613985565b6001900381819060005260206000200160009055905550505050565b60006128b383611036565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6001600160a01b0382166129125760405162461bcd60e51b81526004016106bb906136d8565b61291b81611ef9565b156129385760405162461bcd60e51b81526004016106bb90613688565b61294460008383612161565b6001600160a01b038216600090815260036020526040812080546001929061296d9084906137c7565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386169081179091559051839290600080516020613a2d833981519152908290a45050565b8280546129c5906138c0565b90600052602060002090601f0160209004810192826129e75760008555612a2d565b82601f10612a0057805160ff1916838001178555612a2d565b82800160010185558215612a2d579182015b82811115612a2d578251825591602001919060010190612a12565b50612a39929150612a73565b5090565b508054612a49906138c0565b6000825580601f10612a59575050565b601f01602090049060005260206000209081019061186091905b5b80821115612a395760008155600101612a74565b6000612a9b612a968461379c565b613780565b905082815260208101848484011115612ab657612ab6600080fd5b611ef1848285613871565b80356105bd816139d1565b80516105bd816139d1565b80356105bd816139e5565b80356105bd816139ed565b80356105bd816139f3565b80516105bd816139f3565b600082601f830112612b1757612b17600080fd5b813561164e848260208601612a88565b80356105bd81613a03565b80516105bd816139ed565b600060208284031215612b5257612b52600080fd5b600061164e8484612ac1565b600060208284031215612b7357612b73600080fd5b600061164e8484612acc565b60008060408385031215612b9557612b95600080fd5b6000612ba18585612ac1565b9250506020612bb285828601612ac1565b9150509250929050565b600080600060608486031215612bd457612bd4600080fd5b6000612be08686612ac1565b9350506020612bf186828701612ac1565b9250506040612c0286828701612ae2565b9150509250925092565b60008060008060808587031215612c2557612c25600080fd5b6000612c318787612ac1565b9450506020612c4287828801612ac1565b9350506040612c5387828801612ae2565b92505060608501356001600160401b03811115612c7257612c72600080fd5b612c7e87828801612b03565b91505092959194509250565b60008060408385031215612ca057612ca0600080fd5b6000612cac8585612ac1565b9250506020612bb285828601612ad7565b60008060008060808587031215612cd657612cd6600080fd5b6000612ce28787612ac1565b94505060208501356001600160401b03811115612d0157612d01600080fd5b612c4287828801612b03565b60008060408385031215612d2357612d23600080fd5b6000612d2f8585612ac1565b9250506020612bb285828601612ae2565b600060208284031215612d5557612d55600080fd5b600061164e8484612ae2565b60008060408385031215612d7757612d77600080fd5b6000612ba18585612ae2565b600060208284031215612d9857612d98600080fd5b600061164e8484612aed565b600060208284031215612db957612db9600080fd5b600061164e8484612af8565b600060208284031215612dda57612dda600080fd5b600061164e8484612b27565b600060208284031215612dfb57612dfb600080fd5b81356001600160401b03811115612e1457612e14600080fd5b61164e84828501612b03565b600060208284031215612e3557612e35600080fd5b600061164e8484612b32565b60008060408385031215612e5757612e57600080fd5b6000612d2f8585612ae2565b6000610fa18383612ef2565b612e788161384a565b82525050565b6000612e88825190565b80845260208401935083602082028501612ea28560200190565b8060005b85811015612ed75784840389528151612ebf8582612e63565b94506020830160209a909a0199925050600101612ea6565b5091979650505050505050565b801515612e78565b80612e78565b6000612efc825190565b808452602084019350612f1381856020860161387d565b612f1c816139c7565b9093019392505050565b6000612f30825190565b612f3e81856020860161387d565b9290920192915050565b60008154612f55816138c0565b600182168015612f6c5760018114612f7d57612fad565b60ff19831686528186019350612fad565b60008581526020902060005b83811015612fa557815488820152600190910190602001612f89565b838801955050505b50505092915050565b612e7881613866565b60208082527f537472696e67733a20686578206c656e67746820696e73756666696369656e74910190815260005b5060200190565b602b81526000602082017f455243373231456e756d657261626c653a206f776e657220696e646578206f7581526a74206f6620626f756e647360a81b602082015291505b5060400190565b603281526000602082017f4552433732313a207472616e7366657220746f206e6f6e20455243373231526581527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60208201529150613038565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b60208201529150613038565b602581526000602082017f4552433732313a207472616e736665722066726f6d20696e636f72726563742081526437bbb732b960d91b60208201529150613038565b601c81526000602082017b115490cdcc8c4e881d1bdad95b88185b1c9958591e481b5a5b9d195960221b81529150612fed565b602481526000602082017f4552433732313a207472616e7366657220746f20746865207a65726f206164648152637265737360e01b60208201529150613038565b601981526000602082017822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b81529150612fed565b602981526000602082017f4552433732313a2061646472657373207a65726f206973206e6f7420612076618152683634b21037bbb732b960b91b60208201529150613038565b603e81526000602082017f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f81527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c000060208201529150613038565b60208082527f4552433732313a206d696e7420746f20746865207a65726f206164647265737391019081526000612fed565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657291019081526000612fed565b6018815260006020820177115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b81529150612fed565b602181526000602082017f4552433732313a20617070726f76616c20746f2063757272656e74206f776e658152603960f91b60208201529150613038565b602c81526000602082017f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f81526b7574206f6620626f756e647360a01b60208201529150613038565b602e81526000602082017f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6581526d1c881b9bdc88185c1c1c9bdd995960921b60208201529150613038565b601f81526000602082017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081529150612fed565b602f81526000602082017f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636581526e103937b632b9903337b91039b2b63360891b60208201529150613038565b60006134488285612f26565b915061164e8284612f48565b6000610fa18284612f26565b600061346c8285612f26565b915061164e8284612f26565b60006134848285612f26565b91506134908284612f26565b64173539b7b760d91b815291506005820161164e565b6000610fa18284612f48565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260170160006134de8285612f26565b7001034b99036b4b9b9b4b733903937b6329607d1b815291506011820161346c565b602081016105bd8284612e6f565b6080810161351c8287612e6f565b6135296020830186612e6f565b6135366040830185612eec565b81810360608301526135488184612ef2565b9695505050505050565b60208082528101610fa18184612e7e565b602081016105bd8284612ee4565b6040810161357f8285612ee4565b610fa16020830184612eec565b602081016105bd8284612eec565b602081016105bd8284612fb6565b60208082528101610fa18184612ef2565b60c080825281016135ca8189612ef2565b90506135d96020830188612ee4565b6135e66040830187612eec565b6135f36060830186612eec565b6136006080830185612eec565b61360d60a0830184612ee4565b979650505050505050565b604080825281016136298185612ef2565b9050610fa16020830184612eec565b602080825281016105bd81612fbf565b602080825281016105bd81612ff4565b602080825281016105bd8161303f565b602080825281016105bd8161308e565b602080825281016105bd816130d1565b602080825281016105bd81613113565b602080825281016105bd81613146565b602080825281016105bd81613187565b602080825281016105bd816131b7565b602080825281016105bd816131fd565b602080825281016105bd81613257565b602080825281016105bd81613289565b602080825281016105bd816132bb565b602080825281016105bd816132ea565b602080825281016105bd81613328565b602080825281016105bd81613371565b602080825281016105bd816133bc565b602080825281016105bd816133f0565b606081016137668286612eec565b6137736020830185612eec565b61164e6040830184612eec565b600061378b60405190565b905061379782826138e7565b919050565b60006001600160401b038211156137b5576137b56139b1565b6137be826139c7565b60200192915050565b600082198211156137da576137da613943565b500190565b600060ff8216915060ff831692508260ff038211156137da576137da613943565b60008261380f5761380f613959565b500490565b600081600019048311821515161561382e5761382e613943565b500290565b60008282101561384557613845613943565b500390565b60006001600160a01b0382166105bd565b60006105bd8261384a565b60006105bd8261385b565b82818337506000910152565b60005b83811015613898578181015183820152602001613880565b8381111561154c5750506000910152565b6000816138b8576138b8613943565b506000190190565b6002810460018216806138d457607f821691505b602082108114156113165761131661396f565b6138f0826139c7565b81018181106001600160401b038211171561390d5761390d6139b1565b6040525050565b600060001982141561392857613928613943565b5060010190565b60008261393e5761393e613959565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b601f01601f191690565b6139da8161384a565b811461186057600080fd5b8015156139da565b806139da565b6001600160e01b031981166139da565b6139da8161385b56fe9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa26469706673582212202482d00bcb18db3e92c8d554932829a74c4a54a00baa6c28b6d903e1f31de69064736f6c63430008070033",
  "devdoc": {
    "author": "Masa Finance",
    "details": "SoulName NFT, that inherits from the NFT contract, and points to a Soulbound identity token. It has an extension, and stores all the information about the identity names.",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "burn(uint256)": {
        "details": "The caller must be the owner or an approved address of the soul name.",
        "params": {
          "tokenId": "TokenId of the soul name to burn"
        }
      },
      "constructor": {
        "details": "Creates a new SoulName NFT, that points to a Soulbound identity, inheriting from the NFT contract.",
        "params": {
          "_contractURI": "URI of the smart contract metadata",
          "_extension": "Extension of the soul name",
          "_soulboundIdentity": "Address of the Soulbound identity contract",
          "admin": "Administrator of the smart contract"
        }
      },
      "exists(uint256)": {
        "details": "Returns true if the token has been minted",
        "params": {
          "tokenId": "Token to check"
        },
        "returns": {
          "_0": "True if the token exists"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getExtension()": {
        "details": "This function is used to get the extension of the soul name",
        "returns": {
          "_0": "Extension of the soul name"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getSoulNames(address)": {
        "details": "This function queries all the identity names of the specified account",
        "params": {
          "owner": "Address of the owner of the identities"
        },
        "returns": {
          "sbtNames": "Array of soul names associated to the account"
        }
      },
      "getSoulNames(uint256)": {
        "details": "This function queries all the identity names of the specified identity Id",
        "params": {
          "identityId": "TokenId of the identity"
        },
        "returns": {
          "sbtNames": "Array of soul names associated to the identity Id"
        }
      },
      "getTokenData(string)": {
        "details": "This function queries the information of a soul name",
        "params": {
          "name": "Name of the soul name"
        },
        "returns": {
          "active": "`true` if the soul name is active, `false` otherwise",
          "expirationDate": "Expiration date of the soul name",
          "identityId": "Identity id of the soul name",
          "linked": "`true` if the soul name is linked, `false` otherwise",
          "sbtName": "Soul name, in upper/lower case and extension",
          "tokenId": "SoulName id of the soul name"
        }
      },
      "getTokenId(string)": {
        "details": "This function queries the token id of a soul name",
        "params": {
          "name": "Name of the soul name"
        },
        "returns": {
          "_0": "SoulName id of the soul name"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "isAvailable(string)": {
        "details": "This function queries if a soul name already exists and is in the available state",
        "params": {
          "name": "Name of the soul name"
        },
        "returns": {
          "available": "`true` if the soul name is available, `false` otherwise"
        }
      },
      "mint(address,string,uint256,string)": {
        "details": "The caller can mint more than one name. The soul name must be unique.",
        "params": {
          "_tokenURI": "URI of the NFT",
          "name": "Name of the new soul name",
          "to": "Address of the owner of the new soul name",
          "yearsPeriod": "Years of validity of the name"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renewYearsPeriod(uint256,uint256)": {
        "details": "The caller must be the owner or an approved address of the soul name.",
        "params": {
          "tokenId": "TokenId of the soul name",
          "yearsPeriod": "Years of validity of the name"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setContractURI(string)": {
        "details": "The caller must have the admin role to call this function",
        "params": {
          "_contractURI": "URI of the smart contract metadata"
        }
      },
      "setExtension(string)": {
        "details": "The caller must have the admin role to call this function",
        "params": {
          "_extension": "Extension of the soul name"
        }
      },
      "setSoulboundIdentity(address)": {
        "details": "The caller must have the admin role to call this function",
        "params": {
          "_soulboundIdentity": "Address of the SoulboundIdentity contract"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Interface identification is specified in ERC-165.",
        "params": {
          "interfaceId": "The interface identifier, as specified in ERC-165"
        },
        "returns": {
          "_0": "`true` if the contract implements `interfaceId` and  `interfaceId` is not 0xffffffff, `false` otherwise"
        }
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(string)": {
        "details": "This function returns the token URI of the soul name specified by the name",
        "params": {
          "name": "Name of the soul name"
        },
        "returns": {
          "_0": "URI of the soulname associated to a name"
        }
      },
      "tokenURI(uint256)": {
        "details": "Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC  3986. The URI may point to a JSON file that conforms to the \"ERC721  Metadata JSON Schema\".",
        "params": {
          "tokenId": "NFT to get the URI of"
        },
        "returns": {
          "_0": "URI of the NFT"
        }
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "SoulName NFT",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "burn(uint256)": {
        "notice": "Burn a soul name"
      },
      "constructor": {
        "notice": "Creates a new SoulName NFT"
      },
      "exists(uint256)": {
        "notice": "Returns true if the token exists"
      },
      "getExtension()": {
        "notice": "Returns the extension of the soul name"
      },
      "getSoulNames(address)": {
        "notice": "Returns all the active soul names of an account"
      },
      "getSoulNames(uint256)": {
        "notice": "Returns all the active soul names of an account"
      },
      "getTokenData(string)": {
        "notice": "Returns the information of a soul name"
      },
      "getTokenId(string)": {
        "notice": "Returns the token id of a soul name"
      },
      "isAvailable(string)": {
        "notice": "Checks if a soul name is available"
      },
      "mint(address,string,uint256,string)": {
        "notice": "Mints a new soul name"
      },
      "renewYearsPeriod(uint256,uint256)": {
        "notice": "Update the expiration date of a soul name"
      },
      "setContractURI(string)": {
        "notice": "Sets the URI of the smart contract metadata"
      },
      "setExtension(string)": {
        "notice": "Sets the extension of the soul name"
      },
      "setSoulboundIdentity(address)": {
        "notice": "Sets the SoulboundIdentity contract address linked to this soul name"
      },
      "supportsInterface(bytes4)": {
        "notice": "Query if a contract implements an interface"
      },
      "tokenURI(string)": {
        "notice": "A distinct Uniform Resource Identifier (URI) for a given asset."
      },
      "tokenURI(uint256)": {
        "notice": "A distinct Uniform Resource Identifier (URI) for a given asset."
      }
    },
    "notice": "SoulName NFT that points to a Soulbound identity token",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1074,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1076,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1080,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1084,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1088,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1094,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2094,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2098,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2101,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2105,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 400,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 24,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "_roles",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 8631,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "12",
        "type": "t_struct(Counter)2798_storage"
      },
      {
        "astId": 8633,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "_baseTokenURI",
        "offset": 0,
        "slot": "13",
        "type": "t_string_storage"
      },
      {
        "astId": 624,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "_status",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 5122,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "soulboundIdentity",
        "offset": 0,
        "slot": "15",
        "type": "t_contract(ISoulboundIdentity)8231"
      },
      {
        "astId": 5124,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "extension",
        "offset": 0,
        "slot": "16",
        "type": "t_string_storage"
      },
      {
        "astId": 5126,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "contractURI",
        "offset": 0,
        "slot": "17",
        "type": "t_string_storage"
      },
      {
        "astId": 5130,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 5134,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "_URIs",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      {
        "astId": 5139,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "tokenData",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_uint256,t_struct(TokenData)5149_storage)"
      },
      {
        "astId": 5144,
        "contract": "contracts/SoulName.sol:SoulName",
        "label": "nameData",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_string_memory_ptr,t_struct(NameData)5154_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ISoulboundIdentity)8231": {
        "encoding": "inplace",
        "label": "contract ISoulboundIdentity",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_string_memory_ptr,t_struct(NameData)5154_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct SoulName.NameData)",
        "numberOfBytes": "32",
        "value": "t_struct(NameData)5154_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(TokenData)5149_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SoulName.TokenData)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenData)5149_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)2798_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2797,
            "contract": "contracts/SoulName.sol:SoulName",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(NameData)5154_storage": {
        "encoding": "inplace",
        "label": "struct SoulName.NameData",
        "members": [
          {
            "astId": 5151,
            "contract": "contracts/SoulName.sol:SoulName",
            "label": "exists",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 5153,
            "contract": "contracts/SoulName.sol:SoulName",
            "label": "tokenId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/SoulName.sol:SoulName",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/SoulName.sol:SoulName",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TokenData)5149_storage": {
        "encoding": "inplace",
        "label": "struct SoulName.TokenData",
        "members": [
          {
            "astId": 5146,
            "contract": "contracts/SoulName.sol:SoulName",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 5148,
            "contract": "contracts/SoulName.sol:SoulName",
            "label": "expirationDate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}