{
  "address": "0x1B830e25CcBf8C0D512653800a294876fA658c67",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "contract ISoulboundIdentity",
          "name": "_soulBoundIdentity",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nameRegistrationPricePerYear",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "swapRouter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "wrappedNativeToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "stableCoin",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "masaToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "reserveWallet",
              "type": "address"
            }
          ],
          "internalType": "struct PaymentGateway.PaymentParams",
          "name": "paymentParams",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyAdded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "AuthorityNotExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "InsufficientEthAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "paymentMethod",
          "type": "address"
        }
      ],
      "name": "InvalidPaymentMethod",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSignature",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "InvalidToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc20token",
          "type": "address"
        }
      ],
      "name": "NonExistingErc20Token",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "NotAuthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RefundFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SameValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "yearsPeriod",
          "type": "uint256"
        }
      ],
      "name": "SoulNamePurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "yearsPeriod",
          "type": "uint256"
        }
      ],
      "name": "SoulboundIdentityAndNamePurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "SoulboundIdentityPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_authority",
          "type": "address"
        }
      ],
      "name": "addAuthority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "authorities",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_paymentMethod",
          "type": "address"
        }
      ],
      "name": "disablePaymentMethod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_paymentMethod",
          "type": "address"
        }
      ],
      "name": "enablePaymentMethod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "enabledPaymentMethod",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "enabledPaymentMethods",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEnabledPaymentMethods",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nameLength",
          "type": "uint256"
        }
      ],
      "name": "getNameRegistrationPricePerYear",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "paymentMethod",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nameLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yearsPeriod",
          "type": "uint256"
        }
      ],
      "name": "getPriceForMintingName",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masaToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nameRegistrationPricePerYear",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "purchaseIdentity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "paymentMethod",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "nameLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yearsPeriod",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "authorityAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "purchaseIdentityAndName",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "paymentMethod",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "nameLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yearsPeriod",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "authorityAddress",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "purchaseName",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_authority",
          "type": "address"
        }
      ],
      "name": "removeAuthority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserveWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_masaToken",
          "type": "address"
        }
      ],
      "name": "setMasaToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nameLength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nameRegistrationPricePerYear",
          "type": "uint256"
        }
      ],
      "name": "setNameRegistrationPricePerYear",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reserveWallet",
          "type": "address"
        }
      ],
      "name": "setReserveWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISoulboundIdentity",
          "name": "_soulboundIdentity",
          "type": "address"
        }
      ],
      "name": "setSoulboundIdentity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stableCoin",
          "type": "address"
        }
      ],
      "name": "setStableCoin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        }
      ],
      "name": "setSwapRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wrappedNativeToken",
          "type": "address"
        }
      ],
      "name": "setWrappedNativeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "soulboundIdentity",
      "outputs": [
        {
          "internalType": "contract ISoulboundIdentity",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stableCoin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedNativeToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd942ffd7b71f926cde3837631a43f6f9ac616c25d751c9eb03895f6d49d7c934",
  "receipt": {
    "to": null,
    "from": "0x46c9cdA3F83C5c13C767A07b6E80aEd302E40B28",
    "contractAddress": "0x1B830e25CcBf8C0D512653800a294876fA658c67",
    "transactionIndex": 0,
    "gasUsed": "2942711",
    "logsBloom": "0x
    "blockHash": "0x73b53da8f7a05c24e88b7d5940af690c71eda5f432fbb6de46a836fa35e8786d",
    "transactionHash": "0xd942ffd7b71f926cde3837631a43f6f9ac616c25d751c9eb03895f6d49d7c934",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 16498377,
        "transactionHash": "0xd942ffd7b71f926cde3837631a43f6f9ac616c25d751c9eb03895f6d49d7c934",
        "address": "0x1B830e25CcBf8C0D512653800a294876fA658c67",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000046c9cda3f83c5c13c767a07b6e80aed302e40b28",
          "0x00000000000000000000000046c9cda3f83c5c13c767a07b6e80aed302e40b28"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x73b53da8f7a05c24e88b7d5940af690c71eda5f432fbb6de46a836fa35e8786d"
      }
    ],
    "blockNumber": 16498377,
    "cumulativeGasUsed": "2942711",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x46c9cdA3F83C5c13C767A07b6E80aEd302E40B28",
    "0xcb85D14082B67e470fD9C2979F3A75341124a338",
    "0",
    [
      "0xE3D8bd6Aed4F159bc8000a9cD47CffDb95F96121",
      "0xf194afdf50b03e69bd7d057c1aa9e10c9954e4c9",
      "0x874069Fa1Eb16D44d622F2e0Ca25eeA172369bC1",
      "0x7d91E51C8F218f7140188A155f5C75388630B6a8",
      "0x46c9cdA3F83C5c13C767A07b6E80aEd302E40B28"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "566e14144035b820d41594e721700474",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"contract ISoulboundIdentity\",\"name\":\"_soulBoundIdentity\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nameRegistrationPricePerYear\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wrappedNativeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableCoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"masaToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reserveWallet\",\"type\":\"address\"}],\"internalType\":\"struct PaymentGateway.PaymentParams\",\"name\":\"paymentParams\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyAdded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityNotExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InsufficientEthAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentMethod\",\"type\":\"address\"}],\"name\":\"InvalidPaymentMethod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20token\",\"type\":\"address\"}],\"name\":\"NonExistingErc20Token\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"NotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RefundFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SameValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yearsPeriod\",\"type\":\"uint256\"}],\"name\":\"SoulNamePurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yearsPeriod\",\"type\":\"uint256\"}],\"name\":\"SoulboundIdentityAndNamePurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"SoulboundIdentityPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authority\",\"type\":\"address\"}],\"name\":\"addAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorities\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentMethod\",\"type\":\"address\"}],\"name\":\"disablePaymentMethod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentMethod\",\"type\":\"address\"}],\"name\":\"enablePaymentMethod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enabledPaymentMethod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"enabledPaymentMethods\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEnabledPaymentMethods\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nameLength\",\"type\":\"uint256\"}],\"name\":\"getNameRegistrationPricePerYear\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentMethod\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nameLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yearsPeriod\",\"type\":\"uint256\"}],\"name\":\"getPriceForMintingName\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masaToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nameRegistrationPricePerYear\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchaseIdentity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentMethod\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nameLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yearsPeriod\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"authorityAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"purchaseIdentityAndName\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentMethod\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"nameLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yearsPeriod\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"authorityAddress\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"purchaseName\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authority\",\"type\":\"address\"}],\"name\":\"removeAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masaToken\",\"type\":\"address\"}],\"name\":\"setMasaToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nameLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nameRegistrationPricePerYear\",\"type\":\"uint256\"}],\"name\":\"setNameRegistrationPricePerYear\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserveWallet\",\"type\":\"address\"}],\"name\":\"setReserveWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISoulboundIdentity\",\"name\":\"_soulboundIdentity\",\"type\":\"address\"}],\"name\":\"setSoulboundIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stableCoin\",\"type\":\"address\"}],\"name\":\"setStableCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"}],\"name\":\"setSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wrappedNativeToken\",\"type\":\"address\"}],\"name\":\"setWrappedNativeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soulboundIdentity\",\"outputs\":[{\"internalType\":\"contract ISoulboundIdentity\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableCoin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedNativeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Masa Finance\",\"details\":\"From this smart contract we can mint new Soulbound Identities and Soul Name NFTs. This minting can be done paying a fee in ETH, USDC or MASA\",\"kind\":\"dev\",\"methods\":{\"addAuthority(address)\":{\"details\":\"The caller must have the admin role to call this function\",\"params\":{\"_authority\":\"New authority to add\"}},\"constructor\":{\"details\":\"Creates a new Soul Store, that has the role to minting new Soulbound Identities and Soul Name NFTs, paying a fee\",\"params\":{\"_nameRegistrationPricePerYear\":\"Price of the default name registering in stable coin per year\",\"_soulBoundIdentity\":\"Address of the Soulbound identity contract\",\"admin\":\"Administrator of the smart contract\",\"paymentParams\":\"Payment gateway params\"}},\"disablePaymentMethod(address)\":{\"details\":\"The caller must have the admin role to call this function\",\"params\":{\"_paymentMethod\":\"Token to remove\"}},\"enablePaymentMethod(address)\":{\"details\":\"The caller must have the admin role to call this function\",\"params\":{\"_paymentMethod\":\"New token to add\"}},\"getEnabledPaymentMethods()\":{\"details\":\"Returns the address of all available payment methods\",\"returns\":{\"_0\":\"Array of all enabled payment methods\"}},\"getNameRegistrationPricePerYear(uint256)\":{\"details\":\"Returns the price for registering per year in USD for an specific name length\",\"params\":{\"nameLength\":\"Length of the name\"},\"returns\":{\"_0\":\"Price in stable coin for that name length\"}},\"getPriceForMintingName(address,uint256,uint256)\":{\"details\":\"Returns current pricing for name minting for a given name length and years period\",\"params\":{\"nameLength\":\"Length of the name\",\"paymentMethod\":\"Address of token that user want to pay\",\"yearsPeriod\":\"Years of validity of the name\"},\"returns\":{\"_0\":\"Current price of the name minting in the given payment method\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"pause()\":{\"details\":\"The caller must have the admin role to call this function\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"purchaseIdentity()\":{\"details\":\"This function allows the purchase of a soulbound identity for free\",\"returns\":{\"_0\":\"TokenId of the new soulbound identity\"}},\"purchaseIdentityAndName(address,string,uint256,uint256,string,address,bytes)\":{\"details\":\"This function allows the purchase of a soulbound identity and name using stable coin (USDC), native token (ETH) or utility token (MASA)\",\"params\":{\"authorityAddress\":\"Address of the authority\",\"name\":\"Name of the new soul name\",\"nameLength\":\"Length of the name\",\"paymentMethod\":\"Address of token that user want to pay\",\"signature\":\"Signature of the authority\",\"tokenURI\":\"URI of the NFT\",\"yearsPeriod\":\"Years of validity of the name\"},\"returns\":{\"_0\":\"TokenId of the new soulbound identity\"}},\"purchaseName(address,address,string,uint256,uint256,string,address,bytes)\":{\"details\":\"This function allows the purchase of a soul name using stable coin (USDC), native token (ETH) or utility token (MASA)\",\"params\":{\"authorityAddress\":\"Address of the authority\",\"name\":\"Name of the new soul name\",\"nameLength\":\"Length of the name\",\"paymentMethod\":\"Address of token that user want to pay\",\"signature\":\"Signature of the authority\",\"to\":\"Address of the owner of the new soul name\",\"tokenURI\":\"URI of the NFT\",\"yearsPeriod\":\"Years of validity of the name\"},\"returns\":{\"_0\":\"TokenId of the new sou name\"}},\"removeAuthority(address)\":{\"details\":\"The caller must have the admin role to call this function\",\"params\":{\"_authority\":\"Authority to remove\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setMasaToken(address)\":{\"details\":\"The caller must have the admin role to call this function It can be set to address(0) to disable paying in MASA\",\"params\":{\"_masaToken\":\"New utility token to pay the fee in\"}},\"setNameRegistrationPricePerYear(uint256,uint256)\":{\"details\":\"The caller must have the admin role to call this function\",\"params\":{\"_nameLength\":\"Length of the name\",\"_nameRegistrationPricePerYear\":\"New price of the name registering per one year in stable coin for that name length per year\"}},\"setReserveWallet(address)\":{\"details\":\"The caller must have the admin role to call this function\",\"params\":{\"_reserveWallet\":\"New reserve wallet\"}},\"setSoulboundIdentity(address)\":{\"details\":\"The caller must have the admin role to call this function\",\"params\":{\"_soulboundIdentity\":\"New SoulboundIdentity contract address\"}},\"setStableCoin(address)\":{\"details\":\"The caller must have the admin role to call this function\",\"params\":{\"_stableCoin\":\"New stable coin to pay the fee in\"}},\"setSwapRouter(address)\":{\"details\":\"The caller must have the admin role to call this function\",\"params\":{\"_swapRouter\":\"New swap router address\"}},\"setWrappedNativeToken(address)\":{\"details\":\"The caller must have the admin role to call this function\",\"params\":{\"_wrappedNativeToken\":\"New wrapped native token address\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"unpause()\":{\"details\":\"The caller must have the admin role to call this function\"}},\"title\":\"Soul Store\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addAuthority(address)\":{\"notice\":\"Adds a new authority to the list of authorities\"},\"constructor\":{\"notice\":\"Creates a new Soul Store\"},\"disablePaymentMethod(address)\":{\"notice\":\"Removes a token as a valid payment method\"},\"enablePaymentMethod(address)\":{\"notice\":\"Adds a new token as a valid payment method\"},\"getEnabledPaymentMethods()\":{\"notice\":\"Returns all available payment methods\"},\"getNameRegistrationPricePerYear(uint256)\":{\"notice\":\"Returns the price of register a name per year in stable coin for an specific length\"},\"getPriceForMintingName(address,uint256,uint256)\":{\"notice\":\"Returns the price of the name minting\"},\"pause()\":{\"notice\":\"Pauses the smart contract\"},\"purchaseIdentity()\":{\"notice\":\"Mints a new Soulbound Identity purchasing it\"},\"purchaseIdentityAndName(address,string,uint256,uint256,string,address,bytes)\":{\"notice\":\"Mints a new Soulbound Identity and Name purchasing it\"},\"purchaseName(address,address,string,uint256,uint256,string,address,bytes)\":{\"notice\":\"Mints a new Soul Name purchasing it\"},\"removeAuthority(address)\":{\"notice\":\"Removes an authority from the list of authorities\"},\"setMasaToken(address)\":{\"notice\":\"Sets the utility token to pay the fee in (MASA)\"},\"setNameRegistrationPricePerYear(uint256,uint256)\":{\"notice\":\"Sets the price of the name registering per one year in stable coin\"},\"setReserveWallet(address)\":{\"notice\":\"Set the reserve wallet\"},\"setSoulboundIdentity(address)\":{\"notice\":\"Sets the SoulboundIdentity contract address linked to this store\"},\"setStableCoin(address)\":{\"notice\":\"Sets the stable coin to pay the fee in (USDC)\"},\"setSwapRouter(address)\":{\"notice\":\"Sets the swap router address\"},\"setWrappedNativeToken(address)\":{\"notice\":\"Sets the wrapped native token address\"},\"unpause()\":{\"notice\":\"Unpauses the smart contract\"}},\"notice\":\"Soul Store, that can mint new Soulbound Identities and Soul Name NFTs, paying a fee\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SoulStore.sol\":\"SoulStore\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712 {\\n    /* solhint-disable var-name-mixedcase */\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\\n    uint256 private immutable _CACHED_CHAIN_ID;\\n    address private immutable _CACHED_THIS;\\n\\n    bytes32 private immutable _HASHED_NAME;\\n    bytes32 private immutable _HASHED_VERSION;\\n    bytes32 private immutable _TYPE_HASH;\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n        _CACHED_CHAIN_ID = block.chainid;\\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        _CACHED_THIS = address(this);\\n        _TYPE_HASH = typeHash;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\\n            return _CACHED_DOMAIN_SEPARATOR;\\n        } else {\\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\\n        }\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n}\\n\",\"keccak256\":\"0x948d8b2d18f38141ec78c5229d770d950ebc781ed3f44cc9e3ccbb9fded5846a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// EIP-712 is Final as of 2022-08-11. This file is deprecated.\\n\\nimport \\\"./EIP712.sol\\\";\\n\",\"keccak256\":\"0xea30c402170bc240354b74e6c6f6a8e5bdb1935d90d168cc58c0654461c6a72b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/SoulStore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\nimport \\\"./libraries/Errors.sol\\\";\\nimport \\\"./dex/PaymentGateway.sol\\\";\\nimport \\\"./interfaces/ISoulboundIdentity.sol\\\";\\nimport \\\"./interfaces/ISoulName.sol\\\";\\n\\n/// @title Soul Store\\n/// @author Masa Finance\\n/// @notice Soul Store, that can mint new Soulbound Identities and Soul Name NFTs, paying a fee\\n/// @dev From this smart contract we can mint new Soulbound Identities and Soul Name NFTs.\\n/// This minting can be done paying a fee in ETH, USDC or MASA\\ncontract SoulStore is PaymentGateway, Pausable, ReentrancyGuard, EIP712 {\\n    using SafeMath for uint256;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    ISoulboundIdentity public soulboundIdentity;\\n\\n    mapping(uint256 => uint256) public nameRegistrationPricePerYear; // (length --> price in stable coin per year)\\n\\n    mapping(address => bool) public authorities;\\n\\n    /* ========== INITIALIZE ========== */\\n\\n    /// @notice Creates a new Soul Store\\n    /// @dev Creates a new Soul Store, that has the role to minting new Soulbound Identities\\n    /// and Soul Name NFTs, paying a fee\\n    /// @param admin Administrator of the smart contract\\n    /// @param _soulBoundIdentity Address of the Soulbound identity contract\\n    /// @param _nameRegistrationPricePerYear Price of the default name registering in stable coin per year\\n    /// @param paymentParams Payment gateway params\\n    constructor(\\n        address admin,\\n        ISoulboundIdentity _soulBoundIdentity,\\n        uint256 _nameRegistrationPricePerYear,\\n        PaymentParams memory paymentParams\\n    ) PaymentGateway(admin, paymentParams) EIP712(\\\"SoulStore\\\", \\\"1.0.0\\\") {\\n        if (address(_soulBoundIdentity) == address(0)) revert ZeroAddress();\\n\\n        soulboundIdentity = _soulBoundIdentity;\\n\\n        nameRegistrationPricePerYear[0] = _nameRegistrationPricePerYear; // name price for default length per year\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    /// @notice Sets the SoulboundIdentity contract address linked to this store\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _soulboundIdentity New SoulboundIdentity contract address\\n    function setSoulboundIdentity(\\n        ISoulboundIdentity _soulboundIdentity\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (address(_soulboundIdentity) == address(0)) revert ZeroAddress();\\n        if (soulboundIdentity == _soulboundIdentity) revert SameValue();\\n        soulboundIdentity = _soulboundIdentity;\\n    }\\n\\n    /// @notice Sets the price of the name registering per one year in stable coin\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _nameLength Length of the name\\n    /// @param _nameRegistrationPricePerYear New price of the name registering per one\\n    /// year in stable coin for that name length per year\\n    function setNameRegistrationPricePerYear(\\n        uint256 _nameLength,\\n        uint256 _nameRegistrationPricePerYear\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (\\n            nameRegistrationPricePerYear[_nameLength] ==\\n            _nameRegistrationPricePerYear\\n        ) revert SameValue();\\n        nameRegistrationPricePerYear[\\n            _nameLength\\n        ] = _nameRegistrationPricePerYear;\\n    }\\n\\n    /// @notice Adds a new authority to the list of authorities\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _authority New authority to add\\n    function addAuthority(\\n        address _authority\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (_authority == address(0)) revert ZeroAddress();\\n        if (authorities[_authority]) revert AlreadyAdded();\\n\\n        authorities[_authority] = true;\\n    }\\n\\n    /// @notice Removes an authority from the list of authorities\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _authority Authority to remove\\n    function removeAuthority(\\n        address _authority\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (_authority == address(0)) revert ZeroAddress();\\n        if (!authorities[_authority]) revert AuthorityNotExists(_authority);\\n\\n        authorities[_authority] = false;\\n    }\\n\\n    /// @notice Pauses the smart contract\\n    /// @dev The caller must have the admin role to call this function\\n    function pause() public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _pause();\\n    }\\n\\n    /// @notice Unpauses the smart contract\\n    /// @dev The caller must have the admin role to call this function\\n    function unpause() public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _unpause();\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /// @notice Mints a new Soulbound Identity and Name purchasing it\\n    /// @dev This function allows the purchase of a soulbound identity and name using\\n    /// stable coin (USDC), native token (ETH) or utility token (MASA)\\n    /// @param paymentMethod Address of token that user want to pay\\n    /// @param name Name of the new soul name\\n    /// @param nameLength Length of the name\\n    /// @param yearsPeriod Years of validity of the name\\n    /// @param tokenURI URI of the NFT\\n    /// @param authorityAddress Address of the authority\\n    /// @param signature Signature of the authority\\n    /// @return TokenId of the new soulbound identity\\n    function purchaseIdentityAndName(\\n        address paymentMethod,\\n        string memory name,\\n        uint256 nameLength,\\n        uint256 yearsPeriod,\\n        string memory tokenURI,\\n        address authorityAddress,\\n        bytes calldata signature\\n    ) external payable whenNotPaused nonReentrant returns (uint256) {\\n        _pay(\\n            paymentMethod,\\n            getPriceForMintingName(paymentMethod, nameLength, yearsPeriod)\\n        );\\n\\n        // finalize purchase\\n        return\\n            _mintSoulboundIdentityAndName(\\n                _msgSender(),\\n                name,\\n                nameLength,\\n                yearsPeriod,\\n                tokenURI,\\n                authorityAddress,\\n                signature\\n            );\\n    }\\n\\n    /// @notice Mints a new Soulbound Identity purchasing it\\n    /// @dev This function allows the purchase of a soulbound identity for free\\n    /// @return TokenId of the new soulbound identity\\n    function purchaseIdentity()\\n        external\\n        whenNotPaused\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        // finalize purchase\\n        return _mintSoulboundIdentity(_msgSender());\\n    }\\n\\n    /// @notice Mints a new Soul Name purchasing it\\n    /// @dev This function allows the purchase of a soul name using\\n    /// stable coin (USDC), native token (ETH) or utility token (MASA)\\n    /// @param paymentMethod Address of token that user want to pay\\n    /// @param to Address of the owner of the new soul name\\n    /// @param name Name of the new soul name\\n    /// @param nameLength Length of the name\\n    /// @param yearsPeriod Years of validity of the name\\n    /// @param tokenURI URI of the NFT\\n    /// @param authorityAddress Address of the authority\\n    /// @param signature Signature of the authority\\n    /// @return TokenId of the new sou name\\n    function purchaseName(\\n        address paymentMethod,\\n        address to,\\n        string memory name,\\n        uint256 nameLength,\\n        uint256 yearsPeriod,\\n        string memory tokenURI,\\n        address authorityAddress,\\n        bytes calldata signature\\n    ) external payable whenNotPaused nonReentrant returns (uint256) {\\n        _pay(\\n            paymentMethod,\\n            getPriceForMintingName(paymentMethod, nameLength, yearsPeriod)\\n        );\\n\\n        // finalize purchase\\n        return\\n            _mintSoulName(\\n                to,\\n                name,\\n                nameLength,\\n                yearsPeriod,\\n                tokenURI,\\n                authorityAddress,\\n                signature\\n            );\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    /// @notice Returns the price of register a name per year in stable coin for an specific length\\n    /// @dev Returns the price for registering per year in USD for an specific name length\\n    /// @param nameLength Length of the name\\n    /// @return Price in stable coin for that name length\\n    function getNameRegistrationPricePerYear(\\n        uint256 nameLength\\n    ) public view returns (uint256) {\\n        uint256 price = nameRegistrationPricePerYear[nameLength];\\n        if (price == 0) {\\n            // if not found, return the default price\\n            price = nameRegistrationPricePerYear[0];\\n        }\\n        return price;\\n    }\\n\\n    /// @notice Returns the price of the name minting\\n    /// @dev Returns current pricing for name minting for a given name length and years period\\n    /// @param paymentMethod Address of token that user want to pay\\n    /// @param nameLength Length of the name\\n    /// @param yearsPeriod Years of validity of the name\\n    /// @return Current price of the name minting in the given payment method\\n    function getPriceForMintingName(\\n        address paymentMethod,\\n        uint256 nameLength,\\n        uint256 yearsPeriod\\n    ) public view returns (uint256) {\\n        uint256 mintPrice = getNameRegistrationPricePerYear(nameLength).mul(\\n            yearsPeriod\\n        );\\n\\n        if (mintPrice == 0) {\\n            return 0;\\n        } else if (\\n            paymentMethod == stableCoin && enabledPaymentMethod[paymentMethod]\\n        ) {\\n            // stable coin\\n            return mintPrice;\\n        } else if (enabledPaymentMethod[paymentMethod]) {\\n            // ETH and ERC 20 token\\n            return _convertFromStableCoin(paymentMethod, mintPrice);\\n        } else {\\n            revert InvalidPaymentMethod(paymentMethod);\\n        }\\n    }\\n\\n    /* ========== PRIVATE FUNCTIONS ========== */\\n\\n    /// @notice Mints a new Soulbound Identity and Name\\n    /// @dev The final step of all purchase options. Will mint a\\n    /// new Soulbound Identity and a Soul Name NFT and emit the purchase event\\n    /// @param to Address of the owner of the new soul name\\n    /// @param name Name of the new soul name\\n    /// @param nameLength Length of the name\\n    /// @param yearsPeriod Years of validity of the name\\n    /// @param tokenURI URI of the NFT\\n    /// @param authorityAddress Address of the authority\\n    /// @param signature Signature of the authority\\n    /// @return TokenId of the new soulbound identity\\n    function _mintSoulboundIdentityAndName(\\n        address to,\\n        string memory name,\\n        uint256 nameLength,\\n        uint256 yearsPeriod,\\n        string memory tokenURI,\\n        address authorityAddress,\\n        bytes calldata signature\\n    ) internal returns (uint256) {\\n        _verify(\\n            _hash(to, name, nameLength, yearsPeriod, tokenURI),\\n            signature,\\n            authorityAddress\\n        );\\n\\n        // mint Soulbound identity token\\n        uint256 tokenId = soulboundIdentity.mintIdentityWithName(\\n            to,\\n            name,\\n            yearsPeriod,\\n            tokenURI\\n        );\\n\\n        emit SoulboundIdentityAndNamePurchased(to, tokenId, name, yearsPeriod);\\n\\n        return tokenId;\\n    }\\n\\n    /// @notice Mints a new Soulbound Identity\\n    /// @dev The final step of all purchase options. Will mint a\\n    /// new Soulbound Identity and emit the purchase event\\n    /// @param to Address of the owner of the new identity\\n    /// @return TokenId of the new soulbound identity\\n    function _mintSoulboundIdentity(address to) internal returns (uint256) {\\n        // mint Soulbound identity token\\n        uint256 tokenId = soulboundIdentity.mint(to);\\n\\n        emit SoulboundIdentityPurchased(to, tokenId);\\n\\n        return tokenId;\\n    }\\n\\n    /// @notice Mints a new Soul Name\\n    /// @dev The final step of all purchase options. Will mint a\\n    /// new Soul Name NFT and emit the purchase event\\n    /// @param to Address of the owner of the new soul name\\n    /// @param name Name of the new soul name\\n    /// @param nameLength Length of the name\\n    /// @param yearsPeriod Years of validity of the name\\n    /// @param tokenURI URI of the NFT\\n    /// @param authorityAddress Address of the authority\\n    /// @param signature Signature of the authority\\n    /// @return TokenId of the new soul name\\n    function _mintSoulName(\\n        address to,\\n        string memory name,\\n        uint256 nameLength,\\n        uint256 yearsPeriod,\\n        string memory tokenURI,\\n        address authorityAddress,\\n        bytes calldata signature\\n    ) internal returns (uint256) {\\n        _verify(\\n            _hash(to, name, nameLength, yearsPeriod, tokenURI),\\n            signature,\\n            authorityAddress\\n        );\\n\\n        // mint Soul Name token\\n        ISoulName soulName = soulboundIdentity.getSoulName();\\n\\n        uint256 tokenId = soulName.mint(to, name, yearsPeriod, tokenURI);\\n\\n        emit SoulNamePurchased(to, tokenId, name, yearsPeriod);\\n\\n        return tokenId;\\n    }\\n\\n    function _verify(\\n        bytes32 digest,\\n        bytes memory signature,\\n        address signer\\n    ) internal view {\\n        address _signer = ECDSA.recover(digest, signature);\\n        if (_signer != signer) revert InvalidSignature();\\n        if (!authorities[_signer]) revert NotAuthorized(_signer);\\n    }\\n\\n    function _hash(\\n        address to,\\n        string memory name,\\n        uint256 nameLength,\\n        uint256 yearsPeriod,\\n        string memory tokenURI\\n    ) internal view returns (bytes32) {\\n        return\\n            _hashTypedDataV4(\\n                keccak256(\\n                    abi.encode(\\n                        keccak256(\\n                            \\\"MintSoulName(address to,string name,uint256 nameLength,uint256 yearsPeriod,string tokenURI)\\\"\\n                        ),\\n                        to,\\n                        keccak256(bytes(name)),\\n                        nameLength,\\n                        yearsPeriod,\\n                        keccak256(bytes(tokenURI))\\n                    )\\n                )\\n            );\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    /* ========== EVENTS ========== */\\n\\n    event SoulboundIdentityAndNamePurchased(\\n        address indexed account,\\n        uint256 tokenId,\\n        string indexed name,\\n        uint256 yearsPeriod\\n    );\\n\\n    event SoulboundIdentityPurchased(address indexed account, uint256 tokenId);\\n\\n    event SoulNamePurchased(\\n        address indexed account,\\n        uint256 tokenId,\\n        string indexed name,\\n        uint256 yearsPeriod\\n    );\\n}\\n\",\"keccak256\":\"0xee78a5756d6cdde81c50bdde9458455c7cd43d66fe9614cf8fff408bf59bdfcb\",\"license\":\"MIT\"},\"contracts/dex/PaymentGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"../libraries/Errors.sol\\\";\\nimport \\\"../interfaces/dex/IUniswapRouter.sol\\\";\\n\\n/// @title Pay using a Decentralized automated market maker (AMM) when needed\\n/// @author Masa Finance\\n/// @notice Smart contract to call a Dex AMM smart contract to pay to a reserve wallet recipient\\n/// @dev This smart contract will call the Uniswap Router interface, based on\\n/// https://github.com/Uniswap/v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router01.sol\\nabstract contract PaymentGateway is AccessControl {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    struct PaymentParams {\\n        address swapRouter; // Swap router address\\n        address wrappedNativeToken; // Wrapped native token address\\n        address stableCoin; // Stable coin to pay the fee in (USDC)\\n        address masaToken; // Utility token to pay the fee in (MASA)\\n        address reserveWallet; // Wallet that will receive the fee\\n    }\\n\\n    /* ========== STATE VARIABLES =========================================== */\\n\\n    address public swapRouter;\\n    address public wrappedNativeToken;\\n\\n    address public stableCoin; // USDC. It also needs to be enabled as payment method, if we want to pay in USDC\\n    address public masaToken; // MASA. It also needs to be enabled as payment method, if we want to pay in MASA\\n\\n    // enabled payment methods: ETH and ERC20 tokens\\n    mapping(address => bool) public enabledPaymentMethod;\\n    address[] public enabledPaymentMethods;\\n\\n    address public reserveWallet;\\n\\n    /* ========== INITIALIZE ================================================ */\\n\\n    /// @notice Creates a new Dex AMM\\n    /// @dev Creates a new Decentralized automated market maker (AMM) smart contract,\\n    // that will call the Uniswap Router interface\\n    /// @param admin Administrator of the smart contract\\n    /// @param paymentParams Payment params\\n    constructor(address admin, PaymentParams memory paymentParams) {\\n        if (paymentParams.swapRouter == address(0)) revert ZeroAddress();\\n        if (paymentParams.wrappedNativeToken == address(0))\\n            revert ZeroAddress();\\n        if (paymentParams.stableCoin == address(0)) revert ZeroAddress();\\n        if (paymentParams.reserveWallet == address(0)) revert ZeroAddress();\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\\n\\n        swapRouter = paymentParams.swapRouter;\\n        wrappedNativeToken = paymentParams.wrappedNativeToken;\\n        stableCoin = paymentParams.stableCoin;\\n        masaToken = paymentParams.masaToken;\\n        reserveWallet = paymentParams.reserveWallet;\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ====================================== */\\n\\n    /// @notice Sets the swap router address\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _swapRouter New swap router address\\n    function setSwapRouter(\\n        address _swapRouter\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (_swapRouter == address(0)) revert ZeroAddress();\\n        if (swapRouter == _swapRouter) revert SameValue();\\n        swapRouter = _swapRouter;\\n    }\\n\\n    /// @notice Sets the wrapped native token address\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _wrappedNativeToken New wrapped native token address\\n    function setWrappedNativeToken(\\n        address _wrappedNativeToken\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (_wrappedNativeToken == address(0)) revert ZeroAddress();\\n        if (wrappedNativeToken == _wrappedNativeToken) revert SameValue();\\n        wrappedNativeToken = _wrappedNativeToken;\\n    }\\n\\n    /// @notice Sets the stable coin to pay the fee in (USDC)\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _stableCoin New stable coin to pay the fee in\\n    function setStableCoin(\\n        address _stableCoin\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (_stableCoin == address(0)) revert ZeroAddress();\\n        if (stableCoin == _stableCoin) revert SameValue();\\n        stableCoin = _stableCoin;\\n    }\\n\\n    /// @notice Sets the utility token to pay the fee in (MASA)\\n    /// @dev The caller must have the admin role to call this function\\n    /// It can be set to address(0) to disable paying in MASA\\n    /// @param _masaToken New utility token to pay the fee in\\n    function setMasaToken(\\n        address _masaToken\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (masaToken == _masaToken) revert SameValue();\\n        masaToken = _masaToken;\\n    }\\n\\n    /// @notice Adds a new token as a valid payment method\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _paymentMethod New token to add\\n    function enablePaymentMethod(\\n        address _paymentMethod\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (enabledPaymentMethod[_paymentMethod]) revert AlreadyAdded();\\n\\n        enabledPaymentMethod[_paymentMethod] = true;\\n        enabledPaymentMethods.push(_paymentMethod);\\n    }\\n\\n    /// @notice Removes a token as a valid payment method\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _paymentMethod Token to remove\\n    function disablePaymentMethod(\\n        address _paymentMethod\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (!enabledPaymentMethod[_paymentMethod])\\n            revert NonExistingErc20Token(_paymentMethod);\\n\\n        enabledPaymentMethod[_paymentMethod] = false;\\n        for (uint256 i = 0; i < enabledPaymentMethods.length; i++) {\\n            if (enabledPaymentMethods[i] == _paymentMethod) {\\n                enabledPaymentMethods[i] = enabledPaymentMethods[\\n                    enabledPaymentMethods.length - 1\\n                ];\\n                enabledPaymentMethods.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @notice Set the reserve wallet\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _reserveWallet New reserve wallet\\n    function setReserveWallet(\\n        address _reserveWallet\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (_reserveWallet == address(0)) revert ZeroAddress();\\n        if (_reserveWallet == reserveWallet) revert SameValue();\\n        reserveWallet = _reserveWallet;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ======================================== */\\n\\n    /* ========== VIEWS ===================================================== */\\n\\n    /// @notice Returns all available payment methods\\n    /// @dev Returns the address of all available payment methods\\n    /// @return Array of all enabled payment methods\\n    function getEnabledPaymentMethods()\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        return enabledPaymentMethods;\\n    }\\n\\n    /* ========== PRIVATE FUNCTIONS ========================================= */\\n\\n    /// @notice Converts an amount from a stable coin to a payment method amount\\n    /// @dev This method will perform the swap between the stable coin and the\\n    /// payment method, and return the amount of the payment method,\\n    /// performing the swap if necessary\\n    /// @param paymentMethod Address of token that user want to pay\\n    /// @param amount Price to be converted in the specified payment method\\n    function _convertFromStableCoin(\\n        address paymentMethod,\\n        uint256 amount\\n    ) internal view returns (uint256) {\\n        if (!enabledPaymentMethod[paymentMethod] || paymentMethod == stableCoin)\\n            revert InvalidToken(paymentMethod);\\n\\n        if (paymentMethod == address(0)) {\\n            return _estimateSwapAmount(wrappedNativeToken, stableCoin, amount);\\n        } else {\\n            return _estimateSwapAmount(paymentMethod, stableCoin, amount);\\n        }\\n    }\\n\\n    /// @notice Performs the payment in any payment method\\n    /// @dev This method will transfer the funds to the reserve wallet, performing\\n    /// the swap if necessary\\n    /// @param paymentMethod Address of token that user want to pay\\n    /// @param amount Price to be paid in the specified payment method\\n    function _pay(address paymentMethod, uint256 amount) internal {\\n        if (amount == 0) return;\\n        if (!enabledPaymentMethod[paymentMethod])\\n            revert InvalidPaymentMethod(paymentMethod);\\n        if (paymentMethod == address(0)) {\\n            // ETH\\n            if (msg.value < amount) revert InsufficientEthAmount(amount);\\n            (bool success, ) = payable(reserveWallet).call{value: amount}(\\\"\\\");\\n            if (!success) revert TransferFailed();\\n            if (msg.value > amount) {\\n                // return diff\\n                uint256 refund = msg.value.sub(amount);\\n                (success, ) = payable(msg.sender).call{value: refund}(\\\"\\\");\\n                if (!success) revert RefundFailed();\\n            }\\n        } else {\\n            // ERC20 token, including MASA and USDC\\n            IERC20(paymentMethod).safeTransferFrom(\\n                msg.sender,\\n                reserveWallet,\\n                amount\\n            );\\n        }\\n    }\\n\\n    function _estimateSwapAmount(\\n        address _fromToken,\\n        address _toToken,\\n        uint256 _amountOut\\n    ) private view returns (uint256) {\\n        uint256[] memory amounts;\\n        address[] memory path;\\n        path = _getPathFromTokenToToken(_fromToken, _toToken);\\n        amounts = IUniswapRouter(swapRouter).getAmountsIn(_amountOut, path);\\n        return amounts[0];\\n    }\\n\\n    function _getPathFromTokenToToken(\\n        address fromToken,\\n        address toToken\\n    ) private view returns (address[] memory) {\\n        if (fromToken == wrappedNativeToken || toToken == wrappedNativeToken) {\\n            address[] memory path = new address[](2);\\n            path[0] = fromToken == wrappedNativeToken\\n                ? wrappedNativeToken\\n                : fromToken;\\n            path[1] = toToken == wrappedNativeToken\\n                ? wrappedNativeToken\\n                : toToken;\\n            return path;\\n        } else {\\n            address[] memory path = new address[](3);\\n            path[0] = fromToken;\\n            path[1] = wrappedNativeToken;\\n            path[2] = toToken;\\n            return path;\\n        }\\n    }\\n\\n    /* ========== MODIFIERS ================================================= */\\n\\n    /* ========== EVENTS ==================================================== */\\n}\\n\",\"keccak256\":\"0x0cad631b776fcafa001de4ae5fe57da80f5dfff7d95cba78a42d3b53c72815da\",\"license\":\"MIT\"},\"contracts/interfaces/ISoulName.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface ISoulName {\\n    function mint(\\n        address to,\\n        string memory name,\\n        uint256 yearsPeriod,\\n        string memory _tokenURI\\n    ) external returns (uint256);\\n\\n    function getExtension() external view returns (string memory);\\n\\n    function isAvailable(\\n        string memory name\\n    ) external view returns (bool available);\\n\\n    function getTokenData(\\n        string memory name\\n    )\\n        external\\n        view\\n        returns (\\n            string memory sbtName,\\n            bool linked,\\n            uint256 identityId,\\n            uint256 tokenId,\\n            uint256 expirationDate,\\n            bool active\\n        );\\n\\n    function getTokenId(string memory name) external view returns (uint256);\\n\\n    function getSoulNames(\\n        address owner\\n    ) external view returns (string[] memory sbtNames);\\n\\n    function getSoulNames(\\n        uint256 identityId\\n    ) external view returns (string[] memory sbtNames);\\n}\\n\",\"keccak256\":\"0x20414e3fe83c75d619c9f4aae646bc701686821905bc46ef5be036f835b157b2\",\"license\":\"MIT\"},\"contracts/interfaces/ISoulboundIdentity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"../tokens/SBT/ISBT.sol\\\";\\n\\nimport \\\"./ISoulName.sol\\\";\\n\\ninterface ISoulboundIdentity is ISBT {\\n    function mint(address to) external returns (uint256);\\n\\n    function mintIdentityWithName(\\n        address to,\\n        string memory name,\\n        uint256 yearsPeriod,\\n        string memory _tokenURI\\n    ) external returns (uint256);\\n\\n    function getSoulName() external view returns (ISoulName);\\n\\n    function tokenOfOwner(address owner) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x443506c61e4b65b8587c43928ed004d880feb4e272a56f474bb8def5d9090c0a\",\"license\":\"MIT\"},\"contracts/interfaces/dex/IUniswapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n/// @title Uniswap Router interface\\n/// @author Masa Finance\\n/// @notice Interface of the Uniswap Router contract\\n/// @dev This interface is used to interact with the Uniswap Router contract,\\n/// and gets the most important functions of the contract. It's based on\\n/// https://github.com/Uniswap/v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router01.sol\\ninterface IUniswapRouter {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function getAmountsOut(\\n        uint256 amountIn,\\n        address[] calldata path\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(\\n        uint256 amountOut,\\n        address[] calldata path\\n    ) external view returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x36b7e48f862a9bcf8004c0382e2bc973387edbf8b2ee250e499a65bde95fa0aa\",\"license\":\"MIT\"},\"contracts/libraries/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nerror AddressDoesNotHaveIdentity(address to);\\nerror AlreadyAdded();\\nerror AuthorityNotExists(address authority);\\nerror CallerNotOwner(address caller);\\nerror CallerNotReader(address caller);\\nerror CreditScoreAlreadyCreated(address to);\\nerror IdentityAlreadyCreated(address to);\\nerror IdentityOwnerIsReader(uint256 readerIdentityId);\\nerror InsufficientEthAmount(uint256 amount);\\nerror IdentityOwnerNotTokenOwner(uint256 tokenId, uint256 ownerIdentityId);\\nerror InvalidPaymentMethod(address paymentMethod);\\nerror InvalidSignature();\\nerror InvalidSignatureDate(uint256 signatureDate);\\nerror InvalidToken(address token);\\nerror InvalidTokenURI(string tokenURI);\\nerror LinkAlreadyExists(\\n    address token,\\n    uint256 tokenId,\\n    uint256 readerIdentityId,\\n    uint256 signatureDate\\n);\\nerror LinkAlreadyRevoked();\\nerror LinkDoesNotExist();\\nerror NameAlreadyExists(string name);\\nerror NameNotFound(string name);\\nerror NameRegisteredByOtherAccount(string name, uint256 tokenId);\\nerror NotAuthorized(address signer);\\nerror NonExistingErc20Token(address erc20token);\\nerror NotLinkedToAnIdentitySBT();\\nerror RefundFailed();\\nerror SameValue();\\nerror SBTAlreadyLinked(address token);\\nerror SoulNameContractNotSet();\\nerror TokenNotFound(uint256 tokenId);\\nerror TransferFailed();\\nerror URIAlreadyExists(string tokenURI);\\nerror ValidPeriodExpired(uint256 expirationDate);\\nerror ZeroAddress();\\nerror ZeroLengthName(string name);\\nerror ZeroYearsPeriod(uint256 yearsPeriod);\\n\",\"keccak256\":\"0x6f844a5a2149390d1ad7113b302b7ae539c27b0e861133554dbe8c2e00fb99e7\",\"license\":\"MIT\"},\"contracts/tokens/SBT/ISBT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface ISBT is IERC165 {\\n    /// @dev This emits when an SBT is newly minted.\\n    ///  This event emits when SBTs are created\\n    event Mint(address indexed _owner, uint256 indexed _tokenId);\\n\\n    /// @dev This emits when an SBT is burned\\n    ///  This event emits when SBTs are destroyed\\n    event Burn(address indexed _owner, uint256 indexed _tokenId);\\n\\n    /// @notice Count all SBTs assigned to an owner\\n    /// @dev SBTs assigned to the zero address are considered invalid, and this\\n    ///  function throws for queries about the zero address.\\n    /// @param _owner An address for whom to query the balance\\n    /// @return The number of SBTs owned by `_owner`, possibly zero\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    /// @notice Find the owner of an SBT\\n    /// @dev SBTs assigned to zero address are considered invalid, and queries\\n    ///  about them do throw.\\n    /// @param _tokenId The identifier for an SBT\\n    /// @return The address of the owner of the SBT\\n    function ownerOf(uint256 _tokenId) external view returns (address);\\n}\\n\",\"keccak256\":\"0xe3bbe44185c28e82bafd54b2197ea0971af74864dd1e7148ac4bbc673d52d738\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b50604051620036d9380380620036d9833981016040819052620000359162000446565b60405180604001604052806009815260200168536f756c53746f726560b81b815250604051806040016040528060058152602001640312e302e360dc1b815250858360006001600160a01b031681600001516001600160a01b03161415620000b05760405163d92e233d60e01b815260040160405180910390fd5b60208101516001600160a01b0316620000dc5760405163d92e233d60e01b815260040160405180910390fd5b60408101516001600160a01b0316620001085760405163d92e233d60e01b815260040160405180910390fd5b60808101516001600160a01b0316620001345760405163d92e233d60e01b815260040160405180910390fd5b620001416000836200029b565b8051600180546001600160a01b03199081166001600160a01b0393841617825560208085015160028054841691861691909117905560408501516003805484169186169190911790556060850151600480549093169085161790915560809093015160078054919093166001600160a81b03199091161790915560085583518482012083519184019190912060e08290526101008190524660a0529091507f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6200020d81848462000324565b6080523060601b60c05261012052505050506001600160a01b038316620002475760405163d92e233d60e01b815260040160405180910390fd5b50600980546001600160a01b0319166001600160a01b03939093169290921790915560008052600a6020527f13da86008ba1c6922daee3e07db95305ef49ebced9f5467a0b8613fcc6b343e35550620005d2565b620002a7828262000360565b62000320576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620002df3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000838383463060405160200162000341959493929190620004cd565b6040516020818303038152906040528051906020012090509392505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff165b92915050565b80516200038581620005a6565b80516200038581620005c0565b600060a08284031215620003bc57620003bc600080fd5b620003c860a062000523565b90506000620003d884846200038b565b8252506020620003eb848483016200038b565b602083015250604062000401848285016200038b565b604083015250606062000417848285016200038b565b60608301525060806200042d848285016200038b565b60808301525092915050565b80516200038581620005cb565b6000806000806101008587031215620004625762000462600080fd5b60006200047087876200038b565b9450506020620004838782880162000398565b9350506040620004968782880162000439565b9250506060620004a987828801620003a5565b91505092959194509250565b620004c08162000542565b82525050565b80620004c0565b60a08101620004dd8288620004c6565b620004ec6020830187620004c6565b620004fb6040830186620004c6565b6200050a6060830185620004c6565b620005196080830184620004b5565b9695505050505050565b60006200052f60405190565b90506200053d828262000561565b919050565b60006001600160a01b03821662000385565b6000620003858262000542565b601f19601f83011681018181106001600160401b038211171562000589576200058962000590565b6040525050565b634e487b7160e01b600052604160045260246000fd5b620005b18162000542565b8114620005bd57600080fd5b50565b620005b18162000554565b80620005b1565b60805160a05160c05160601c60e05161010051610120516130b4620006256000396000611f1801526000611f5a01526000611f3901526000611e9d01526000611ec701526000611ef101526130b46000f3fe6080604052600436106101aa5760003560e01c806301ffc9a7146101af5780630513c3e9146101e5578063102005191461021257806312553e411461023457806317fcb39b1461025657806323af4e1714610276578063248a9ca31461029857806326defa73146102b85780632f2ff15d146102d857806336568abe146102f85780633ad3033e146103185780633f4ba83a14610338578063412736571461034d5780634e273d211461036d5780635a3946751461038d5780635c975abb146103a057806374a99f8b146103b557806376ad1997146103d557806377bed5ed146103f55780637a0d1646146104225780638456cb591461045257806390ce84161461046757806391223d691461048757806391d14854146104b757806394a665e9146104d7578063992642e5146104f7578063a217fddf14610517578063c31c9c071461052c578063c86aadb61461054c578063d544e0101461056c578063d547741f1461058c578063d72b11bd146105ac578063da058ae3146105cc578063dda4fa8f146105ec578063eaf94aec1461060c578063ebda439614610639578063f615283a14610659575b600080fd5b3480156101bb57600080fd5b506101cf6101ca36600461273b565b61066c565b6040516101dc9190612c5f565b60405180910390f35b3480156101f157600080fd5b506102056102003660046126dd565b6106a3565b6040516101dc9190612bd7565b34801561021e57600080fd5b506102276106cd565b6040516101dc9190612c4e565b34801561024057600080fd5b5061024961072f565b6040516101dc9190612c6d565b34801561026257600080fd5b50600254610205906001600160a01b031681565b34801561028257600080fd5b5061029661029136600461241b565b610759565b005b3480156102a457600080fd5b506102496102b33660046126dd565b6107dd565b3480156102c457600080fd5b506102966102d336600461241b565b6107f2565b3480156102e457600080fd5b506102966102f33660046126fe565b610883565b34801561030457600080fd5b506102966103133660046126fe565b6108a4565b34801561032457600080fd5b5061029661033336600461277d565b6108e3565b34801561034457600080fd5b50610296610967565b34801561035957600080fd5b5061029661036836600461241b565b61097d565b34801561037957600080fd5b506102496103883660046126dd565b610a01565b61024961039b36600461243c565b610a46565b3480156103ac57600080fd5b506101cf610a95565b3480156103c157600080fd5b506102966103d03660046127bf565b610aa5565b3480156103e157600080fd5b506102966103f036600461241b565b610af2565b34801561040157600080fd5b50600954610415906001600160a01b031681565b6040516101dc9190612d4b565b34801561042e57600080fd5b506101cf61043d36600461241b565b60056020526000908152604090205460ff1681565b34801561045e57600080fd5b50610296610b4f565b34801561047357600080fd5b50610249610482366004612632565b610b62565b34801561049357600080fd5b506101cf6104a236600461241b565b600b6020526000908152604090205460ff1681565b3480156104c357600080fd5b506101cf6104d23660046126fe565b610c21565b3480156104e357600080fd5b506102966104f236600461241b565b610c4a565b34801561050357600080fd5b50600354610205906001600160a01b031681565b34801561052357600080fd5b50610249600081565b34801561053857600080fd5b50600154610205906001600160a01b031681565b34801561055857600080fd5b5061029661056736600461241b565b610db7565b34801561057857600080fd5b5061029661058736600461241b565b610e63565b34801561059857600080fd5b506102966105a73660046126fe565b610ef2565b3480156105b857600080fd5b50600754610205906001600160a01b031681565b3480156105d857600080fd5b506102966105e736600461241b565b610f0e565b3480156105f857600080fd5b5061029661060736600461241b565b610f92565b34801561061857600080fd5b506102496106273660046126dd565b600a6020526000908152604090205481565b34801561064557600080fd5b50600454610205906001600160a01b031681565b610249610667366004612541565b611016565b60006001600160e01b03198216637965db0b60e01b148061069d57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600681815481106106b357600080fd5b6000918252602090912001546001600160a01b0316905081565b6060600680548060200260200160405190810160405280929190818152602001828054801561072557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610707575b5050505050905090565b600061073961105f565b610741611086565b61074a336110b0565b90506107566001600855565b90565b600061076481611180565b6001600160a01b03821661078b5760405163d92e233d60e01b815260040160405180910390fd5b6003546001600160a01b03838116911614156107ba5760405163c23f6ccb60e01b815260040160405180910390fd5b50600380546001600160a01b0319166001600160a01b0392909216919091179055565b60009081526020819052604090206001015490565b60006107fd81611180565b6001600160a01b0382166108245760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b0382166000908152600b602052604090205460ff161561085e5760405163f411c32760e01b815260040160405180910390fd5b506001600160a01b03166000908152600b60205260409020805460ff19166001179055565b61088c826107dd565b61089581611180565b61089f838361118a565b505050565b6001600160a01b03811633146108d55760405162461bcd60e51b81526004016108cc90612e0a565b60405180910390fd5b6108df828261120e565b5050565b60006108ee81611180565b6001600160a01b0382166109155760405163d92e233d60e01b815260040160405180910390fd5b6009546001600160a01b03838116911614156109445760405163c23f6ccb60e01b815260040160405180910390fd5b50600980546001600160a01b0319166001600160a01b0392909216919091179055565b600061097281611180565b61097a611273565b50565b600061098881611180565b6001600160a01b0382166109af5760405163d92e233d60e01b815260040160405180910390fd5b6001546001600160a01b03838116911614156109de5760405163c23f6ccb60e01b815260040160405180910390fd5b50600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000818152600a60205260408120548061069d5750506000805250600a6020527f13da86008ba1c6922daee3e07db95305ef49ebced9f5467a0b8613fcc6b343e35490565b6000610a5061105f565b610a58611086565b610a6c8a610a678c8a8a610b62565b6112c2565b610a7c898989898989898961146e565b9050610a886001600855565b9998505050505050505050565b600754600160a01b900460ff1690565b6000610ab081611180565b6000838152600a6020526040902054821415610adf5760405163c23f6ccb60e01b815260040160405180910390fd5b506000918252600a602052604090912055565b6000610afd81611180565b6004546001600160a01b0383811691161415610b2c5760405163c23f6ccb60e01b815260040160405180910390fd5b50600480546001600160a01b0319166001600160a01b0392909216919091179055565b6000610b5a81611180565b61097a61162c565b600080610b7883610b7286610a01565b9061166f565b905080610b89576000915050610c1a565b6003546001600160a01b038681169116148015610bbe57506001600160a01b03851660009081526005602052604090205460ff165b15610bca579050610c1a565b6001600160a01b03851660009081526005602052604090205460ff1615610bfd57610bf5858261167b565b915050610c1a565b84604051630ac29ab760e31b81526004016108cc9190612bd7565b505b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6000610c5581611180565b6001600160a01b03821660009081526005602052604090205460ff16610c9057816040516318317bd560e01b81526004016108cc9190612bd7565b6001600160a01b0382166000908152600560205260408120805460ff191690555b60065481101561089f57826001600160a01b031660068281548110610cd857610cd861300d565b6000918252602090912001546001600160a01b03161415610da55760068054610d0390600190612ef6565b81548110610d1357610d1361300d565b600091825260209091200154600680546001600160a01b039092169183908110610d3f57610d3f61300d565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506006805480610d7e57610d7e612ff7565b600082815260209020810160001990810180546001600160a01b0319169055019055505050565b80610daf81612fb0565b915050610cb1565b6000610dc281611180565b6001600160a01b03821660009081526005602052604090205460ff1615610dfc5760405163f411c32760e01b815260040160405180910390fd5b506001600160a01b03166000818152600560205260408120805460ff191660019081179091556006805491820181559091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b0319169091179055565b6000610e6e81611180565b6001600160a01b038216610e955760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b0382166000908152600b602052604090205460ff16610ed057816040516324b1f80560e21b81526004016108cc9190612bd7565b506001600160a01b03166000908152600b60205260409020805460ff19169055565b610efb826107dd565b610f0481611180565b61089f838361120e565b6000610f1981611180565b6001600160a01b038216610f405760405163d92e233d60e01b815260040160405180910390fd5b6002546001600160a01b0383811691161415610f6f5760405163c23f6ccb60e01b815260040160405180910390fd5b50600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000610f9d81611180565b6001600160a01b038216610fc45760405163d92e233d60e01b815260040160405180910390fd5b6007546001600160a01b0383811691161415610ff35760405163c23f6ccb60e01b815260040160405180910390fd5b50600780546001600160a01b0319166001600160a01b0392909216919091179055565b600061102061105f565b611028611086565b61103789610a678b8a8a610b62565b611047338989898989898961171a565b90506110536001600855565b98975050505050505050565b611067610a95565b156110845760405162461bcd60e51b81526004016108cc90612dca565b565b600260085414156110a95760405162461bcd60e51b81526004016108cc90612dfa565b6002600855565b6009546040516335313c2160e11b815260009182916001600160a01b0390911690636a627842906110e5908690600401612bd7565b602060405180830381600087803b1580156110ff57600080fd5b505af1158015611113573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611137919061279e565b9050826001600160a01b03167fe6fdadff80ae44015b9aa37d4edb70f70a8db7535a0df98de6dc5ffd11ec0c2f826040516111729190612c6d565b60405180910390a292915050565b61097a813361181d565b6111948282610c21565b6108df576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556111ca3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6112188282610c21565b156108df576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b61127b611876565b6007805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516112b89190612bd7565b60405180910390a1565b806112cb575050565b6001600160a01b03821660009081526005602052604090205460ff166113065781604051630ac29ab760e31b81526004016108cc9190612bd7565b6001600160a01b0382166114525780341015611337578060405163091a6d0f60e01b81526004016108cc9190612c6d565b6007546040516000916001600160a01b031690839061135590612b7d565b60006040518083038185875af1925050503d8060008114611392576040519150601f19603f3d011682016040523d82523d6000602084013e611397565b606091505b50509050806113b9576040516312171d8360e31b815260040160405180910390fd5b8134111561089f5760006113cd348461189a565b9050336001600160a01b0316816040516113e690612b7d565b60006040518083038185875af1925050503d8060008114611423576040519150601f19603f3d011682016040523d82523d6000602084013e611428565b606091505b5050809250508161144c57604051633c31275160e21b815260040160405180910390fd5b50505050565b6007546108df906001600160a01b0384811691339116846118a6565b60006114be6114808a8a8a8a8a6118fe565b84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250899250611973915050565b6009546040805163b507d48160e01b815290516000926001600160a01b03169163b507d481916004808301926020929190829003018186803b15801561150357600080fd5b505afa158015611517573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153b919061275c565b90506000816001600160a01b0316633dd904308c8c8b8b6040518563ffffffff1660e01b81526004016115719493929190612c0d565b602060405180830381600087803b15801561158b57600080fd5b505af115801561159f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c3919061279e565b9050896040516115d39190612b3e565b60405180910390208b6001600160a01b03167f32044e50415e96c0068a718b8df9993f4803b2e54518d56c52ef6438a91619aa838b604051611616929190612e3a565b60405180910390a39a9950505050505050505050565b61163461105f565b6007805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586112ab3390565b6000610c1a8284612ed7565b6001600160a01b03821660009081526005602052604081205460ff1615806116b057506003546001600160a01b038481169116145b156116d0578260405163961c9a4f60e01b81526004016108cc9190612bd7565b6001600160a01b038316611702576002546003546116fb916001600160a01b039081169116846119ee565b905061069d565b6003546116fb9084906001600160a01b0316846119ee565b600061172c6114808a8a8a8a8a6118fe565b6009546040516328a0a29f60e11b81526000916001600160a01b031690635141453e90611763908d908d908c908c90600401612c0d565b602060405180830381600087803b15801561177d57600080fd5b505af1158015611791573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b5919061279e565b9050886040516117c59190612b3e565b60405180910390208a6001600160a01b03167f60579b770d8bde9b5f57c468ffb4acb023252b190304137b45b86b72f66a1940838a604051611808929190612e3a565b60405180910390a39998505050505050505050565b6118278282610c21565b6108df5761183481611aac565b61183f836020611abe565b604051602001611850929190612b85565b60408051601f198184030181529082905262461bcd60e51b82526108cc91600401612d59565b61187e610a95565b6110845760405162461bcd60e51b81526004016108cc90612d8a565b6000610c1a8284612ef6565b61144c846323b872dd60e01b8585856040516024016118c793929190612be5565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611c29565b60006119677f7503a77cf463259868f167e5b04bb93b908e722f1d532d8a0635f83ea802a2c18787805190602001208787878051906020012060405160200161194c96959493929190612c7b565b60405160208183030381529060405280519060200120611cb8565b90505b95945050505050565b600061197f8484611ccb565b9050816001600160a01b0316816001600160a01b0316146119b357604051638baa579f60e01b815260040160405180910390fd5b6001600160a01b0381166000908152600b602052604090205460ff1661144c5780604051634a0bfec160e01b81526004016108cc9190612bd7565b60006060806119fd8686611ce7565b6001546040516307c0329d60e21b81529192506001600160a01b031690631f00ca7490611a309087908590600401612e1a565b60006040518083038186803b158015611a4857600080fd5b505afa158015611a5c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a849190810190612682565b915081600081518110611a9957611a9961300d565b6020026020010151925050509392505050565b606061069d6001600160a01b03831660145b60606000611acd836002612ed7565b611ad8906002612ebf565b6001600160401b03811115611aef57611aef613023565b6040519080825280601f01601f191660200182016040528015611b19576020820181803683370190505b509050600360fc1b81600081518110611b3457611b3461300d565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611b6357611b6361300d565b60200101906001600160f81b031916908160001a9053506000611b87846002612ed7565b611b92906001612ebf565b90505b6001811115611c0a576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611bc657611bc661300d565b1a60f81b828281518110611bdc57611bdc61300d565b60200101906001600160f81b031916908160001a90535060049490941c93611c0381612f6c565b9050611b95565b508315610c1a5760405162461bcd60e51b81526004016108cc90612d7a565b6000611c7e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611e799092919063ffffffff16565b80519091501561089f5780806020019051810190611c9c91906126bc565b61089f5760405162461bcd60e51b81526004016108cc90612dea565b600061069d611cc5611e90565b83611f83565b6000806000611cda8585611fb6565b91509150610c1881611ffc565b6002546060906001600160a01b0384811691161480611d1357506002546001600160a01b038381169116145b15611ddd57604080516002808252606082018352600092602083019080368337019050506002549091506001600160a01b03858116911614611d555783611d62565b6002546001600160a01b03165b81600081518110611d7557611d7561300d565b6001600160a01b039283166020918202929092010152600254848216911614611d9e5782611dab565b6002546001600160a01b03165b81600181518110611dbe57611dbe61300d565b6001600160a01b0390921660209283029190910190910152905061069d565b60408051600380825260808201909252600091602082016060803683370190505090508381600081518110611e1457611e1461300d565b6001600160a01b039283166020918202929092010152600254825191169082906001908110611e4557611e4561300d565b60200260200101906001600160a01b031690816001600160a01b0316815250508281600281518110611dbe57611dbe61300d565b6060611e8884846000856120af565b949350505050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015611ee957507f000000000000000000000000000000000000000000000000000000000000000046145b15611f1357507f000000000000000000000000000000000000000000000000000000000000000090565b611f7e7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061214b565b905090565b60008282604051602001611f98929190612b4a565b60405160208183030381529060405280519060200120905092915050565b600080825160411415611fed5760208301516040840151606085015160001a611fe187828585612185565b94509450505050611ff5565b506000905060025b9250929050565b600081600481111561201057612010612fe1565b14156120195750565b600181600481111561202d5761202d612fe1565b141561204b5760405162461bcd60e51b81526004016108cc90612d6a565b600281600481111561205f5761205f612fe1565b141561207d5760405162461bcd60e51b81526004016108cc90612d9a565b600381600481111561209157612091612fe1565b141561097a5760405162461bcd60e51b81526004016108cc90612daa565b6060824710156120d15760405162461bcd60e51b81526004016108cc90612dba565b600080866001600160a01b031685876040516120ed9190612b3e565b60006040518083038185875af1925050503d806000811461212a576040519150601f19603f3d011682016040523d82523d6000602084013e61212f565b606091505b509150915061214087838387612232565b979650505050505050565b60008383834630604051602001612166959493929190612cca565b6040516020818303038152906040528051906020012090509392505050565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b038311156121b25750600090506003612229565b6000600187878787604051600081526020016040526040516121d79493929190612d16565b6020604051602081039080840390855afa1580156121f9573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661222257600060019250925050612229565b9150600090505b94509492505050565b6060831561226e578251612267576001600160a01b0385163b6122675760405162461bcd60e51b81526004016108cc90612dda565b5081611e88565b611e8883838151156122835781518083602001fd5b8060405162461bcd60e51b81526004016108cc9190612d59565b60006122b06122ab84612e71565b612e55565b905080838252602082019050828560208602820111156122d2576122d2600080fd5b60005b858110156122fe57816122e88882612410565b84525060209283019291909101906001016122d5565b5050509392505050565b60006123166122ab84612e94565b90508281526020810184848401111561233157612331600080fd5b610c18848285612f34565b803561069d81613043565b600082601f83011261235b5761235b600080fd5b8151611e8884826020860161229d565b805161069d81613057565b803561069d8161305f565b803561069d81613065565b60008083601f8401126123a1576123a1600080fd5b5081356001600160401b038111156123bb576123bb600080fd5b602083019150836001820283011115611ff557611ff5600080fd5b805161069d81613075565b803561069d81613075565b600082601f83011261240057612400600080fd5b8135611e88848260208601612308565b805161069d8161305f565b60006020828403121561243057612430600080fd5b6000611e88848461233c565b60008060008060008060008060006101008a8c03121561245e5761245e600080fd5b600061246a8c8c61233c565b995050602061247b8c828d0161233c565b98505060408a01356001600160401b0381111561249a5761249a600080fd5b6124a68c828d016123ec565b97505060606124b78c828d01612376565b96505060806124c88c828d01612376565b95505060a08a01356001600160401b038111156124e7576124e7600080fd5b6124f38c828d016123ec565b94505060c06125048c828d0161233c565b93505060e08a01356001600160401b0381111561252357612523600080fd5b61252f8c828d0161238c565b92509250509295985092959850929598565b60008060008060008060008060e0898b03121561256057612560600080fd5b600061256c8b8b61233c565b98505060208901356001600160401b0381111561258b5761258b600080fd5b6125978b828c016123ec565b97505060406125a88b828c01612376565b96505060606125b98b828c01612376565b95505060808901356001600160401b038111156125d8576125d8600080fd5b6125e48b828c016123ec565b94505060a06125f58b828c0161233c565b93505060c08901356001600160401b0381111561261457612614600080fd5b6126208b828c0161238c565b92509250509295985092959890939650565b60008060006060848603121561264a5761264a600080fd5b6000612656868661233c565b935050602061266786828701612376565b925050604061267886828701612376565b9150509250925092565b60006020828403121561269757612697600080fd5b81516001600160401b038111156126b0576126b0600080fd5b611e8884828501612347565b6000602082840312156126d1576126d1600080fd5b6000611e88848461236b565b6000602082840312156126f2576126f2600080fd5b6000611e888484612376565b6000806040838503121561271457612714600080fd5b60006127208585612376565b92505060206127318582860161233c565b9150509250929050565b60006020828403121561275057612750600080fd5b6000611e888484612381565b60006020828403121561277157612771600080fd5b6000611e8884846123d6565b60006020828403121561279257612792600080fd5b6000611e8884846123e1565b6000602082840312156127b3576127b3600080fd5b6000611e888484612410565b600080604083850312156127d5576127d5600080fd5b60006127e18585612376565b925050602061273185828601612376565b60006127fe8383612806565b505060200190565b61280f81612f0d565b82525050565b600061281f825190565b80845260209384019383018060005b8381101561285357815161284288826127f2565b97506020830192505060010161282e565b509495945050505050565b80151561280f565b8061280f565b6000612876825190565b612884818560208601612f40565b9290920192915050565b61280f81612f29565b60006128a1825190565b8084526020840193506128b8818560208601612f40565b6128c181613039565b9093019392505050565b601881526000602082017745434453413a20696e76616c6964207369676e617475726560401b815291505b5060200190565b60208082527f537472696e67733a20686578206c656e67746820696e73756666696369656e74910190815260006128f6565b601481526000602082017314185d5cd8589b194e881b9bdd081c185d5cd95960621b815291506128f6565b601f81526000602082017f45434453413a20696e76616c6964207369676e6174757265206c656e67746800815291506128f6565b602281526000602082017f45434453413a20696e76616c6964207369676e6174757265202773272076616c815261756560f01b602082015291505b5060400190565b602681526000602082017f416464726573733a20696e73756666696369656e742062616c616e636520666f8152651c8818d85b1b60d21b602082015291506129c9565b601081526000602082016f14185d5cd8589b194e881c185d5cd95960821b815291506128f6565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000815291506128f6565b602a81526000602082017f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b602082015291506129c9565b601f81526000602082017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00815291506128f6565b602f81526000602082017f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636581526e103937b632b9903337b91039b2b63360891b602082015291506129c9565b60ff811661280f565b6000610c1a828461286c565b61190160f01b81526002016000612b6282858061280f565b602082019150612b7382848061280f565b5060200192915050565b60008161069d565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b81526017016000612bb1828561286c565b7001034b99036b4b9b9b4b733903937b6329607d1b81526011019150611e88828461286c565b6020810161069d8284612806565b60608101612bf38286612806565b612c006020830185612806565b611e886040830184612866565b60808101612c1b8287612806565b8181036020830152612c2d8186612897565b9050612c3c6040830185612866565b81810360608301526119678184612897565b60208082528101610c1a8184612815565b6020810161069d828461285e565b6020810161069d8284612866565b60c08101612c898289612866565b612c966020830188612806565b612ca36040830187612866565b612cb06060830186612866565b612cbd6080830185612866565b61214060a0830184612866565b60a08101612cd88288612866565b612ce56020830187612866565b612cf26040830186612866565b612cff6060830185612866565b612d0c6080830184612806565b9695505050505050565b60808101612d248287612866565b612d316020830186612b35565b612d3e6040830185612866565b61196a6060830184612866565b6020810161069d828461288e565b60208082528101610c1a8184612897565b6020808252810161069d816128cb565b6020808252810161069d816128fd565b6020808252810161069d8161292f565b6020808252810161069d8161295a565b6020808252810161069d8161298e565b6020808252810161069d816129d0565b6020808252810161069d81612a13565b6020808252810161069d81612a3a565b6020808252810161069d81612a6e565b6020808252810161069d81612ab5565b6020808252810161069d81612ae9565b60408101612e288285612866565b8181036020830152611e888184612815565b60408101612e488285612866565b610c1a6020830184612866565b6000612e6060405190565b9050612e6c8282612f83565b919050565b60006001600160401b03821115612e8a57612e8a613023565b5060209081020190565b60006001600160401b03821115612ead57612ead613023565b612eb682613039565b60200192915050565b60008219821115612ed257612ed2612fcb565b500190565b6000816000190483118215151615612ef157612ef1612fcb565b500290565b600082821015612f0857612f08612fcb565b500390565b60006001600160a01b03821661069d565b600061069d82612f0d565b600061069d82612f1e565b82818337506000910152565b60005b83811015612f5b578181015183820152602001612f43565b8381111561144c5750506000910152565b600081612f7b57612f7b612fcb565b506000190190565b612f8c82613039565b81018181106001600160401b0382111715612fa957612fa9613023565b6040525050565b6000600019821415612fc457612fc4612fcb565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b601f01601f191690565b61304c81612f0d565b811461097a57600080fd5b80151561304c565b8061304c565b6001600160e01b0319811661304c565b61304c81612f1e56fea2646970667358221220a09604646280cb07e84326b73b53a8c3c199909b99777f993adc422608f19ed364736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106101aa5760003560e01c806301ffc9a7146101af5780630513c3e9146101e5578063102005191461021257806312553e411461023457806317fcb39b1461025657806323af4e1714610276578063248a9ca31461029857806326defa73146102b85780632f2ff15d146102d857806336568abe146102f85780633ad3033e146103185780633f4ba83a14610338578063412736571461034d5780634e273d211461036d5780635a3946751461038d5780635c975abb146103a057806374a99f8b146103b557806376ad1997146103d557806377bed5ed146103f55780637a0d1646146104225780638456cb591461045257806390ce84161461046757806391223d691461048757806391d14854146104b757806394a665e9146104d7578063992642e5146104f7578063a217fddf14610517578063c31c9c071461052c578063c86aadb61461054c578063d544e0101461056c578063d547741f1461058c578063d72b11bd146105ac578063da058ae3146105cc578063dda4fa8f146105ec578063eaf94aec1461060c578063ebda439614610639578063f615283a14610659575b600080fd5b3480156101bb57600080fd5b506101cf6101ca36600461273b565b61066c565b6040516101dc9190612c5f565b60405180910390f35b3480156101f157600080fd5b506102056102003660046126dd565b6106a3565b6040516101dc9190612bd7565b34801561021e57600080fd5b506102276106cd565b6040516101dc9190612c4e565b34801561024057600080fd5b5061024961072f565b6040516101dc9190612c6d565b34801561026257600080fd5b50600254610205906001600160a01b031681565b34801561028257600080fd5b5061029661029136600461241b565b610759565b005b3480156102a457600080fd5b506102496102b33660046126dd565b6107dd565b3480156102c457600080fd5b506102966102d336600461241b565b6107f2565b3480156102e457600080fd5b506102966102f33660046126fe565b610883565b34801561030457600080fd5b506102966103133660046126fe565b6108a4565b34801561032457600080fd5b5061029661033336600461277d565b6108e3565b34801561034457600080fd5b50610296610967565b34801561035957600080fd5b5061029661036836600461241b565b61097d565b34801561037957600080fd5b506102496103883660046126dd565b610a01565b61024961039b36600461243c565b610a46565b3480156103ac57600080fd5b506101cf610a95565b3480156103c157600080fd5b506102966103d03660046127bf565b610aa5565b3480156103e157600080fd5b506102966103f036600461241b565b610af2565b34801561040157600080fd5b50600954610415906001600160a01b031681565b6040516101dc9190612d4b565b34801561042e57600080fd5b506101cf61043d36600461241b565b60056020526000908152604090205460ff1681565b34801561045e57600080fd5b50610296610b4f565b34801561047357600080fd5b50610249610482366004612632565b610b62565b34801561049357600080fd5b506101cf6104a236600461241b565b600b6020526000908152604090205460ff1681565b3480156104c357600080fd5b506101cf6104d23660046126fe565b610c21565b3480156104e357600080fd5b506102966104f236600461241b565b610c4a565b34801561050357600080fd5b50600354610205906001600160a01b031681565b34801561052357600080fd5b50610249600081565b34801561053857600080fd5b50600154610205906001600160a01b031681565b34801561055857600080fd5b5061029661056736600461241b565b610db7565b34801561057857600080fd5b5061029661058736600461241b565b610e63565b34801561059857600080fd5b506102966105a73660046126fe565b610ef2565b3480156105b857600080fd5b50600754610205906001600160a01b031681565b3480156105d857600080fd5b506102966105e736600461241b565b610f0e565b3480156105f857600080fd5b5061029661060736600461241b565b610f92565b34801561061857600080fd5b506102496106273660046126dd565b600a6020526000908152604090205481565b34801561064557600080fd5b50600454610205906001600160a01b031681565b610249610667366004612541565b611016565b60006001600160e01b03198216637965db0b60e01b148061069d57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600681815481106106b357600080fd5b6000918252602090912001546001600160a01b0316905081565b6060600680548060200260200160405190810160405280929190818152602001828054801561072557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610707575b5050505050905090565b600061073961105f565b610741611086565b61074a336110b0565b90506107566001600855565b90565b600061076481611180565b6001600160a01b03821661078b5760405163d92e233d60e01b815260040160405180910390fd5b6003546001600160a01b03838116911614156107ba5760405163c23f6ccb60e01b815260040160405180910390fd5b50600380546001600160a01b0319166001600160a01b0392909216919091179055565b60009081526020819052604090206001015490565b60006107fd81611180565b6001600160a01b0382166108245760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b0382166000908152600b602052604090205460ff161561085e5760405163f411c32760e01b815260040160405180910390fd5b506001600160a01b03166000908152600b60205260409020805460ff19166001179055565b61088c826107dd565b61089581611180565b61089f838361118a565b505050565b6001600160a01b03811633146108d55760405162461bcd60e51b81526004016108cc90612e0a565b60405180910390fd5b6108df828261120e565b5050565b60006108ee81611180565b6001600160a01b0382166109155760405163d92e233d60e01b815260040160405180910390fd5b6009546001600160a01b03838116911614156109445760405163c23f6ccb60e01b815260040160405180910390fd5b50600980546001600160a01b0319166001600160a01b0392909216919091179055565b600061097281611180565b61097a611273565b50565b600061098881611180565b6001600160a01b0382166109af5760405163d92e233d60e01b815260040160405180910390fd5b6001546001600160a01b03838116911614156109de5760405163c23f6ccb60e01b815260040160405180910390fd5b50600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000818152600a60205260408120548061069d5750506000805250600a6020527f13da86008ba1c6922daee3e07db95305ef49ebced9f5467a0b8613fcc6b343e35490565b6000610a5061105f565b610a58611086565b610a6c8a610a678c8a8a610b62565b6112c2565b610a7c898989898989898961146e565b9050610a886001600855565b9998505050505050505050565b600754600160a01b900460ff1690565b6000610ab081611180565b6000838152600a6020526040902054821415610adf5760405163c23f6ccb60e01b815260040160405180910390fd5b506000918252600a602052604090912055565b6000610afd81611180565b6004546001600160a01b0383811691161415610b2c5760405163c23f6ccb60e01b815260040160405180910390fd5b50600480546001600160a01b0319166001600160a01b0392909216919091179055565b6000610b5a81611180565b61097a61162c565b600080610b7883610b7286610a01565b9061166f565b905080610b89576000915050610c1a565b6003546001600160a01b038681169116148015610bbe57506001600160a01b03851660009081526005602052604090205460ff165b15610bca579050610c1a565b6001600160a01b03851660009081526005602052604090205460ff1615610bfd57610bf5858261167b565b915050610c1a565b84604051630ac29ab760e31b81526004016108cc9190612bd7565b505b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6000610c5581611180565b6001600160a01b03821660009081526005602052604090205460ff16610c9057816040516318317bd560e01b81526004016108cc9190612bd7565b6001600160a01b0382166000908152600560205260408120805460ff191690555b60065481101561089f57826001600160a01b031660068281548110610cd857610cd861300d565b6000918252602090912001546001600160a01b03161415610da55760068054610d0390600190612ef6565b81548110610d1357610d1361300d565b600091825260209091200154600680546001600160a01b039092169183908110610d3f57610d3f61300d565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506006805480610d7e57610d7e612ff7565b600082815260209020810160001990810180546001600160a01b0319169055019055505050565b80610daf81612fb0565b915050610cb1565b6000610dc281611180565b6001600160a01b03821660009081526005602052604090205460ff1615610dfc5760405163f411c32760e01b815260040160405180910390fd5b506001600160a01b03166000818152600560205260408120805460ff191660019081179091556006805491820181559091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b0319169091179055565b6000610e6e81611180565b6001600160a01b038216610e955760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b0382166000908152600b602052604090205460ff16610ed057816040516324b1f80560e21b81526004016108cc9190612bd7565b506001600160a01b03166000908152600b60205260409020805460ff19169055565b610efb826107dd565b610f0481611180565b61089f838361120e565b6000610f1981611180565b6001600160a01b038216610f405760405163d92e233d60e01b815260040160405180910390fd5b6002546001600160a01b0383811691161415610f6f5760405163c23f6ccb60e01b815260040160405180910390fd5b50600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000610f9d81611180565b6001600160a01b038216610fc45760405163d92e233d60e01b815260040160405180910390fd5b6007546001600160a01b0383811691161415610ff35760405163c23f6ccb60e01b815260040160405180910390fd5b50600780546001600160a01b0319166001600160a01b0392909216919091179055565b600061102061105f565b611028611086565b61103789610a678b8a8a610b62565b611047338989898989898961171a565b90506110536001600855565b98975050505050505050565b611067610a95565b156110845760405162461bcd60e51b81526004016108cc90612dca565b565b600260085414156110a95760405162461bcd60e51b81526004016108cc90612dfa565b6002600855565b6009546040516335313c2160e11b815260009182916001600160a01b0390911690636a627842906110e5908690600401612bd7565b602060405180830381600087803b1580156110ff57600080fd5b505af1158015611113573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611137919061279e565b9050826001600160a01b03167fe6fdadff80ae44015b9aa37d4edb70f70a8db7535a0df98de6dc5ffd11ec0c2f826040516111729190612c6d565b60405180910390a292915050565b61097a813361181d565b6111948282610c21565b6108df576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556111ca3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6112188282610c21565b156108df576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b61127b611876565b6007805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516112b89190612bd7565b60405180910390a1565b806112cb575050565b6001600160a01b03821660009081526005602052604090205460ff166113065781604051630ac29ab760e31b81526004016108cc9190612bd7565b6001600160a01b0382166114525780341015611337578060405163091a6d0f60e01b81526004016108cc9190612c6d565b6007546040516000916001600160a01b031690839061135590612b7d565b60006040518083038185875af1925050503d8060008114611392576040519150601f19603f3d011682016040523d82523d6000602084013e611397565b606091505b50509050806113b9576040516312171d8360e31b815260040160405180910390fd5b8134111561089f5760006113cd348461189a565b9050336001600160a01b0316816040516113e690612b7d565b60006040518083038185875af1925050503d8060008114611423576040519150601f19603f3d011682016040523d82523d6000602084013e611428565b606091505b5050809250508161144c57604051633c31275160e21b815260040160405180910390fd5b50505050565b6007546108df906001600160a01b0384811691339116846118a6565b60006114be6114808a8a8a8a8a6118fe565b84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250899250611973915050565b6009546040805163b507d48160e01b815290516000926001600160a01b03169163b507d481916004808301926020929190829003018186803b15801561150357600080fd5b505afa158015611517573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153b919061275c565b90506000816001600160a01b0316633dd904308c8c8b8b6040518563ffffffff1660e01b81526004016115719493929190612c0d565b602060405180830381600087803b15801561158b57600080fd5b505af115801561159f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c3919061279e565b9050896040516115d39190612b3e565b60405180910390208b6001600160a01b03167f32044e50415e96c0068a718b8df9993f4803b2e54518d56c52ef6438a91619aa838b604051611616929190612e3a565b60405180910390a39a9950505050505050505050565b61163461105f565b6007805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586112ab3390565b6000610c1a8284612ed7565b6001600160a01b03821660009081526005602052604081205460ff1615806116b057506003546001600160a01b038481169116145b156116d0578260405163961c9a4f60e01b81526004016108cc9190612bd7565b6001600160a01b038316611702576002546003546116fb916001600160a01b039081169116846119ee565b905061069d565b6003546116fb9084906001600160a01b0316846119ee565b600061172c6114808a8a8a8a8a6118fe565b6009546040516328a0a29f60e11b81526000916001600160a01b031690635141453e90611763908d908d908c908c90600401612c0d565b602060405180830381600087803b15801561177d57600080fd5b505af1158015611791573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b5919061279e565b9050886040516117c59190612b3e565b60405180910390208a6001600160a01b03167f60579b770d8bde9b5f57c468ffb4acb023252b190304137b45b86b72f66a1940838a604051611808929190612e3a565b60405180910390a39998505050505050505050565b6118278282610c21565b6108df5761183481611aac565b61183f836020611abe565b604051602001611850929190612b85565b60408051601f198184030181529082905262461bcd60e51b82526108cc91600401612d59565b61187e610a95565b6110845760405162461bcd60e51b81526004016108cc90612d8a565b6000610c1a8284612ef6565b61144c846323b872dd60e01b8585856040516024016118c793929190612be5565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611c29565b60006119677f7503a77cf463259868f167e5b04bb93b908e722f1d532d8a0635f83ea802a2c18787805190602001208787878051906020012060405160200161194c96959493929190612c7b565b60405160208183030381529060405280519060200120611cb8565b90505b95945050505050565b600061197f8484611ccb565b9050816001600160a01b0316816001600160a01b0316146119b357604051638baa579f60e01b815260040160405180910390fd5b6001600160a01b0381166000908152600b602052604090205460ff1661144c5780604051634a0bfec160e01b81526004016108cc9190612bd7565b60006060806119fd8686611ce7565b6001546040516307c0329d60e21b81529192506001600160a01b031690631f00ca7490611a309087908590600401612e1a565b60006040518083038186803b158015611a4857600080fd5b505afa158015611a5c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a849190810190612682565b915081600081518110611a9957611a9961300d565b6020026020010151925050509392505050565b606061069d6001600160a01b03831660145b60606000611acd836002612ed7565b611ad8906002612ebf565b6001600160401b03811115611aef57611aef613023565b6040519080825280601f01601f191660200182016040528015611b19576020820181803683370190505b509050600360fc1b81600081518110611b3457611b3461300d565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611b6357611b6361300d565b60200101906001600160f81b031916908160001a9053506000611b87846002612ed7565b611b92906001612ebf565b90505b6001811115611c0a576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611bc657611bc661300d565b1a60f81b828281518110611bdc57611bdc61300d565b60200101906001600160f81b031916908160001a90535060049490941c93611c0381612f6c565b9050611b95565b508315610c1a5760405162461bcd60e51b81526004016108cc90612d7a565b6000611c7e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611e799092919063ffffffff16565b80519091501561089f5780806020019051810190611c9c91906126bc565b61089f5760405162461bcd60e51b81526004016108cc90612dea565b600061069d611cc5611e90565b83611f83565b6000806000611cda8585611fb6565b91509150610c1881611ffc565b6002546060906001600160a01b0384811691161480611d1357506002546001600160a01b038381169116145b15611ddd57604080516002808252606082018352600092602083019080368337019050506002549091506001600160a01b03858116911614611d555783611d62565b6002546001600160a01b03165b81600081518110611d7557611d7561300d565b6001600160a01b039283166020918202929092010152600254848216911614611d9e5782611dab565b6002546001600160a01b03165b81600181518110611dbe57611dbe61300d565b6001600160a01b0390921660209283029190910190910152905061069d565b60408051600380825260808201909252600091602082016060803683370190505090508381600081518110611e1457611e1461300d565b6001600160a01b039283166020918202929092010152600254825191169082906001908110611e4557611e4561300d565b60200260200101906001600160a01b031690816001600160a01b0316815250508281600281518110611dbe57611dbe61300d565b6060611e8884846000856120af565b949350505050565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015611ee957507f000000000000000000000000000000000000000000000000000000000000000046145b15611f1357507f000000000000000000000000000000000000000000000000000000000000000090565b611f7e7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061214b565b905090565b60008282604051602001611f98929190612b4a565b60405160208183030381529060405280519060200120905092915050565b600080825160411415611fed5760208301516040840151606085015160001a611fe187828585612185565b94509450505050611ff5565b506000905060025b9250929050565b600081600481111561201057612010612fe1565b14156120195750565b600181600481111561202d5761202d612fe1565b141561204b5760405162461bcd60e51b81526004016108cc90612d6a565b600281600481111561205f5761205f612fe1565b141561207d5760405162461bcd60e51b81526004016108cc90612d9a565b600381600481111561209157612091612fe1565b141561097a5760405162461bcd60e51b81526004016108cc90612daa565b6060824710156120d15760405162461bcd60e51b81526004016108cc90612dba565b600080866001600160a01b031685876040516120ed9190612b3e565b60006040518083038185875af1925050503d806000811461212a576040519150601f19603f3d011682016040523d82523d6000602084013e61212f565b606091505b509150915061214087838387612232565b979650505050505050565b60008383834630604051602001612166959493929190612cca565b6040516020818303038152906040528051906020012090509392505050565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b038311156121b25750600090506003612229565b6000600187878787604051600081526020016040526040516121d79493929190612d16565b6020604051602081039080840390855afa1580156121f9573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661222257600060019250925050612229565b9150600090505b94509492505050565b6060831561226e578251612267576001600160a01b0385163b6122675760405162461bcd60e51b81526004016108cc90612dda565b5081611e88565b611e8883838151156122835781518083602001fd5b8060405162461bcd60e51b81526004016108cc9190612d59565b60006122b06122ab84612e71565b612e55565b905080838252602082019050828560208602820111156122d2576122d2600080fd5b60005b858110156122fe57816122e88882612410565b84525060209283019291909101906001016122d5565b5050509392505050565b60006123166122ab84612e94565b90508281526020810184848401111561233157612331600080fd5b610c18848285612f34565b803561069d81613043565b600082601f83011261235b5761235b600080fd5b8151611e8884826020860161229d565b805161069d81613057565b803561069d8161305f565b803561069d81613065565b60008083601f8401126123a1576123a1600080fd5b5081356001600160401b038111156123bb576123bb600080fd5b602083019150836001820283011115611ff557611ff5600080fd5b805161069d81613075565b803561069d81613075565b600082601f83011261240057612400600080fd5b8135611e88848260208601612308565b805161069d8161305f565b60006020828403121561243057612430600080fd5b6000611e88848461233c565b60008060008060008060008060006101008a8c03121561245e5761245e600080fd5b600061246a8c8c61233c565b995050602061247b8c828d0161233c565b98505060408a01356001600160401b0381111561249a5761249a600080fd5b6124a68c828d016123ec565b97505060606124b78c828d01612376565b96505060806124c88c828d01612376565b95505060a08a01356001600160401b038111156124e7576124e7600080fd5b6124f38c828d016123ec565b94505060c06125048c828d0161233c565b93505060e08a01356001600160401b0381111561252357612523600080fd5b61252f8c828d0161238c565b92509250509295985092959850929598565b60008060008060008060008060e0898b03121561256057612560600080fd5b600061256c8b8b61233c565b98505060208901356001600160401b0381111561258b5761258b600080fd5b6125978b828c016123ec565b97505060406125a88b828c01612376565b96505060606125b98b828c01612376565b95505060808901356001600160401b038111156125d8576125d8600080fd5b6125e48b828c016123ec565b94505060a06125f58b828c0161233c565b93505060c08901356001600160401b0381111561261457612614600080fd5b6126208b828c0161238c565b92509250509295985092959890939650565b60008060006060848603121561264a5761264a600080fd5b6000612656868661233c565b935050602061266786828701612376565b925050604061267886828701612376565b9150509250925092565b60006020828403121561269757612697600080fd5b81516001600160401b038111156126b0576126b0600080fd5b611e8884828501612347565b6000602082840312156126d1576126d1600080fd5b6000611e88848461236b565b6000602082840312156126f2576126f2600080fd5b6000611e888484612376565b6000806040838503121561271457612714600080fd5b60006127208585612376565b92505060206127318582860161233c565b9150509250929050565b60006020828403121561275057612750600080fd5b6000611e888484612381565b60006020828403121561277157612771600080fd5b6000611e8884846123d6565b60006020828403121561279257612792600080fd5b6000611e8884846123e1565b6000602082840312156127b3576127b3600080fd5b6000611e888484612410565b600080604083850312156127d5576127d5600080fd5b60006127e18585612376565b925050602061273185828601612376565b60006127fe8383612806565b505060200190565b61280f81612f0d565b82525050565b600061281f825190565b80845260209384019383018060005b8381101561285357815161284288826127f2565b97506020830192505060010161282e565b509495945050505050565b80151561280f565b8061280f565b6000612876825190565b612884818560208601612f40565b9290920192915050565b61280f81612f29565b60006128a1825190565b8084526020840193506128b8818560208601612f40565b6128c181613039565b9093019392505050565b601881526000602082017745434453413a20696e76616c6964207369676e617475726560401b815291505b5060200190565b60208082527f537472696e67733a20686578206c656e67746820696e73756666696369656e74910190815260006128f6565b601481526000602082017314185d5cd8589b194e881b9bdd081c185d5cd95960621b815291506128f6565b601f81526000602082017f45434453413a20696e76616c6964207369676e6174757265206c656e67746800815291506128f6565b602281526000602082017f45434453413a20696e76616c6964207369676e6174757265202773272076616c815261756560f01b602082015291505b5060400190565b602681526000602082017f416464726573733a20696e73756666696369656e742062616c616e636520666f8152651c8818d85b1b60d21b602082015291506129c9565b601081526000602082016f14185d5cd8589b194e881c185d5cd95960821b815291506128f6565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000815291506128f6565b602a81526000602082017f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b602082015291506129c9565b601f81526000602082017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00815291506128f6565b602f81526000602082017f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636581526e103937b632b9903337b91039b2b63360891b602082015291506129c9565b60ff811661280f565b6000610c1a828461286c565b61190160f01b81526002016000612b6282858061280f565b602082019150612b7382848061280f565b5060200192915050565b60008161069d565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b81526017016000612bb1828561286c565b7001034b99036b4b9b9b4b733903937b6329607d1b81526011019150611e88828461286c565b6020810161069d8284612806565b60608101612bf38286612806565b612c006020830185612806565b611e886040830184612866565b60808101612c1b8287612806565b8181036020830152612c2d8186612897565b9050612c3c6040830185612866565b81810360608301526119678184612897565b60208082528101610c1a8184612815565b6020810161069d828461285e565b6020810161069d8284612866565b60c08101612c898289612866565b612c966020830188612806565b612ca36040830187612866565b612cb06060830186612866565b612cbd6080830185612866565b61214060a0830184612866565b60a08101612cd88288612866565b612ce56020830187612866565b612cf26040830186612866565b612cff6060830185612866565b612d0c6080830184612806565b9695505050505050565b60808101612d248287612866565b612d316020830186612b35565b612d3e6040830185612866565b61196a6060830184612866565b6020810161069d828461288e565b60208082528101610c1a8184612897565b6020808252810161069d816128cb565b6020808252810161069d816128fd565b6020808252810161069d8161292f565b6020808252810161069d8161295a565b6020808252810161069d8161298e565b6020808252810161069d816129d0565b6020808252810161069d81612a13565b6020808252810161069d81612a3a565b6020808252810161069d81612a6e565b6020808252810161069d81612ab5565b6020808252810161069d81612ae9565b60408101612e288285612866565b8181036020830152611e888184612815565b60408101612e488285612866565b610c1a6020830184612866565b6000612e6060405190565b9050612e6c8282612f83565b919050565b60006001600160401b03821115612e8a57612e8a613023565b5060209081020190565b60006001600160401b03821115612ead57612ead613023565b612eb682613039565b60200192915050565b60008219821115612ed257612ed2612fcb565b500190565b6000816000190483118215151615612ef157612ef1612fcb565b500290565b600082821015612f0857612f08612fcb565b500390565b60006001600160a01b03821661069d565b600061069d82612f0d565b600061069d82612f1e565b82818337506000910152565b60005b83811015612f5b578181015183820152602001612f43565b8381111561144c5750506000910152565b600081612f7b57612f7b612fcb565b506000190190565b612f8c82613039565b81018181106001600160401b0382111715612fa957612fa9613023565b6040525050565b6000600019821415612fc457612fc4612fcb565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b601f01601f191690565b61304c81612f0d565b811461097a57600080fd5b80151561304c565b8061304c565b6001600160e01b0319811661304c565b61304c81612f1e56fea2646970667358221220a09604646280cb07e84326b73b53a8c3c199909b99777f993adc422608f19ed364736f6c63430008070033",
  "devdoc": {
    "author": "Masa Finance",
    "details": "From this smart contract we can mint new Soulbound Identities and Soul Name NFTs. This minting can be done paying a fee in ETH, USDC or MASA",
    "kind": "dev",
    "methods": {
      "addAuthority(address)": {
        "details": "The caller must have the admin role to call this function",
        "params": {
          "_authority": "New authority to add"
        }
      },
      "constructor": {
        "details": "Creates a new Soul Store, that has the role to minting new Soulbound Identities and Soul Name NFTs, paying a fee",
        "params": {
          "_nameRegistrationPricePerYear": "Price of the default name registering in stable coin per year",
          "_soulBoundIdentity": "Address of the Soulbound identity contract",
          "admin": "Administrator of the smart contract",
          "paymentParams": "Payment gateway params"
        }
      },
      "disablePaymentMethod(address)": {
        "details": "The caller must have the admin role to call this function",
        "params": {
          "_paymentMethod": "Token to remove"
        }
      },
      "enablePaymentMethod(address)": {
        "details": "The caller must have the admin role to call this function",
        "params": {
          "_paymentMethod": "New token to add"
        }
      },
      "getEnabledPaymentMethods()": {
        "details": "Returns the address of all available payment methods",
        "returns": {
          "_0": "Array of all enabled payment methods"
        }
      },
      "getNameRegistrationPricePerYear(uint256)": {
        "details": "Returns the price for registering per year in USD for an specific name length",
        "params": {
          "nameLength": "Length of the name"
        },
        "returns": {
          "_0": "Price in stable coin for that name length"
        }
      },
      "getPriceForMintingName(address,uint256,uint256)": {
        "details": "Returns current pricing for name minting for a given name length and years period",
        "params": {
          "nameLength": "Length of the name",
          "paymentMethod": "Address of token that user want to pay",
          "yearsPeriod": "Years of validity of the name"
        },
        "returns": {
          "_0": "Current price of the name minting in the given payment method"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "pause()": {
        "details": "The caller must have the admin role to call this function"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "purchaseIdentity()": {
        "details": "This function allows the purchase of a soulbound identity for free",
        "returns": {
          "_0": "TokenId of the new soulbound identity"
        }
      },
      "purchaseIdentityAndName(address,string,uint256,uint256,string,address,bytes)": {
        "details": "This function allows the purchase of a soulbound identity and name using stable coin (USDC), native token (ETH) or utility token (MASA)",
        "params": {
          "authorityAddress": "Address of the authority",
          "name": "Name of the new soul name",
          "nameLength": "Length of the name",
          "paymentMethod": "Address of token that user want to pay",
          "signature": "Signature of the authority",
          "tokenURI": "URI of the NFT",
          "yearsPeriod": "Years of validity of the name"
        },
        "returns": {
          "_0": "TokenId of the new soulbound identity"
        }
      },
      "purchaseName(address,address,string,uint256,uint256,string,address,bytes)": {
        "details": "This function allows the purchase of a soul name using stable coin (USDC), native token (ETH) or utility token (MASA)",
        "params": {
          "authorityAddress": "Address of the authority",
          "name": "Name of the new soul name",
          "nameLength": "Length of the name",
          "paymentMethod": "Address of token that user want to pay",
          "signature": "Signature of the authority",
          "to": "Address of the owner of the new soul name",
          "tokenURI": "URI of the NFT",
          "yearsPeriod": "Years of validity of the name"
        },
        "returns": {
          "_0": "TokenId of the new sou name"
        }
      },
      "removeAuthority(address)": {
        "details": "The caller must have the admin role to call this function",
        "params": {
          "_authority": "Authority to remove"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setMasaToken(address)": {
        "details": "The caller must have the admin role to call this function It can be set to address(0) to disable paying in MASA",
        "params": {
          "_masaToken": "New utility token to pay the fee in"
        }
      },
      "setNameRegistrationPricePerYear(uint256,uint256)": {
        "details": "The caller must have the admin role to call this function",
        "params": {
          "_nameLength": "Length of the name",
          "_nameRegistrationPricePerYear": "New price of the name registering per one year in stable coin for that name length per year"
        }
      },
      "setReserveWallet(address)": {
        "details": "The caller must have the admin role to call this function",
        "params": {
          "_reserveWallet": "New reserve wallet"
        }
      },
      "setSoulboundIdentity(address)": {
        "details": "The caller must have the admin role to call this function",
        "params": {
          "_soulboundIdentity": "New SoulboundIdentity contract address"
        }
      },
      "setStableCoin(address)": {
        "details": "The caller must have the admin role to call this function",
        "params": {
          "_stableCoin": "New stable coin to pay the fee in"
        }
      },
      "setSwapRouter(address)": {
        "details": "The caller must have the admin role to call this function",
        "params": {
          "_swapRouter": "New swap router address"
        }
      },
      "setWrappedNativeToken(address)": {
        "details": "The caller must have the admin role to call this function",
        "params": {
          "_wrappedNativeToken": "New wrapped native token address"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "unpause()": {
        "details": "The caller must have the admin role to call this function"
      }
    },
    "title": "Soul Store",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addAuthority(address)": {
        "notice": "Adds a new authority to the list of authorities"
      },
      "constructor": {
        "notice": "Creates a new Soul Store"
      },
      "disablePaymentMethod(address)": {
        "notice": "Removes a token as a valid payment method"
      },
      "enablePaymentMethod(address)": {
        "notice": "Adds a new token as a valid payment method"
      },
      "getEnabledPaymentMethods()": {
        "notice": "Returns all available payment methods"
      },
      "getNameRegistrationPricePerYear(uint256)": {
        "notice": "Returns the price of register a name per year in stable coin for an specific length"
      },
      "getPriceForMintingName(address,uint256,uint256)": {
        "notice": "Returns the price of the name minting"
      },
      "pause()": {
        "notice": "Pauses the smart contract"
      },
      "purchaseIdentity()": {
        "notice": "Mints a new Soulbound Identity purchasing it"
      },
      "purchaseIdentityAndName(address,string,uint256,uint256,string,address,bytes)": {
        "notice": "Mints a new Soulbound Identity and Name purchasing it"
      },
      "purchaseName(address,address,string,uint256,uint256,string,address,bytes)": {
        "notice": "Mints a new Soul Name purchasing it"
      },
      "removeAuthority(address)": {
        "notice": "Removes an authority from the list of authorities"
      },
      "setMasaToken(address)": {
        "notice": "Sets the utility token to pay the fee in (MASA)"
      },
      "setNameRegistrationPricePerYear(uint256,uint256)": {
        "notice": "Sets the price of the name registering per one year in stable coin"
      },
      "setReserveWallet(address)": {
        "notice": "Set the reserve wallet"
      },
      "setSoulboundIdentity(address)": {
        "notice": "Sets the SoulboundIdentity contract address linked to this store"
      },
      "setStableCoin(address)": {
        "notice": "Sets the stable coin to pay the fee in (USDC)"
      },
      "setSwapRouter(address)": {
        "notice": "Sets the swap router address"
      },
      "setWrappedNativeToken(address)": {
        "notice": "Sets the wrapped native token address"
      },
      "unpause()": {
        "notice": "Unpauses the smart contract"
      }
    },
    "notice": "Soul Store, that can mint new Soulbound Identities and Soul Name NFTs, paying a fee",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/SoulStore.sol:SoulStore",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 8571,
        "contract": "contracts/SoulStore.sol:SoulStore",
        "label": "swapRouter",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 8573,
        "contract": "contracts/SoulStore.sol:SoulStore",
        "label": "wrappedNativeToken",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 8575,
        "contract": "contracts/SoulStore.sol:SoulStore",
        "label": "stableCoin",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 8577,
        "contract": "contracts/SoulStore.sol:SoulStore",
        "label": "masaToken",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 8581,
        "contract": "contracts/SoulStore.sol:SoulStore",
        "label": "enabledPaymentMethod",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 8584,
        "contract": "contracts/SoulStore.sol:SoulStore",
        "label": "enabledPaymentMethods",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 8586,
        "contract": "contracts/SoulStore.sol:SoulStore",
        "label": "reserveWallet",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 519,
        "contract": "contracts/SoulStore.sol:SoulStore",
        "label": "_paused",
        "offset": 20,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 620,
        "contract": "contracts/SoulStore.sol:SoulStore",
        "label": "_status",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 7034,
        "contract": "contracts/SoulStore.sol:SoulStore",
        "label": "soulboundIdentity",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(ISoulboundIdentity)9331"
      },
      {
        "astId": 7038,
        "contract": "contracts/SoulStore.sol:SoulStore",
        "label": "nameRegistrationPricePerYear",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7042,
        "contract": "contracts/SoulStore.sol:SoulStore",
        "label": "authorities",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ISoulboundIdentity)9331": {
        "encoding": "inplace",
        "label": "contract ISoulboundIdentity",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/SoulStore.sol:SoulStore",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/SoulStore.sol:SoulStore",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}