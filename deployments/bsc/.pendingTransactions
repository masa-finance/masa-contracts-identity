{
  "0x136ca94fa09eb5c1eb83967ccb811a201b22fe8272925ca70b631277428ae8fe": {
    "name": "SoulboundGreen",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "SoulboundGreen",
      "sourceName": "contracts/SoulboundGreen.sol",
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "admin",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "baseTokenURI",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "soulboundIdentity",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "swapRouter",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "wrappedNativeToken",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "stableCoin",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "masaToken",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "projectFeeReceiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "protocolFeeReceiver",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "protocolFeeAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "protocolFeePercent",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PaymentGateway.PaymentParams",
              "name": "paymentParams",
              "type": "tuple"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "name": "AlreadyAdded",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "authority",
              "type": "address"
            }
          ],
          "name": "AuthorityNotExists",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "caller",
              "type": "address"
            }
          ],
          "name": "CallerNotOwner",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "InsufficientEthAmount",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "paymentMethod",
              "type": "address"
            }
          ],
          "name": "InvalidPaymentMethod",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "InvalidShortString",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "InvalidSignature",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            }
          ],
          "name": "InvalidToken",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "erc20token",
              "type": "address"
            }
          ],
          "name": "NonExistingErc20Token",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            }
          ],
          "name": "NotAuthorized",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "NotLinkedToAnIdentitySBT",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "PaymentParamsNotSet",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "ProtocolFeeReceiverNotSet",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "RefundFailed",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "SameValue",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "str",
              "type": "string"
            }
          ],
          "name": "StringTooLong",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "TransferFailed",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "UserMustHaveProtocolOrProjectAdminRole",
          "type": "error"
        },
        {
          "inputs": [],
          "name": "ZeroAddress",
          "type": "error"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "_owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "name": "Burn",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [],
          "name": "EIP712DomainChanged",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "_owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "name": "Mint",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "previousAdminRole",
              "type": "bytes32"
            },
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "newAdminRole",
              "type": "bytes32"
            }
          ],
          "name": "RoleAdminChanged",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "sender",
              "type": "address"
            }
          ],
          "name": "RoleGranted",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "account",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "sender",
              "type": "address"
            }
          ],
          "name": "RoleRevoked",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "authorityAddress",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "signatureDate",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "paymentMethod",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "mintPrice",
              "type": "uint256"
            }
          ],
          "name": "SoulboundGreenMintedToAddress",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "identityId",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "authorityAddress",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "signatureDate",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "address",
              "name": "paymentMethod",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "mintPrice",
              "type": "uint256"
            }
          ],
          "name": "SoulboundGreenMintedToIdentity",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "DEFAULT_ADMIN_ROLE",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "PROJECT_ADMIN_ROLE",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_authority",
              "type": "address"
            }
          ],
          "name": "addAuthority",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "addLinkPrice",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "addLinkPriceMASA",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "authorities",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "burn",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_paymentMethod",
              "type": "address"
            }
          ],
          "name": "disablePaymentMethod",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "eip712Domain",
          "outputs": [
            {
              "internalType": "bytes1",
              "name": "fields",
              "type": "bytes1"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "version",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "verifyingContract",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "salt",
              "type": "bytes32"
            },
            {
              "internalType": "uint256[]",
              "name": "extensions",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_paymentMethod",
              "type": "address"
            }
          ],
          "name": "enablePaymentMethod",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "enabledPaymentMethod",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "name": "enabledPaymentMethods",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "exists",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getEnabledPaymentMethods",
          "outputs": [
            {
              "internalType": "address[]",
              "name": "",
              "type": "address[]"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "getIdentityId",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "paymentMethod",
              "type": "address"
            }
          ],
          "name": "getMintPrice",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "paymentMethod",
              "type": "address"
            }
          ],
          "name": "getMintPriceWithProtocolFee",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "protocolFee",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "paymentMethod",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "getProtocolFee",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            }
          ],
          "name": "getRoleAdmin",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "grantRole",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "hasRole",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "masaToken",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "paymentMethod",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "identityId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "authorityAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "signatureDate",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "name": "mint",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "payable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "paymentMethod",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "authorityAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "signatureDate",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "name": "mint",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "payable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "mintPrice",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "mintPriceMASA",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "ownerOf",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "projectFeeReceiver",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "protocolFeeAmount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "protocolFeePercent",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "protocolFeeReceiver",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "queryLinkPrice",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "queryLinkPriceMASA",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_authority",
              "type": "address"
            }
          ],
          "name": "removeAuthority",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "renounceRole",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "role",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "revokeRole",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_addLinkPrice",
              "type": "uint256"
            }
          ],
          "name": "setAddLinkPrice",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_addLinkPriceMASA",
              "type": "uint256"
            }
          ],
          "name": "setAddLinkPriceMASA",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_masaToken",
              "type": "address"
            }
          ],
          "name": "setMasaToken",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_mintPrice",
              "type": "uint256"
            }
          ],
          "name": "setMintPrice",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_mintPriceMASA",
              "type": "uint256"
            }
          ],
          "name": "setMintPriceMASA",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_projectFeeReceiver",
              "type": "address"
            }
          ],
          "name": "setProjectFeeReceiver",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_protocolFeeAmount",
              "type": "uint256"
            }
          ],
          "name": "setProtocolFeeAmount",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_protocolFeePercent",
              "type": "uint256"
            }
          ],
          "name": "setProtocolFeePercent",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_protocolFeeReceiver",
              "type": "address"
            }
          ],
          "name": "setProtocolFeeReceiver",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_queryLinkPrice",
              "type": "uint256"
            }
          ],
          "name": "setQueryLinkPrice",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_queryLinkPriceMASA",
              "type": "uint256"
            }
          ],
          "name": "setQueryLinkPriceMASA",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_soulboundIdentity",
              "type": "address"
            }
          ],
          "name": "setSoulboundIdentity",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_stableCoin",
              "type": "address"
            }
          ],
          "name": "setStableCoin",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_swapRouter",
              "type": "address"
            }
          ],
          "name": "setSwapRouter",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_wrappedNativeToken",
              "type": "address"
            }
          ],
          "name": "setWrappedNativeToken",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "soulboundIdentity",
          "outputs": [
            {
              "internalType": "contract ISoulboundIdentity",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "stableCoin",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "swapRouter",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "name": "tokenByIndex",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "name": "tokenOfOwnerByIndex",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "tokenURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "wrappedNativeToken",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        }
      ],
      "bytecode": "0x6101606040523480156200001257600080fd5b5060405162004ea738038062004ea78339810160408190526200003591620006f3565b8585858585856040518060400160405280600e81526020016d29b7bab63137bab73223b932b2b760911b815250604051806040016040528060058152602001640312e302e360dc1b815250878787878787848487836200009f6000801b836200023b60201b60201c565b8051600180546001600160a01b03199081166001600160a01b039384161790915560208084015160028054841691851691909117905560408401516003805484169185169190911790556060840151600480548416918516919091179055608084015160078054841691851691909117905560a084015160088054909316931692909217905560c082015160095560e090910151600a5583516200014a9250600b91850190620003db565b5080516200016090600c906020840190620003db565b5062000172915060009050876200023b565b825162000187906013906020860190620003db565b5081601460006101000a8154816001600160a01b0302191690836001600160a01b03160217905550505050505050620001d0601b83620002dc60201b62001c1a1790919060201c565b61012052620001ed81601c620002dc602090811b62001c1a17901c565b61014052815160208084019190912060e052815190820120610100524660a0526200021762000330565b6080525050503060601b60c05250506001601f555062000932975050505050505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620002d8576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620002973390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000602083511015620002fc57620002f4836200038c565b90506200032a565b826200031383620003d860201b62001c511760201c565b8151620003249260200190620003db565b5060ff90505b92915050565b60e0516101005160405160009262000371927f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f9246903090602001620007f3565b60405160208183030381529060405280519060200120905090565b600080829050601f81511115620003c3578260405163305a27a960e01b8152600401620003ba919062000882565b60405180910390fd5b8051620003d082620008a7565b179392505050565b90565b828054620003e99062000901565b90600052602060002090601f0160209004810192826200040d576000855562000458565b82601f106200042857805160ff191683800117855562000458565b8280016001018555821562000458579182015b82811115620004585782518255916020019190600101906200043b565b50620004669291506200046a565b5090565b5b808211156200046657600081556001016200046b565b60006001600160a01b0382166200032a565b6200049e8162000481565b8114620004aa57600080fd5b50565b80516200032a8162000493565b601f01601f191690565b634e487b7160e01b600052604160045260246000fd5b620004e582620004ba565b81018181106001600160401b0382111715620005055762000505620004c4565b6040525050565b60006200051860405190565b9050620005268282620004da565b919050565b60006001600160401b03821115620005475762000547620004c4565b6200055282620004ba565b60200192915050565b60005b83811015620005785781810151838201526020016200055e565b8381111562000588576000848401525b50505050565b6000620005a56200059f846200052b565b6200050c565b905082815260208101848484011115620005c257620005c2600080fd5b620005cf8482856200055b565b509392505050565b600082601f830112620005ed57620005ed600080fd5b8151620005ff8482602086016200058e565b949350505050565b806200049e565b80516200032a8162000607565b60006101008284031215620006335762000633600080fd5b620006406101006200050c565b90506000620006508484620004ad565b82525060206200066384848301620004ad565b60208301525060406200067984828501620004ad565b60408301525060606200068f84828501620004ad565b6060830152506080620006a584828501620004ad565b60808301525060a0620006bb84828501620004ad565b60a08301525060c0620006d1848285016200060e565b60c08301525060e0620006e7848285016200060e565b60e08301525092915050565b6000806000806000806101a08789031215620007125762000712600080fd5b6000620007208989620004ad565b96505060208701516001600160401b03811115620007415762000741600080fd5b6200074f89828a01620005d7565b95505060408701516001600160401b03811115620007705762000770600080fd5b6200077e89828a01620005d7565b94505060608701516001600160401b038111156200079f576200079f600080fd5b620007ad89828a01620005d7565b9350506080620007c089828a01620004ad565b92505060a0620007d389828a016200061b565b9150509295509295509295565b805b82525050565b620007e28162000481565b60a08101620008038288620007e0565b620008126020830187620007e0565b620008216040830186620007e0565b620008306060830185620007e0565b6200083f6080830184620007e8565b9695505050505050565b600062000854825190565b8084526020840193506200086d8185602086016200055b565b6200087881620004ba565b9093019392505050565b6020808252810162000895818462000849565b9392505050565b60006200032a825190565b6000620008b2825190565b60208301620008c1816200089c565b92506020821015620008e457620008df600019836020036008021b90565b831692505b5050919050565b634e487b7160e01b600052602260045260246000fd5b6002810460018216806200091657607f821691505b602082108114156200092c576200092c620008eb565b50919050565b60805160a05160c05160601c60e05161010051610120516101405161451762000990600039600061153c01526000611511015260006130a40152600061308301526000612ce901526000612d1301526000612d3d01526145176000f3fe6080604052600436106102c75760003560e01c8062bdfde5146102cc57806301ffc9a7146102ee5780630513c3e91461032457806306fdde0314610351578063102005191461037357806313150b481461039557806317fcb39b146103b857806318160ddd146103d85780631830e881146103ed5780631f37c1241461040357806320d558aa14610419578063217a2c7b1461042c57806323af4e171461044c578063248a9ca31461046c57806326defa731461048c578063289c686b146104ac5780632f2ff15d146104cc5780632f745c59146104ec57806336568abe1461050c57806339a51be51461052c5780633ad3033e1461054c5780633c72ae701461056c578063412736571461058c57806341c04d5e146105ac57806342966c68146105ce57806346877b1a146105ee5780634962a1581461060e5780634f558e791461062e5780634f6ccce71461064e5780636352211e1461066e5780636817c76c1461068e57806370a08231146106a4578063719d0f2b146106c457806376ad1997146106e4578063776d1a541461070457806377bed5ed1461071a5780637a0d1646146107475780637ad09dff146107775780637db8cb681461078a57806384b0196e146107aa5780638d018461146107d25780638ec9c93b146107f257806391223d691461080857806391d148541461083857806394a665e91461085857806395d89b4114610878578063992642e51461088d57806399b589cb146108ad578063a217fddf146108cd578063a4983421146108e2578063b97d6b2314610902578063c1177d1914610918578063c31c9c0714610938578063c86aadb614610958578063c87b56dd14610978578063d544e01014610998578063d547741f146109b8578063d6e6eb9f146109d8578063da058ae3146109ee578063eb93e85514610a0e578063ebda439614610a3c578063f4a0a52814610a5c578063fd48ac8314610a7c575b600080fd5b3480156102d857600080fd5b506102ec6102e736600461365d565b610a9c565b005b3480156102fa57600080fd5b5061030e610309366004613699565b610ad0565b60405161031b91906136c4565b60405180910390f35b34801561033057600080fd5b5061034461033f36600461365d565b610ae1565b60405161031b91906136f2565b34801561035d57600080fd5b50610366610b0b565b60405161031b919061376a565b34801561037f57600080fd5b50610388610b9d565b60405161031b91906137d8565b3480156103a157600080fd5b506103ab601a5481565b60405161031b91906137ef565b3480156103c457600080fd5b50600254610344906001600160a01b031681565b3480156103e457600080fd5b506011546103ab565b3480156103f957600080fd5b506103ab60165481565b34801561040f57600080fd5b506103ab60175481565b6103ab61042736600461385b565b610bfe565b34801561043857600080fd5b506103ab6104473660046138f0565b610d36565b34801561045857600080fd5b506102ec61046736600461392d565b610d49565b34801561047857600080fd5b506103ab61048736600461365d565b610da6565b34801561049857600080fd5b506102ec6104a736600461392d565b610dbb565b3480156104b857600080fd5b506102ec6104c736600461365d565b610e8b565b3480156104d857600080fd5b506102ec6104e736600461394e565b610efe565b3480156104f857600080fd5b506103ab6105073660046138f0565b610f1f565b34801561051857600080fd5b506102ec61052736600461394e565b610f71565b34801561053857600080fd5b50600854610344906001600160a01b031681565b34801561055857600080fd5b506102ec61056736600461392d565b610fa7565b34801561057857600080fd5b506102ec61058736600461365d565b611004565b34801561059857600080fd5b506102ec6105a736600461392d565b611077565b3480156105b857600080fd5b506103ab6000805160206144c283398151915281565b3480156105da57600080fd5b506102ec6105e936600461365d565b6110d4565b3480156105fa57600080fd5b506102ec61060936600461392d565b611106565b34801561061a57600080fd5b506102ec61062936600461365d565b611163565b34801561063a57600080fd5b5061030e61064936600461365d565b6111d6565b34801561065a57600080fd5b506103ab61066936600461365d565b6111e1565b34801561067a57600080fd5b5061034461068936600461365d565b61122f565b34801561069a57600080fd5b506103ab60155481565b3480156106b057600080fd5b506103ab6106bf36600461392d565b611264565b3480156106d057600080fd5b506103ab6106df36600461392d565b6112a8565b3480156106f057600080fd5b506102ec6106ff36600461392d565b6113a8565b34801561071057600080fd5b506103ab60185481565b34801561072657600080fd5b5060145461073a906001600160a01b031681565b60405161031b91906139b6565b34801561075357600080fd5b5061030e61076236600461392d565b60056020526000908152604090205460ff1681565b6103ab6107853660046139c4565b611405565b34801561079657600080fd5b506102ec6107a536600461365d565b611490565b3480156107b657600080fd5b506107bf611503565b60405161031b9796959493929190613a57565b3480156107de57600080fd5b506102ec6107ed36600461392d565b61158c565b3480156107fe57600080fd5b506103ab60095481565b34801561081457600080fd5b5061030e61082336600461392d565b601e6020526000908152604090205460ff1681565b34801561084457600080fd5b5061030e61085336600461394e565b611628565b34801561086457600080fd5b506102ec61087336600461392d565b611651565b34801561088457600080fd5b506103666117be565b34801561089957600080fd5b50600354610344906001600160a01b031681565b3480156108b957600080fd5b50600754610344906001600160a01b031681565b3480156108d957600080fd5b506103ab600081565b3480156108ee57600080fd5b506102ec6108fd36600461365d565b6117cd565b34801561090e57600080fd5b506103ab60195481565b34801561092457600080fd5b506103ab61093336600461365d565b611801565b34801561094457600080fd5b50600154610344906001600160a01b031681565b34801561096457600080fd5b506102ec61097336600461392d565b6118b9565b34801561098457600080fd5b5061036661099336600461365d565b611965565b3480156109a457600080fd5b506102ec6109b336600461392d565b6119cb565b3480156109c457600080fd5b506102ec6109d336600461394e565b611a99565b3480156109e457600080fd5b506103ab600a5481565b3480156109fa57600080fd5b506102ec610a0936600461392d565b611ab5565b348015610a1a57600080fd5b50610a2e610a2936600461392d565b611b12565b60405161031b929190613ac6565b348015610a4857600080fd5b50600454610344906001600160a01b031681565b348015610a6857600080fd5b506102ec610a7736600461365d565b611b34565b348015610a8857600080fd5b506102ec610a9736600461365d565b611ba7565b6000610aa781611c54565b600954821415610aca5760405163c23f6ccb60e01b815260040160405180910390fd5b50600955565b6000610adb82611c5e565b92915050565b60068181548110610af157600080fd5b6000918252602090912001546001600160a01b0316905081565b6060600b8054610b1a90613af7565b80601f0160208091040260200160405190810160405280929190818152602001828054610b4690613af7565b8015610b935780601f10610b6857610100808354040283529160200191610b93565b820191906000526020600020905b815481529060010190602001808311610b7657829003601f168201915b5050505050905090565b60606006805480602002602001604051908101604052809291908181526020018280548015610b9357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610bd7575050505050905090565b6000610c08611c83565b6014546040516331a9108f60e11b81526000916001600160a01b031690636352211e90610c39908a906004016137ef565b60206040518083038186803b158015610c5157600080fd5b505afa158015610c65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c899190613b2f565b90506001600160a01b0381163314610cc057335b60405163060296c760e31b8152600401610cb791906136f2565b60405180910390fd5b6000610cda8983610cd28b8b8b611cad565b8a8989611d0c565b90507fdc7a913fb88ef84b4edaae2c1ccc524475744905088d5c1362bab12c676f9e97818989898d601554604051610d1796959493929190613b50565b60405180910390a1915050610d2c6001601f55565b9695505050505050565b6000610d428383611d9d565b9392505050565b6000610d5481611c54565b6003546001600160a01b0383811691161415610d835760405163c23f6ccb60e01b815260040160405180910390fd5b50600380546001600160a01b0319166001600160a01b0392909216919091179055565b60009081526020819052604090206001015490565b610dc6600033611628565b158015610de85750610de66000805160206144c283398151915233611628565b155b15610e06576040516326f0f48160e01b815260040160405180910390fd5b6001600160a01b038116610e2d5760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b0381166000908152601e602052604090205460ff1615610e675760405163f411c32760e01b815260040160405180910390fd5b6001600160a01b03166000908152601e60205260409020805460ff19166001179055565b610e96600033611628565b158015610eb85750610eb66000805160206144c283398151915233611628565b155b15610ed6576040516326f0f48160e01b815260040160405180910390fd5b806017541415610ef95760405163c23f6ccb60e01b815260040160405180910390fd5b601755565b610f0782610da6565b610f1081611c54565b610f1a8383611e0a565b505050565b6000610f2a83611264565b8210610f485760405162461bcd60e51b8152600401610cb790613be7565b506001600160a01b03919091166000908152600f60209081526040808320938352929052205490565b6001600160a01b0381163314610f995760405162461bcd60e51b8152600401610cb790613c43565b610fa38282611e8e565b5050565b6000610fb281611c54565b6014546001600160a01b0383811691161415610fe15760405163c23f6ccb60e01b815260040160405180910390fd5b50601480546001600160a01b0319166001600160a01b0392909216919091179055565b61100f600033611628565b158015611031575061102f6000805160206144c283398151915233611628565b155b1561104f576040516326f0f48160e01b815260040160405180910390fd5b8060185414156110725760405163c23f6ccb60e01b815260040160405180910390fd5b601855565b600061108281611c54565b6001546001600160a01b03838116911614156110b15760405163c23f6ccb60e01b815260040160405180910390fd5b50600180546001600160a01b0319166001600160a01b0392909216919091179055565b6110de3382611ef3565b6110fa5760405162461bcd60e51b8152600401610cb790613c8a565b61110381611f16565b50565b600061111181611c54565b6008546001600160a01b03838116911614156111405760405163c23f6ccb60e01b815260040160405180910390fd5b50600880546001600160a01b0319166001600160a01b0392909216919091179055565b61116e600033611628565b158015611190575061118e6000805160206144c283398151915233611628565b155b156111ae576040516326f0f48160e01b815260040160405180910390fd5b8060165414156111d15760405163c23f6ccb60e01b815260040160405180910390fd5b601655565b6000610adb82611fb0565b60006111ec60115490565b821061120a5760405162461bcd60e51b8152600401610cb790613ce0565b6011828154811061121d5761121d613cf0565b90600052602060002001549050919050565b6000818152600d60205260408120546001600160a01b031680610adb5760405162461bcd60e51b8152600401610cb790613d32565b60006001600160a01b03821661128c5760405162461bcd60e51b8152600401610cb790613d85565b506001600160a01b03166000908152600e602052604090205490565b600060155460001480156112bc5750601654155b156112c957506000919050565b6004546001600160a01b0383811691161480156112fe57506001600160a01b03821660009081526005602052604090205460ff165b801561130c57506000601654115b1561131957505060165490565b6003546001600160a01b03838116911614801561134e57506001600160a01b03821660009081526005602052604090205460ff165b1561135b57505060155490565b6001600160a01b03821660009081526005602052604090205460ff161561138857610adb82601554611fcd565b81604051630ac29ab760e31b8152600401610cb791906136f2565b919050565b60006113b381611c54565b6004546001600160a01b03838116911614156113e25760405163c23f6ccb60e01b815260040160405180910390fd5b50600480546001600160a01b0319166001600160a01b0392909216919091179055565b600061140f611c83565b6001600160a01b03861633146114255733610c9d565b600061143f88886114378a8a8a612160565b898888611d0c565b90507f7650948236619e679e44bf502d527ec950d1d58336e6babf229f483c57d04672818888888c60155460405161147c96959493929190613d95565b60405180910390a19050610d2c6001601f55565b61149b600033611628565b1580156114bd57506114bb6000805160206144c283398151915233611628565b155b156114db576040516326f0f48160e01b815260040160405180910390fd5b80601a5414156114fe5760405163c23f6ccb60e01b815260040160405180910390fd5b601a55565b6000606080828080836115377f0000000000000000000000000000000000000000000000000000000000000000601b61219c565b6115627f0000000000000000000000000000000000000000000000000000000000000000601c61219c565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b611597600033611628565b1580156115b957506115b76000805160206144c283398151915233611628565b155b156115d7576040516326f0f48160e01b815260040160405180910390fd5b6007546001600160a01b03828116911614156116065760405163c23f6ccb60e01b815260040160405180910390fd5b600780546001600160a01b0319166001600160a01b0392909216919091179055565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600061165c81611c54565b6001600160a01b03821660009081526005602052604090205460ff1661169757816040516318317bd560e01b8152600401610cb791906136f2565b6001600160a01b0382166000908152600560205260408120805460ff191690555b600654811015610f1a57826001600160a01b0316600682815481106116df576116df613cf0565b6000918252602090912001546001600160a01b031614156117ac576006805461170a90600190613ddc565b8154811061171a5761171a613cf0565b600091825260209091200154600680546001600160a01b03909216918390811061174657611746613cf0565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600680548061178557611785613df3565b600082815260209020810160001990810180546001600160a01b0319169055019055505050565b806117b681613e09565b9150506116b8565b6060600c8054610b1a90613af7565b60006117d881611c54565b600a548214156117fb5760405163c23f6ccb60e01b815260040160405180910390fd5b50600a55565b6014546000906001600160a01b031661182d57604051630d7fe67b60e41b815260040160405180910390fd5b60006118388361122f565b60145460405163294cdf0d60e01b81529192506001600160a01b03169063294cdf0d906118699084906004016136f2565b60206040518083038186803b15801561188157600080fd5b505afa158015611895573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d429190613e2f565b60006118c481611c54565b6001600160a01b03821660009081526005602052604090205460ff16156118fe5760405163f411c32760e01b815260040160405180910390fd5b506001600160a01b03166000818152600560205260408120805460ff191660019081179091556006805491820181559091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b0319169091179055565b606061197082612240565b600061197a612265565b9050600081511161199a5760405180602001604052806000815250610d42565b806119a484612274565b6040516020016119b5929190613e72565b6040516020818303038152906040529392505050565b6119d6600033611628565b1580156119f857506119f66000805160206144c283398151915233611628565b155b15611a16576040516326f0f48160e01b815260040160405180910390fd5b6001600160a01b038116611a3d5760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b0381166000908152601e602052604090205460ff16611a7857806040516324b1f80560e21b8152600401610cb791906136f2565b6001600160a01b03166000908152601e60205260409020805460ff19169055565b611aa282610da6565b611aab81611c54565b610f1a8383611e8e565b6000611ac081611c54565b6002546001600160a01b0383811691161415611aef5760405163c23f6ccb60e01b815260040160405180910390fd5b50600280546001600160a01b0319166001600160a01b0392909216919091179055565b600080611b1e836112a8565b915081611b2b8484611d9d565b91509150915091565b611b3f600033611628565b158015611b615750611b5f6000805160206144c283398151915233611628565b155b15611b7f576040516326f0f48160e01b815260040160405180910390fd5b806015541415611ba25760405163c23f6ccb60e01b815260040160405180910390fd5b601555565b611bb2600033611628565b158015611bd45750611bd26000805160206144c283398151915233611628565b155b15611bf2576040516326f0f48160e01b815260040160405180910390fd5b806019541415611c155760405163c23f6ccb60e01b815260040160405180910390fd5b601955565b6000602083511015611c3657611c2f83612310565b9050610adb565b82828151611c4792602001906135ac565b5060ff9050610adb565b90565b611103813361234e565b60006001600160e01b0319821663780e9d6360e01b1480610adb5750610adb826123a7565b6002601f541415611ca65760405162461bcd60e51b8152600401610cb790613ed4565b6002601f55565b6000611d047f94b1435871abae349525e55cb9a064ad0eac0fab877fee876ed90f72fcf33cce858585604051602001611ce99493929190613ee4565b604051602081830303815290604052805190602001206123e7565b949350505050565b6000611d508584848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250899250612414915050565b600080611d5c89611b12565b91509150611d6b898383612495565b6000611d76601d5490565b9050611d86601d80546001019055565b611d90898261284c565b9998505050505050505050565b600954600090819015611dd8576003546001600160a01b0385811691161415611dc95750600954611dd8565b611dd584600954611fcd565b90505b600a5415610d4257611d04611e036064611dfd600a548761292890919063ffffffff16565b90612934565b8290612940565b611e148282611628565b610fa3576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055611e4a3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611e988282611628565b15610fa3576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600080611eff8361122f565b6001600160a01b0385811691161491505092915050565b6000611f218261122f565b9050611f2f8160008461294c565b6001600160a01b0381166000908152600e60205260408120805460019290611f58908490613ddc565b90915550506000828152600d602052604080822080546001600160a01b03191690555183916001600160a01b038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59190a35050565b6000908152600d60205260409020546001600160a01b0316151590565b600081600081118015611fe957506001546001600160a01b0316155b156120075760405163fca2174f60e01b815260040160405180910390fd5b60008111801561202057506002546001600160a01b0316155b1561203e5760405163fca2174f60e01b815260040160405180910390fd5b60008111801561205757506003546001600160a01b0316155b156120755760405163fca2174f60e01b815260040160405180910390fd5b60008111801561208e57506007546001600160a01b0316155b156120ac5760405163fca2174f60e01b815260040160405180910390fd5b6001600160a01b03841660009081526005602052604090205460ff1615806120e157506003546001600160a01b038581169116145b15612101578360405163961c9a4f60e01b8152600401610cb791906136f2565b8261210f5760009150612159565b6001600160a01b0384166121415760025460035461213a916001600160a01b03908116911685612957565b9150612159565b60035461213a9085906001600160a01b031685612957565b5092915050565b6000611d047f885d61cd569c3c85a110715a0d188c45590cf3f8a77e71714f4f0211ead7ac8c858585604051602001611ce99493929190613f22565b606060ff83146121af57611c2f83612a15565b8180546121bb90613af7565b80601f01602080910402602001604051908101604052809291908181526020018280546121e790613af7565b80156122345780601f1061220957610100808354040283529160200191612234565b820191906000526020600020905b81548152906001019060200180831161221757829003601f168201915b50505050509050610adb565b61224981611fb0565b6111035760405162461bcd60e51b8152600401610cb790613d32565b606060138054610b1a90613af7565b6060600061228183612a54565b60010190506000816001600160401b038111156122a0576122a0613db0565b6040519080825280601f01601f1916602001820160405280156122ca576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461230357612308565b6122d4565b509392505050565b600080829050601f8151111561233b578260405163305a27a960e01b8152600401610cb7919061376a565b805161234682613f5d565b179392505050565b6123588282611628565b610fa35761236581612b2a565b612370836020612b3c565b604051602001612381929190613f9c565b60408051601f198184030181529082905262461bcd60e51b8252610cb79160040161376a565b60006001600160e01b031982166313f2a32f60e01b14806123d857506001600160e01b03198216635b5e139f60e01b145b80610adb5750610adb82612ca7565b6000610adb6123f4612cdc565b8360405161190160f01b8152600281019290925260228201526042902090565b60006124208484612d6c565b9050816001600160a01b0316816001600160a01b03161461245457604051638baa579f60e01b815260040160405180910390fd5b6001600160a01b0381166000908152601e602052604090205460ff1661248f5780604051634a0bfec160e01b8152600401610cb791906136f2565b50505050565b61249f8282612940565b6000811180156124b857506001546001600160a01b0316155b156124d65760405163fca2174f60e01b815260040160405180910390fd5b6000811180156124ef57506002546001600160a01b0316155b1561250d5760405163fca2174f60e01b815260040160405180910390fd5b60008111801561252657506003546001600160a01b0316155b156125445760405163fca2174f60e01b815260040160405180910390fd5b60008111801561255d57506007546001600160a01b0316155b1561257b5760405163fca2174f60e01b815260040160405180910390fd5b82158015612587575081155b156125915761248f565b6000821180156125aa57506008546001600160a01b0316155b156125c85760405163910af6f560e01b815260040160405180910390fd5b6001600160a01b03841660009081526005602052604090205460ff166126035783604051630ac29ab760e31b8152600401610cb791906136f2565b6001600160a01b0384166128085761261b8383612940565b3410156126465761262c8383612940565b60405163091a6d0f60e01b8152600401610cb791906137ef565b82156126d0576007546040516000916001600160a01b031690859061266a90613fee565b60006040518083038185875af1925050503d80600081146126a7576040519150601f19603f3d011682016040523d82523d6000602084013e6126ac565b606091505b50509050806126ce576040516312171d8360e31b815260040160405180910390fd5b505b811561275a576008546040516000916001600160a01b03169084906126f490613fee565b60006040518083038185875af1925050503d8060008114612731576040519150601f19603f3d011682016040523d82523d6000602084013e612736565b606091505b5050905080612758576040516312171d8360e31b815260040160405180910390fd5b505b6127648383612940565b34111561280357600061278161277a8585612940565b3490612d88565b90506000336001600160a01b03168260405161279c90613fee565b60006040518083038185875af1925050503d80600081146127d9576040519150601f19603f3d011682016040523d82523d6000602084013e6127de565b606091505b505090508061280057604051633c31275160e21b815260040160405180910390fd5b50505b61248f565b821561282a5760075461282a906001600160a01b038681169133911686612d94565b811561248f5760085461248f906001600160a01b038681169133911685612d94565b6001600160a01b0382166128725760405162461bcd60e51b8152600401610cb79061402a565b61287b81611fb0565b156128985760405162461bcd60e51b8152600401610cb79061406a565b6128a46000838361294c565b6001600160a01b0382166000908152600e602052604081208054600192906128cd90849061407a565b90915550506000818152600d602052604080822080546001600160a01b0319166001600160a01b038616908117909155905183927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688591a35050565b6000610d428284614092565b6000610d4282846140b1565b6000610d42828461407a565b610f1a838383612dec565b60006060806129668686612ea4565b6001546040516307c0329d60e21b81529192506001600160a01b031690631f00ca749061299990879085906004016140c5565b60006040518083038186803b1580156129b157600080fd5b505afa1580156129c5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526129ed91908101906141d0565b915081600081518110612a0257612a02613cf0565b6020026020010151925050509392505050565b60606000612a2283613036565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310612a935772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6904ee2d6d415b85acef8160201b8310612abd576904ee2d6d415b85acef8160201b830492506020015b662386f26fc100008310612adb57662386f26fc10000830492506010015b6305f5e1008310612af3576305f5e100830492506008015b6127108310612b0757612710830492506004015b60648310612b19576064830492506002015b600a8310610adb5760010192915050565b6060610adb6001600160a01b03831660145b60606000612b4b836002614092565b612b5690600261407a565b6001600160401b03811115612b6d57612b6d613db0565b6040519080825280601f01601f191660200182016040528015612b97576020820181803683370190505b509050600360fc1b81600081518110612bb257612bb2613cf0565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612be157612be1613cf0565b60200101906001600160f81b031916908160001a9053506000612c05846002614092565b612c1090600161407a565b90505b6001811115612c88576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612c4457612c44613cf0565b1a60f81b828281518110612c5a57612c5a613cf0565b60200101906001600160f81b031916908160001a90535060049490941c93612c818161420a565b9050612c13565b508315610d425760405162461bcd60e51b8152600401610cb790614253565b60006001600160e01b03198216637965db0b60e01b1480610adb57506301ffc9a760e01b6001600160e01b0319831614610adb565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015612d3557507f000000000000000000000000000000000000000000000000000000000000000046145b15612d5f57507f000000000000000000000000000000000000000000000000000000000000000090565b612d6761305e565b905090565b6000806000612d7b85856130f4565b915091506123088161313a565b6000610d428284613ddc565b61248f846323b872dd60e01b858585604051602401612db593929190614263565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526131ed565b6001600160a01b038316612e4757612e4281601180546000838152601260205260408120829055600182018355919091527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c680155565b612e6a565b816001600160a01b0316836001600160a01b031614612e6a57612e6a838261327f565b6001600160a01b038216612e8157610f1a8161331c565b826001600160a01b0316826001600160a01b031614610f1a57610f1a82826133cb565b6002546060906001600160a01b0384811691161480612ed057506002546001600160a01b038381169116145b15612f9a57604080516002808252606082018352600092602083019080368337019050506002549091506001600160a01b03858116911614612f125783612f1f565b6002546001600160a01b03165b81600081518110612f3257612f32613cf0565b6001600160a01b039283166020918202929092010152600254848216911614612f5b5782612f68565b6002546001600160a01b03165b81600181518110612f7b57612f7b613cf0565b6001600160a01b03909216602092830291909101909101529050610adb565b60408051600380825260808201909252600091602082016060803683370190505090508381600081518110612fd157612fd1613cf0565b6001600160a01b03928316602091820292909201015260025482519116908290600190811061300257613002613cf0565b60200260200101906001600160a01b031690816001600160a01b0316815250508281600281518110612f7b57612f7b613cf0565b600060ff8216601f811115610adb57604051632cd44ac360e21b815260040160405180910390fd5b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000046306040516020016130d995949392919061428b565b60405160208183030381529060405280519060200120905090565b60008082516041141561312b5760208301516040840151606085015160001a61311f8782858561340f565b94509450505050613133565b506000905060025b9250929050565b600081600481111561314e5761314e6142cd565b14156131575750565b600181600481111561316b5761316b6142cd565b14156131895760405162461bcd60e51b8152600401610cb790614312565b600281600481111561319d5761319d6142cd565b14156131bb5760405162461bcd60e51b8152600401610cb790614356565b60038160048111156131cf576131cf6142cd565b14156111035760405162461bcd60e51b8152600401610cb7906143a5565b6000613242826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166134bc9092919063ffffffff16565b905080516000148061326357508080602001905181019061326391906143c8565b610f1a5760405162461bcd60e51b8152600401610cb790614430565b6000600161328c84611264565b6132969190613ddc565b6000838152601060205260409020549091508082146132e9576001600160a01b0384166000908152600f602090815260408083208584528252808320548484528184208190558352601090915290208190555b5060009182526010602090815260408084208490556001600160a01b039094168352600f81528383209183525290812055565b60115460009061332e90600190613ddc565b6000838152601260205260408120546011805493945090928490811061335657613356613cf0565b90600052602060002001549050806011838154811061337757613377613cf0565b60009182526020808320909101929092558281526012909152604080822084905585825281205560118054806133af576133af613df3565b6001900381819060005260206000200160009055905550505050565b60006133d683611264565b6001600160a01b039093166000908152600f60209081526040808320868452825280832085905593825260109052919091209190915550565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b0383111561343c57506000905060036134b3565b6000600187878787604051600081526020016040526040516134619493929190614449565b6020604051602081039080840390855afa158015613483573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166134ac576000600192509250506134b3565b9150600090505b94509492505050565b6060611d04848460008585600080866001600160a01b031685876040516134e39190614471565b60006040518083038185875af1925050503d8060008114613520576040519150601f19603f3d011682016040523d82523d6000602084013e613525565b606091505b509150915061353687838387613541565b979650505050505050565b6060831561357d578251613576576001600160a01b0385163b6135765760405162461bcd60e51b8152600401610cb7906144b1565b5081611d04565b611d0483838151156135925781518083602001fd5b8060405162461bcd60e51b8152600401610cb7919061376a565b8280546135b890613af7565b90600052602060002090601f0160209004810192826135da5760008555613620565b82601f106135f357805160ff1916838001178555613620565b82800160010185558215613620579182015b82811115613620578251825591602001919060010190613605565b5061362c929150613630565b5090565b5b8082111561362c5760008155600101613631565b805b811461110357600080fd5b8035610adb81613645565b60006020828403121561367257613672600080fd5b6000611d048484613652565b6001600160e01b03198116613647565b8035610adb8161367e565b6000602082840312156136ae576136ae600080fd5b6000611d04848461368e565b8015155b82525050565b60208101610adb82846136ba565b6001600160a01b031690565b6000610adb826136d2565b6136be816136de565b60208101610adb82846136e9565b60005b8381101561371b578181015183820152602001613703565b8381111561248f5750506000910152565b601f01601f191690565b6000613740825190565b808452602084019350613757818560208601613700565b6137608161372c565b9093019392505050565b60208082528101610d428184613736565b600061378783836136e9565b505060200190565b6000613799825190565b80845260209384019383018060005b838110156137cd5781516137bc888261377b565b9750602083019250506001016137a8565b509495945050505050565b60208082528101610d42818461378f565b806136be565b60208101610adb82846137e9565b613647816136de565b8035610adb816137fd565b60008083601f84011261382657613826600080fd5b5081356001600160401b0381111561384057613840600080fd5b60208301915083600182028301111561313357613133600080fd5b60008060008060008060a0878903121561387757613877600080fd5b60006138838989613806565b965050602061389489828a01613652565b95505060406138a589828a01613806565b94505060606138b689828a01613652565b93505060808701356001600160401b038111156138d5576138d5600080fd5b6138e189828a01613811565b92509250509295509295509295565b6000806040838503121561390657613906600080fd5b60006139128585613806565b925050602061392385828601613652565b9150509250929050565b60006020828403121561394257613942600080fd5b6000611d048484613806565b6000806040838503121561396457613964600080fd5b60006139708585613652565b925050602061392385828601613806565b6000610adb613992611c51846136d2565b6136d2565b6000610adb82613981565b6000610adb82613997565b6136be816139a2565b60208101610adb82846139ad565b60008060008060008060a087890312156139e0576139e0600080fd5b60006139ec8989613806565b965050602061389489828a01613806565b6001600160f81b031981166136be565b600061378783836137e9565b6000613a23825190565b80845260209384019383018060005b838110156137cd578151613a468882613a0d565b975060208301925050600101613a32565b60e08101613a65828a6139fd565b8181036020830152613a778189613736565b90508181036040830152613a8b8188613736565b9050613a9a60608301876137e9565b613aa760808301866136e9565b613ab460a08301856137e9565b81810360c0830152611d908184613a19565b60408101613ad482856137e9565b610d4260208301846137e9565b634e487b7160e01b600052602260045260246000fd5b600281046001821680613b0b57607f821691505b60208210811415613b1e57613b1e613ae1565b50919050565b8051610adb816137fd565b600060208284031215613b4457613b44600080fd5b6000611d048484613b24565b60c08101613b5e82896137e9565b613b6b60208301886137e9565b613b7860408301876136e9565b613b8560608301866137e9565b613b9260808301856136e9565b61353660a08301846137e9565b602881526000602082017f534254456e756d657261626c653a206f776e657220696e646578206f7574206f8152676620626f756e647360c01b602082015291505b5060400190565b60208082528101610adb81613b9f565b602f81526000602082017f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636581526e103937b632b9903337b91039b2b63360891b60208201529150613be0565b60208082528101610adb81613bf7565b601e81526000602082017f5342543a2063616c6c6572206973206e6f7420746f6b656e206f776e65720000815291505b5060200190565b60208082528101610adb81613c53565b602981526000602082017f534254456e756d657261626c653a20676c6f62616c20696e646578206f7574208152686f6620626f756e647360b81b60208201529150613be0565b60208082528101610adb81613c9a565b634e487b7160e01b600052603260045260246000fd5b601581526000602082017414d0950e881a5b9d985b1a59081d1bdad95b881251605a1b81529150613c83565b60208082528101610adb81613d06565b602681526000602082017f5342543a2061646472657373207a65726f206973206e6f7420612076616c69648152651037bbb732b960d11b60208201529150613be0565b60208082528101610adb81613d42565b60c08101613da382896137e9565b613b6b60208301886136e9565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082821015613dee57613dee613dc6565b500390565b634e487b7160e01b600052603160045260246000fd5b6000600019821415613e1d57613e1d613dc6565b5060010190565b8051610adb81613645565b600060208284031215613e4457613e44600080fd5b6000611d048484613e24565b6000613e5a825190565b613e68818560208601613700565b9290920192915050565b6000613e7e8285613e50565b9150613e8a8284613e50565b64173539b7b760d91b8152915060058201611d04565b601f81526000602082017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081529150613c83565b60208082528101610adb81613ea0565b60808101613ef282876137e9565b613eff60208301866137e9565b613f0c60408301856136e9565b613f1960608301846137e9565b95945050505050565b60808101613f3082876137e9565b613eff60208301866136e9565b634e487b7160e01b600052601260045260246000fd5b6000610adb825190565b6000613f67825190565b60208301613f7481613f53565b92506020821015613f9557613f90600019836020036008021b90565b831692505b5050919050565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b81526017016000613fc88285613e50565b7001034b99036b4b9b9b4b733903937b6329607d1b81526011019150611d048284613e50565b600081610adb565b601d81526000602082017f5342543a206d696e7420746f20746865207a65726f206164647265737300000081529150613c83565b60208082528101610adb81613ff6565b601981526000602082017814d0950e881d1bdad95b88185b1c9958591e481b5a5b9d1959603a1b81529150613c83565b60208082528101610adb8161403a565b6000821982111561408d5761408d613dc6565b500190565b60008160001904831182151516156140ac576140ac613dc6565b500290565b6000826140c0576140c0613f3d565b500490565b604081016140d382856137e9565b8181036020830152611d04818461378f565b6140ee8261372c565b81018181106001600160401b038211171561410b5761410b613db0565b6040525050565b600061411d60405190565b90506113a382826140e5565b60006001600160401b0382111561414257614142613db0565b5060209081020190565b600061415f61415a84614129565b614112565b8381529050602080820190840283018581111561417e5761417e600080fd5b835b818110156141a257806141938882613e24565b84525060209283019201614180565b5050509392505050565b600082601f8301126141c0576141c0600080fd5b8151611d0484826020860161414c565b6000602082840312156141e5576141e5600080fd5b81516001600160401b038111156141fe576141fe600080fd5b611d04848285016141ac565b60008161421957614219613dc6565b506000190190565b60208082527f537472696e67733a20686578206c656e67746820696e73756666696369656e7491019081526000613c83565b60208082528101610adb81614221565b6060810161427182866136e9565b61427e60208301856136e9565b611d0460408301846137e9565b60a0810161429982886137e9565b6142a660208301876137e9565b6142b360408301866137e9565b6142c060608301856137e9565b610d2c60808301846136e9565b634e487b7160e01b600052602160045260246000fd5b601881526000602082017745434453413a20696e76616c6964207369676e617475726560401b81529150613c83565b60208082528101610adb816142e3565b601f81526000602082017f45434453413a20696e76616c6964207369676e6174757265206c656e6774680081529150613c83565b60208082528101610adb81614322565b602281526000602082017f45434453413a20696e76616c6964207369676e6174757265202773272076616c815261756560f01b60208201529150613be0565b60208082528101610adb81614366565b801515613647565b8051610adb816143b5565b6000602082840312156143dd576143dd600080fd5b6000611d0484846143bd565b602a81526000602082017f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b60208201529150613be0565b60208082528101610adb816143e9565b60ff81166136be565b6080810161445782876137e9565b6144646020830186614440565b613f0c60408301856137e9565b6000610d428284613e50565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529150613c83565b60208082528101610adb8161447d56fe52eafc11f6f81f86878bffd31109a0d92f37506527754f00788853ff9f63b130a26469706673582212208396a993fa1feafeac325ed9cb51491f8962d6a3c6a9550b13178f9c65a7ebd164736f6c63430008080033",
      "deployedBytecode": "0x6080604052600436106102c75760003560e01c8062bdfde5146102cc57806301ffc9a7146102ee5780630513c3e91461032457806306fdde0314610351578063102005191461037357806313150b481461039557806317fcb39b146103b857806318160ddd146103d85780631830e881146103ed5780631f37c1241461040357806320d558aa14610419578063217a2c7b1461042c57806323af4e171461044c578063248a9ca31461046c57806326defa731461048c578063289c686b146104ac5780632f2ff15d146104cc5780632f745c59146104ec57806336568abe1461050c57806339a51be51461052c5780633ad3033e1461054c5780633c72ae701461056c578063412736571461058c57806341c04d5e146105ac57806342966c68146105ce57806346877b1a146105ee5780634962a1581461060e5780634f558e791461062e5780634f6ccce71461064e5780636352211e1461066e5780636817c76c1461068e57806370a08231146106a4578063719d0f2b146106c457806376ad1997146106e4578063776d1a541461070457806377bed5ed1461071a5780637a0d1646146107475780637ad09dff146107775780637db8cb681461078a57806384b0196e146107aa5780638d018461146107d25780638ec9c93b146107f257806391223d691461080857806391d148541461083857806394a665e91461085857806395d89b4114610878578063992642e51461088d57806399b589cb146108ad578063a217fddf146108cd578063a4983421146108e2578063b97d6b2314610902578063c1177d1914610918578063c31c9c0714610938578063c86aadb614610958578063c87b56dd14610978578063d544e01014610998578063d547741f146109b8578063d6e6eb9f146109d8578063da058ae3146109ee578063eb93e85514610a0e578063ebda439614610a3c578063f4a0a52814610a5c578063fd48ac8314610a7c575b600080fd5b3480156102d857600080fd5b506102ec6102e736600461365d565b610a9c565b005b3480156102fa57600080fd5b5061030e610309366004613699565b610ad0565b60405161031b91906136c4565b60405180910390f35b34801561033057600080fd5b5061034461033f36600461365d565b610ae1565b60405161031b91906136f2565b34801561035d57600080fd5b50610366610b0b565b60405161031b919061376a565b34801561037f57600080fd5b50610388610b9d565b60405161031b91906137d8565b3480156103a157600080fd5b506103ab601a5481565b60405161031b91906137ef565b3480156103c457600080fd5b50600254610344906001600160a01b031681565b3480156103e457600080fd5b506011546103ab565b3480156103f957600080fd5b506103ab60165481565b34801561040f57600080fd5b506103ab60175481565b6103ab61042736600461385b565b610bfe565b34801561043857600080fd5b506103ab6104473660046138f0565b610d36565b34801561045857600080fd5b506102ec61046736600461392d565b610d49565b34801561047857600080fd5b506103ab61048736600461365d565b610da6565b34801561049857600080fd5b506102ec6104a736600461392d565b610dbb565b3480156104b857600080fd5b506102ec6104c736600461365d565b610e8b565b3480156104d857600080fd5b506102ec6104e736600461394e565b610efe565b3480156104f857600080fd5b506103ab6105073660046138f0565b610f1f565b34801561051857600080fd5b506102ec61052736600461394e565b610f71565b34801561053857600080fd5b50600854610344906001600160a01b031681565b34801561055857600080fd5b506102ec61056736600461392d565b610fa7565b34801561057857600080fd5b506102ec61058736600461365d565b611004565b34801561059857600080fd5b506102ec6105a736600461392d565b611077565b3480156105b857600080fd5b506103ab6000805160206144c283398151915281565b3480156105da57600080fd5b506102ec6105e936600461365d565b6110d4565b3480156105fa57600080fd5b506102ec61060936600461392d565b611106565b34801561061a57600080fd5b506102ec61062936600461365d565b611163565b34801561063a57600080fd5b5061030e61064936600461365d565b6111d6565b34801561065a57600080fd5b506103ab61066936600461365d565b6111e1565b34801561067a57600080fd5b5061034461068936600461365d565b61122f565b34801561069a57600080fd5b506103ab60155481565b3480156106b057600080fd5b506103ab6106bf36600461392d565b611264565b3480156106d057600080fd5b506103ab6106df36600461392d565b6112a8565b3480156106f057600080fd5b506102ec6106ff36600461392d565b6113a8565b34801561071057600080fd5b506103ab60185481565b34801561072657600080fd5b5060145461073a906001600160a01b031681565b60405161031b91906139b6565b34801561075357600080fd5b5061030e61076236600461392d565b60056020526000908152604090205460ff1681565b6103ab6107853660046139c4565b611405565b34801561079657600080fd5b506102ec6107a536600461365d565b611490565b3480156107b657600080fd5b506107bf611503565b60405161031b9796959493929190613a57565b3480156107de57600080fd5b506102ec6107ed36600461392d565b61158c565b3480156107fe57600080fd5b506103ab60095481565b34801561081457600080fd5b5061030e61082336600461392d565b601e6020526000908152604090205460ff1681565b34801561084457600080fd5b5061030e61085336600461394e565b611628565b34801561086457600080fd5b506102ec61087336600461392d565b611651565b34801561088457600080fd5b506103666117be565b34801561089957600080fd5b50600354610344906001600160a01b031681565b3480156108b957600080fd5b50600754610344906001600160a01b031681565b3480156108d957600080fd5b506103ab600081565b3480156108ee57600080fd5b506102ec6108fd36600461365d565b6117cd565b34801561090e57600080fd5b506103ab60195481565b34801561092457600080fd5b506103ab61093336600461365d565b611801565b34801561094457600080fd5b50600154610344906001600160a01b031681565b34801561096457600080fd5b506102ec61097336600461392d565b6118b9565b34801561098457600080fd5b5061036661099336600461365d565b611965565b3480156109a457600080fd5b506102ec6109b336600461392d565b6119cb565b3480156109c457600080fd5b506102ec6109d336600461394e565b611a99565b3480156109e457600080fd5b506103ab600a5481565b3480156109fa57600080fd5b506102ec610a0936600461392d565b611ab5565b348015610a1a57600080fd5b50610a2e610a2936600461392d565b611b12565b60405161031b929190613ac6565b348015610a4857600080fd5b50600454610344906001600160a01b031681565b348015610a6857600080fd5b506102ec610a7736600461365d565b611b34565b348015610a8857600080fd5b506102ec610a9736600461365d565b611ba7565b6000610aa781611c54565b600954821415610aca5760405163c23f6ccb60e01b815260040160405180910390fd5b50600955565b6000610adb82611c5e565b92915050565b60068181548110610af157600080fd5b6000918252602090912001546001600160a01b0316905081565b6060600b8054610b1a90613af7565b80601f0160208091040260200160405190810160405280929190818152602001828054610b4690613af7565b8015610b935780601f10610b6857610100808354040283529160200191610b93565b820191906000526020600020905b815481529060010190602001808311610b7657829003601f168201915b5050505050905090565b60606006805480602002602001604051908101604052809291908181526020018280548015610b9357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610bd7575050505050905090565b6000610c08611c83565b6014546040516331a9108f60e11b81526000916001600160a01b031690636352211e90610c39908a906004016137ef565b60206040518083038186803b158015610c5157600080fd5b505afa158015610c65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c899190613b2f565b90506001600160a01b0381163314610cc057335b60405163060296c760e31b8152600401610cb791906136f2565b60405180910390fd5b6000610cda8983610cd28b8b8b611cad565b8a8989611d0c565b90507fdc7a913fb88ef84b4edaae2c1ccc524475744905088d5c1362bab12c676f9e97818989898d601554604051610d1796959493929190613b50565b60405180910390a1915050610d2c6001601f55565b9695505050505050565b6000610d428383611d9d565b9392505050565b6000610d5481611c54565b6003546001600160a01b0383811691161415610d835760405163c23f6ccb60e01b815260040160405180910390fd5b50600380546001600160a01b0319166001600160a01b0392909216919091179055565b60009081526020819052604090206001015490565b610dc6600033611628565b158015610de85750610de66000805160206144c283398151915233611628565b155b15610e06576040516326f0f48160e01b815260040160405180910390fd5b6001600160a01b038116610e2d5760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b0381166000908152601e602052604090205460ff1615610e675760405163f411c32760e01b815260040160405180910390fd5b6001600160a01b03166000908152601e60205260409020805460ff19166001179055565b610e96600033611628565b158015610eb85750610eb66000805160206144c283398151915233611628565b155b15610ed6576040516326f0f48160e01b815260040160405180910390fd5b806017541415610ef95760405163c23f6ccb60e01b815260040160405180910390fd5b601755565b610f0782610da6565b610f1081611c54565b610f1a8383611e0a565b505050565b6000610f2a83611264565b8210610f485760405162461bcd60e51b8152600401610cb790613be7565b506001600160a01b03919091166000908152600f60209081526040808320938352929052205490565b6001600160a01b0381163314610f995760405162461bcd60e51b8152600401610cb790613c43565b610fa38282611e8e565b5050565b6000610fb281611c54565b6014546001600160a01b0383811691161415610fe15760405163c23f6ccb60e01b815260040160405180910390fd5b50601480546001600160a01b0319166001600160a01b0392909216919091179055565b61100f600033611628565b158015611031575061102f6000805160206144c283398151915233611628565b155b1561104f576040516326f0f48160e01b815260040160405180910390fd5b8060185414156110725760405163c23f6ccb60e01b815260040160405180910390fd5b601855565b600061108281611c54565b6001546001600160a01b03838116911614156110b15760405163c23f6ccb60e01b815260040160405180910390fd5b50600180546001600160a01b0319166001600160a01b0392909216919091179055565b6110de3382611ef3565b6110fa5760405162461bcd60e51b8152600401610cb790613c8a565b61110381611f16565b50565b600061111181611c54565b6008546001600160a01b03838116911614156111405760405163c23f6ccb60e01b815260040160405180910390fd5b50600880546001600160a01b0319166001600160a01b0392909216919091179055565b61116e600033611628565b158015611190575061118e6000805160206144c283398151915233611628565b155b156111ae576040516326f0f48160e01b815260040160405180910390fd5b8060165414156111d15760405163c23f6ccb60e01b815260040160405180910390fd5b601655565b6000610adb82611fb0565b60006111ec60115490565b821061120a5760405162461bcd60e51b8152600401610cb790613ce0565b6011828154811061121d5761121d613cf0565b90600052602060002001549050919050565b6000818152600d60205260408120546001600160a01b031680610adb5760405162461bcd60e51b8152600401610cb790613d32565b60006001600160a01b03821661128c5760405162461bcd60e51b8152600401610cb790613d85565b506001600160a01b03166000908152600e602052604090205490565b600060155460001480156112bc5750601654155b156112c957506000919050565b6004546001600160a01b0383811691161480156112fe57506001600160a01b03821660009081526005602052604090205460ff165b801561130c57506000601654115b1561131957505060165490565b6003546001600160a01b03838116911614801561134e57506001600160a01b03821660009081526005602052604090205460ff165b1561135b57505060155490565b6001600160a01b03821660009081526005602052604090205460ff161561138857610adb82601554611fcd565b81604051630ac29ab760e31b8152600401610cb791906136f2565b919050565b60006113b381611c54565b6004546001600160a01b03838116911614156113e25760405163c23f6ccb60e01b815260040160405180910390fd5b50600480546001600160a01b0319166001600160a01b0392909216919091179055565b600061140f611c83565b6001600160a01b03861633146114255733610c9d565b600061143f88886114378a8a8a612160565b898888611d0c565b90507f7650948236619e679e44bf502d527ec950d1d58336e6babf229f483c57d04672818888888c60155460405161147c96959493929190613d95565b60405180910390a19050610d2c6001601f55565b61149b600033611628565b1580156114bd57506114bb6000805160206144c283398151915233611628565b155b156114db576040516326f0f48160e01b815260040160405180910390fd5b80601a5414156114fe5760405163c23f6ccb60e01b815260040160405180910390fd5b601a55565b6000606080828080836115377f0000000000000000000000000000000000000000000000000000000000000000601b61219c565b6115627f0000000000000000000000000000000000000000000000000000000000000000601c61219c565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b611597600033611628565b1580156115b957506115b76000805160206144c283398151915233611628565b155b156115d7576040516326f0f48160e01b815260040160405180910390fd5b6007546001600160a01b03828116911614156116065760405163c23f6ccb60e01b815260040160405180910390fd5b600780546001600160a01b0319166001600160a01b0392909216919091179055565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600061165c81611c54565b6001600160a01b03821660009081526005602052604090205460ff1661169757816040516318317bd560e01b8152600401610cb791906136f2565b6001600160a01b0382166000908152600560205260408120805460ff191690555b600654811015610f1a57826001600160a01b0316600682815481106116df576116df613cf0565b6000918252602090912001546001600160a01b031614156117ac576006805461170a90600190613ddc565b8154811061171a5761171a613cf0565b600091825260209091200154600680546001600160a01b03909216918390811061174657611746613cf0565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600680548061178557611785613df3565b600082815260209020810160001990810180546001600160a01b0319169055019055505050565b806117b681613e09565b9150506116b8565b6060600c8054610b1a90613af7565b60006117d881611c54565b600a548214156117fb5760405163c23f6ccb60e01b815260040160405180910390fd5b50600a55565b6014546000906001600160a01b031661182d57604051630d7fe67b60e41b815260040160405180910390fd5b60006118388361122f565b60145460405163294cdf0d60e01b81529192506001600160a01b03169063294cdf0d906118699084906004016136f2565b60206040518083038186803b15801561188157600080fd5b505afa158015611895573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d429190613e2f565b60006118c481611c54565b6001600160a01b03821660009081526005602052604090205460ff16156118fe5760405163f411c32760e01b815260040160405180910390fd5b506001600160a01b03166000818152600560205260408120805460ff191660019081179091556006805491820181559091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b0319169091179055565b606061197082612240565b600061197a612265565b9050600081511161199a5760405180602001604052806000815250610d42565b806119a484612274565b6040516020016119b5929190613e72565b6040516020818303038152906040529392505050565b6119d6600033611628565b1580156119f857506119f66000805160206144c283398151915233611628565b155b15611a16576040516326f0f48160e01b815260040160405180910390fd5b6001600160a01b038116611a3d5760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b0381166000908152601e602052604090205460ff16611a7857806040516324b1f80560e21b8152600401610cb791906136f2565b6001600160a01b03166000908152601e60205260409020805460ff19169055565b611aa282610da6565b611aab81611c54565b610f1a8383611e8e565b6000611ac081611c54565b6002546001600160a01b0383811691161415611aef5760405163c23f6ccb60e01b815260040160405180910390fd5b50600280546001600160a01b0319166001600160a01b0392909216919091179055565b600080611b1e836112a8565b915081611b2b8484611d9d565b91509150915091565b611b3f600033611628565b158015611b615750611b5f6000805160206144c283398151915233611628565b155b15611b7f576040516326f0f48160e01b815260040160405180910390fd5b806015541415611ba25760405163c23f6ccb60e01b815260040160405180910390fd5b601555565b611bb2600033611628565b158015611bd45750611bd26000805160206144c283398151915233611628565b155b15611bf2576040516326f0f48160e01b815260040160405180910390fd5b806019541415611c155760405163c23f6ccb60e01b815260040160405180910390fd5b601955565b6000602083511015611c3657611c2f83612310565b9050610adb565b82828151611c4792602001906135ac565b5060ff9050610adb565b90565b611103813361234e565b60006001600160e01b0319821663780e9d6360e01b1480610adb5750610adb826123a7565b6002601f541415611ca65760405162461bcd60e51b8152600401610cb790613ed4565b6002601f55565b6000611d047f94b1435871abae349525e55cb9a064ad0eac0fab877fee876ed90f72fcf33cce858585604051602001611ce99493929190613ee4565b604051602081830303815290604052805190602001206123e7565b949350505050565b6000611d508584848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250899250612414915050565b600080611d5c89611b12565b91509150611d6b898383612495565b6000611d76601d5490565b9050611d86601d80546001019055565b611d90898261284c565b9998505050505050505050565b600954600090819015611dd8576003546001600160a01b0385811691161415611dc95750600954611dd8565b611dd584600954611fcd565b90505b600a5415610d4257611d04611e036064611dfd600a548761292890919063ffffffff16565b90612934565b8290612940565b611e148282611628565b610fa3576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055611e4a3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611e988282611628565b15610fa3576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600080611eff8361122f565b6001600160a01b0385811691161491505092915050565b6000611f218261122f565b9050611f2f8160008461294c565b6001600160a01b0381166000908152600e60205260408120805460019290611f58908490613ddc565b90915550506000828152600d602052604080822080546001600160a01b03191690555183916001600160a01b038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59190a35050565b6000908152600d60205260409020546001600160a01b0316151590565b600081600081118015611fe957506001546001600160a01b0316155b156120075760405163fca2174f60e01b815260040160405180910390fd5b60008111801561202057506002546001600160a01b0316155b1561203e5760405163fca2174f60e01b815260040160405180910390fd5b60008111801561205757506003546001600160a01b0316155b156120755760405163fca2174f60e01b815260040160405180910390fd5b60008111801561208e57506007546001600160a01b0316155b156120ac5760405163fca2174f60e01b815260040160405180910390fd5b6001600160a01b03841660009081526005602052604090205460ff1615806120e157506003546001600160a01b038581169116145b15612101578360405163961c9a4f60e01b8152600401610cb791906136f2565b8261210f5760009150612159565b6001600160a01b0384166121415760025460035461213a916001600160a01b03908116911685612957565b9150612159565b60035461213a9085906001600160a01b031685612957565b5092915050565b6000611d047f885d61cd569c3c85a110715a0d188c45590cf3f8a77e71714f4f0211ead7ac8c858585604051602001611ce99493929190613f22565b606060ff83146121af57611c2f83612a15565b8180546121bb90613af7565b80601f01602080910402602001604051908101604052809291908181526020018280546121e790613af7565b80156122345780601f1061220957610100808354040283529160200191612234565b820191906000526020600020905b81548152906001019060200180831161221757829003601f168201915b50505050509050610adb565b61224981611fb0565b6111035760405162461bcd60e51b8152600401610cb790613d32565b606060138054610b1a90613af7565b6060600061228183612a54565b60010190506000816001600160401b038111156122a0576122a0613db0565b6040519080825280601f01601f1916602001820160405280156122ca576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461230357612308565b6122d4565b509392505050565b600080829050601f8151111561233b578260405163305a27a960e01b8152600401610cb7919061376a565b805161234682613f5d565b179392505050565b6123588282611628565b610fa35761236581612b2a565b612370836020612b3c565b604051602001612381929190613f9c565b60408051601f198184030181529082905262461bcd60e51b8252610cb79160040161376a565b60006001600160e01b031982166313f2a32f60e01b14806123d857506001600160e01b03198216635b5e139f60e01b145b80610adb5750610adb82612ca7565b6000610adb6123f4612cdc565b8360405161190160f01b8152600281019290925260228201526042902090565b60006124208484612d6c565b9050816001600160a01b0316816001600160a01b03161461245457604051638baa579f60e01b815260040160405180910390fd5b6001600160a01b0381166000908152601e602052604090205460ff1661248f5780604051634a0bfec160e01b8152600401610cb791906136f2565b50505050565b61249f8282612940565b6000811180156124b857506001546001600160a01b0316155b156124d65760405163fca2174f60e01b815260040160405180910390fd5b6000811180156124ef57506002546001600160a01b0316155b1561250d5760405163fca2174f60e01b815260040160405180910390fd5b60008111801561252657506003546001600160a01b0316155b156125445760405163fca2174f60e01b815260040160405180910390fd5b60008111801561255d57506007546001600160a01b0316155b1561257b5760405163fca2174f60e01b815260040160405180910390fd5b82158015612587575081155b156125915761248f565b6000821180156125aa57506008546001600160a01b0316155b156125c85760405163910af6f560e01b815260040160405180910390fd5b6001600160a01b03841660009081526005602052604090205460ff166126035783604051630ac29ab760e31b8152600401610cb791906136f2565b6001600160a01b0384166128085761261b8383612940565b3410156126465761262c8383612940565b60405163091a6d0f60e01b8152600401610cb791906137ef565b82156126d0576007546040516000916001600160a01b031690859061266a90613fee565b60006040518083038185875af1925050503d80600081146126a7576040519150601f19603f3d011682016040523d82523d6000602084013e6126ac565b606091505b50509050806126ce576040516312171d8360e31b815260040160405180910390fd5b505b811561275a576008546040516000916001600160a01b03169084906126f490613fee565b60006040518083038185875af1925050503d8060008114612731576040519150601f19603f3d011682016040523d82523d6000602084013e612736565b606091505b5050905080612758576040516312171d8360e31b815260040160405180910390fd5b505b6127648383612940565b34111561280357600061278161277a8585612940565b3490612d88565b90506000336001600160a01b03168260405161279c90613fee565b60006040518083038185875af1925050503d80600081146127d9576040519150601f19603f3d011682016040523d82523d6000602084013e6127de565b606091505b505090508061280057604051633c31275160e21b815260040160405180910390fd5b50505b61248f565b821561282a5760075461282a906001600160a01b038681169133911686612d94565b811561248f5760085461248f906001600160a01b038681169133911685612d94565b6001600160a01b0382166128725760405162461bcd60e51b8152600401610cb79061402a565b61287b81611fb0565b156128985760405162461bcd60e51b8152600401610cb79061406a565b6128a46000838361294c565b6001600160a01b0382166000908152600e602052604081208054600192906128cd90849061407a565b90915550506000818152600d602052604080822080546001600160a01b0319166001600160a01b038616908117909155905183927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688591a35050565b6000610d428284614092565b6000610d4282846140b1565b6000610d42828461407a565b610f1a838383612dec565b60006060806129668686612ea4565b6001546040516307c0329d60e21b81529192506001600160a01b031690631f00ca749061299990879085906004016140c5565b60006040518083038186803b1580156129b157600080fd5b505afa1580156129c5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526129ed91908101906141d0565b915081600081518110612a0257612a02613cf0565b6020026020010151925050509392505050565b60606000612a2283613036565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310612a935772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6904ee2d6d415b85acef8160201b8310612abd576904ee2d6d415b85acef8160201b830492506020015b662386f26fc100008310612adb57662386f26fc10000830492506010015b6305f5e1008310612af3576305f5e100830492506008015b6127108310612b0757612710830492506004015b60648310612b19576064830492506002015b600a8310610adb5760010192915050565b6060610adb6001600160a01b03831660145b60606000612b4b836002614092565b612b5690600261407a565b6001600160401b03811115612b6d57612b6d613db0565b6040519080825280601f01601f191660200182016040528015612b97576020820181803683370190505b509050600360fc1b81600081518110612bb257612bb2613cf0565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612be157612be1613cf0565b60200101906001600160f81b031916908160001a9053506000612c05846002614092565b612c1090600161407a565b90505b6001811115612c88576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612c4457612c44613cf0565b1a60f81b828281518110612c5a57612c5a613cf0565b60200101906001600160f81b031916908160001a90535060049490941c93612c818161420a565b9050612c13565b508315610d425760405162461bcd60e51b8152600401610cb790614253565b60006001600160e01b03198216637965db0b60e01b1480610adb57506301ffc9a760e01b6001600160e01b0319831614610adb565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015612d3557507f000000000000000000000000000000000000000000000000000000000000000046145b15612d5f57507f000000000000000000000000000000000000000000000000000000000000000090565b612d6761305e565b905090565b6000806000612d7b85856130f4565b915091506123088161313a565b6000610d428284613ddc565b61248f846323b872dd60e01b858585604051602401612db593929190614263565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526131ed565b6001600160a01b038316612e4757612e4281601180546000838152601260205260408120829055600182018355919091527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c680155565b612e6a565b816001600160a01b0316836001600160a01b031614612e6a57612e6a838261327f565b6001600160a01b038216612e8157610f1a8161331c565b826001600160a01b0316826001600160a01b031614610f1a57610f1a82826133cb565b6002546060906001600160a01b0384811691161480612ed057506002546001600160a01b038381169116145b15612f9a57604080516002808252606082018352600092602083019080368337019050506002549091506001600160a01b03858116911614612f125783612f1f565b6002546001600160a01b03165b81600081518110612f3257612f32613cf0565b6001600160a01b039283166020918202929092010152600254848216911614612f5b5782612f68565b6002546001600160a01b03165b81600181518110612f7b57612f7b613cf0565b6001600160a01b03909216602092830291909101909101529050610adb565b60408051600380825260808201909252600091602082016060803683370190505090508381600081518110612fd157612fd1613cf0565b6001600160a01b03928316602091820292909201015260025482519116908290600190811061300257613002613cf0565b60200260200101906001600160a01b031690816001600160a01b0316815250508281600281518110612f7b57612f7b613cf0565b600060ff8216601f811115610adb57604051632cd44ac360e21b815260040160405180910390fd5b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000046306040516020016130d995949392919061428b565b60405160208183030381529060405280519060200120905090565b60008082516041141561312b5760208301516040840151606085015160001a61311f8782858561340f565b94509450505050613133565b506000905060025b9250929050565b600081600481111561314e5761314e6142cd565b14156131575750565b600181600481111561316b5761316b6142cd565b14156131895760405162461bcd60e51b8152600401610cb790614312565b600281600481111561319d5761319d6142cd565b14156131bb5760405162461bcd60e51b8152600401610cb790614356565b60038160048111156131cf576131cf6142cd565b14156111035760405162461bcd60e51b8152600401610cb7906143a5565b6000613242826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166134bc9092919063ffffffff16565b905080516000148061326357508080602001905181019061326391906143c8565b610f1a5760405162461bcd60e51b8152600401610cb790614430565b6000600161328c84611264565b6132969190613ddc565b6000838152601060205260409020549091508082146132e9576001600160a01b0384166000908152600f602090815260408083208584528252808320548484528184208190558352601090915290208190555b5060009182526010602090815260408084208490556001600160a01b039094168352600f81528383209183525290812055565b60115460009061332e90600190613ddc565b6000838152601260205260408120546011805493945090928490811061335657613356613cf0565b90600052602060002001549050806011838154811061337757613377613cf0565b60009182526020808320909101929092558281526012909152604080822084905585825281205560118054806133af576133af613df3565b6001900381819060005260206000200160009055905550505050565b60006133d683611264565b6001600160a01b039093166000908152600f60209081526040808320868452825280832085905593825260109052919091209190915550565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b0383111561343c57506000905060036134b3565b6000600187878787604051600081526020016040526040516134619493929190614449565b6020604051602081039080840390855afa158015613483573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166134ac576000600192509250506134b3565b9150600090505b94509492505050565b6060611d04848460008585600080866001600160a01b031685876040516134e39190614471565b60006040518083038185875af1925050503d8060008114613520576040519150601f19603f3d011682016040523d82523d6000602084013e613525565b606091505b509150915061353687838387613541565b979650505050505050565b6060831561357d578251613576576001600160a01b0385163b6135765760405162461bcd60e51b8152600401610cb7906144b1565b5081611d04565b611d0483838151156135925781518083602001fd5b8060405162461bcd60e51b8152600401610cb7919061376a565b8280546135b890613af7565b90600052602060002090601f0160209004810192826135da5760008555613620565b82601f106135f357805160ff1916838001178555613620565b82800160010185558215613620579182015b82811115613620578251825591602001919060010190613605565b5061362c929150613630565b5090565b5b8082111561362c5760008155600101613631565b805b811461110357600080fd5b8035610adb81613645565b60006020828403121561367257613672600080fd5b6000611d048484613652565b6001600160e01b03198116613647565b8035610adb8161367e565b6000602082840312156136ae576136ae600080fd5b6000611d04848461368e565b8015155b82525050565b60208101610adb82846136ba565b6001600160a01b031690565b6000610adb826136d2565b6136be816136de565b60208101610adb82846136e9565b60005b8381101561371b578181015183820152602001613703565b8381111561248f5750506000910152565b601f01601f191690565b6000613740825190565b808452602084019350613757818560208601613700565b6137608161372c565b9093019392505050565b60208082528101610d428184613736565b600061378783836136e9565b505060200190565b6000613799825190565b80845260209384019383018060005b838110156137cd5781516137bc888261377b565b9750602083019250506001016137a8565b509495945050505050565b60208082528101610d42818461378f565b806136be565b60208101610adb82846137e9565b613647816136de565b8035610adb816137fd565b60008083601f84011261382657613826600080fd5b5081356001600160401b0381111561384057613840600080fd5b60208301915083600182028301111561313357613133600080fd5b60008060008060008060a0878903121561387757613877600080fd5b60006138838989613806565b965050602061389489828a01613652565b95505060406138a589828a01613806565b94505060606138b689828a01613652565b93505060808701356001600160401b038111156138d5576138d5600080fd5b6138e189828a01613811565b92509250509295509295509295565b6000806040838503121561390657613906600080fd5b60006139128585613806565b925050602061392385828601613652565b9150509250929050565b60006020828403121561394257613942600080fd5b6000611d048484613806565b6000806040838503121561396457613964600080fd5b60006139708585613652565b925050602061392385828601613806565b6000610adb613992611c51846136d2565b6136d2565b6000610adb82613981565b6000610adb82613997565b6136be816139a2565b60208101610adb82846139ad565b60008060008060008060a087890312156139e0576139e0600080fd5b60006139ec8989613806565b965050602061389489828a01613806565b6001600160f81b031981166136be565b600061378783836137e9565b6000613a23825190565b80845260209384019383018060005b838110156137cd578151613a468882613a0d565b975060208301925050600101613a32565b60e08101613a65828a6139fd565b8181036020830152613a778189613736565b90508181036040830152613a8b8188613736565b9050613a9a60608301876137e9565b613aa760808301866136e9565b613ab460a08301856137e9565b81810360c0830152611d908184613a19565b60408101613ad482856137e9565b610d4260208301846137e9565b634e487b7160e01b600052602260045260246000fd5b600281046001821680613b0b57607f821691505b60208210811415613b1e57613b1e613ae1565b50919050565b8051610adb816137fd565b600060208284031215613b4457613b44600080fd5b6000611d048484613b24565b60c08101613b5e82896137e9565b613b6b60208301886137e9565b613b7860408301876136e9565b613b8560608301866137e9565b613b9260808301856136e9565b61353660a08301846137e9565b602881526000602082017f534254456e756d657261626c653a206f776e657220696e646578206f7574206f8152676620626f756e647360c01b602082015291505b5060400190565b60208082528101610adb81613b9f565b602f81526000602082017f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636581526e103937b632b9903337b91039b2b63360891b60208201529150613be0565b60208082528101610adb81613bf7565b601e81526000602082017f5342543a2063616c6c6572206973206e6f7420746f6b656e206f776e65720000815291505b5060200190565b60208082528101610adb81613c53565b602981526000602082017f534254456e756d657261626c653a20676c6f62616c20696e646578206f7574208152686f6620626f756e647360b81b60208201529150613be0565b60208082528101610adb81613c9a565b634e487b7160e01b600052603260045260246000fd5b601581526000602082017414d0950e881a5b9d985b1a59081d1bdad95b881251605a1b81529150613c83565b60208082528101610adb81613d06565b602681526000602082017f5342543a2061646472657373207a65726f206973206e6f7420612076616c69648152651037bbb732b960d11b60208201529150613be0565b60208082528101610adb81613d42565b60c08101613da382896137e9565b613b6b60208301886136e9565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082821015613dee57613dee613dc6565b500390565b634e487b7160e01b600052603160045260246000fd5b6000600019821415613e1d57613e1d613dc6565b5060010190565b8051610adb81613645565b600060208284031215613e4457613e44600080fd5b6000611d048484613e24565b6000613e5a825190565b613e68818560208601613700565b9290920192915050565b6000613e7e8285613e50565b9150613e8a8284613e50565b64173539b7b760d91b8152915060058201611d04565b601f81526000602082017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081529150613c83565b60208082528101610adb81613ea0565b60808101613ef282876137e9565b613eff60208301866137e9565b613f0c60408301856136e9565b613f1960608301846137e9565b95945050505050565b60808101613f3082876137e9565b613eff60208301866136e9565b634e487b7160e01b600052601260045260246000fd5b6000610adb825190565b6000613f67825190565b60208301613f7481613f53565b92506020821015613f9557613f90600019836020036008021b90565b831692505b5050919050565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b81526017016000613fc88285613e50565b7001034b99036b4b9b9b4b733903937b6329607d1b81526011019150611d048284613e50565b600081610adb565b601d81526000602082017f5342543a206d696e7420746f20746865207a65726f206164647265737300000081529150613c83565b60208082528101610adb81613ff6565b601981526000602082017814d0950e881d1bdad95b88185b1c9958591e481b5a5b9d1959603a1b81529150613c83565b60208082528101610adb8161403a565b6000821982111561408d5761408d613dc6565b500190565b60008160001904831182151516156140ac576140ac613dc6565b500290565b6000826140c0576140c0613f3d565b500490565b604081016140d382856137e9565b8181036020830152611d04818461378f565b6140ee8261372c565b81018181106001600160401b038211171561410b5761410b613db0565b6040525050565b600061411d60405190565b90506113a382826140e5565b60006001600160401b0382111561414257614142613db0565b5060209081020190565b600061415f61415a84614129565b614112565b8381529050602080820190840283018581111561417e5761417e600080fd5b835b818110156141a257806141938882613e24565b84525060209283019201614180565b5050509392505050565b600082601f8301126141c0576141c0600080fd5b8151611d0484826020860161414c565b6000602082840312156141e5576141e5600080fd5b81516001600160401b038111156141fe576141fe600080fd5b611d04848285016141ac565b60008161421957614219613dc6565b506000190190565b60208082527f537472696e67733a20686578206c656e67746820696e73756666696369656e7491019081526000613c83565b60208082528101610adb81614221565b6060810161427182866136e9565b61427e60208301856136e9565b611d0460408301846137e9565b60a0810161429982886137e9565b6142a660208301876137e9565b6142b360408301866137e9565b6142c060608301856137e9565b610d2c60808301846136e9565b634e487b7160e01b600052602160045260246000fd5b601881526000602082017745434453413a20696e76616c6964207369676e617475726560401b81529150613c83565b60208082528101610adb816142e3565b601f81526000602082017f45434453413a20696e76616c6964207369676e6174757265206c656e6774680081529150613c83565b60208082528101610adb81614322565b602281526000602082017f45434453413a20696e76616c6964207369676e6174757265202773272076616c815261756560f01b60208201529150613be0565b60208082528101610adb81614366565b801515613647565b8051610adb816143b5565b6000602082840312156143dd576143dd600080fd5b6000611d0484846143bd565b602a81526000602082017f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b60208201529150613be0565b60208082528101610adb816143e9565b60ff81166136be565b6080810161445782876137e9565b6144646020830186614440565b613f0c60408301856137e9565b6000610d428284613e50565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529150613c83565b60208082528101610adb8161447d56fe52eafc11f6f81f86878bffd31109a0d92f37506527754f00788853ff9f63b130a26469706673582212208396a993fa1feafeac325ed9cb51491f8962d6a3c6a9550b13178f9c65a7ebd164736f6c63430008080033",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "author": "Masa Finance",
        "details": "Soulbound Green, that inherits from the SBT contract.",
        "kind": "dev",
        "methods": {
          "addAuthority(address)": {
            "details": "The caller must have the admin or project admin role to call this function",
            "params": {
              "_authority": "New authority to add"
            }
          },
          "balanceOf(address)": {
            "details": "See {ISBT-balanceOf}."
          },
          "burn(uint256)": {
            "details": "Burns `tokenId`. See {SBT-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator."
          },
          "constructor": {
            "details": "Creates a new soulbound Green, inheriting from the SBT contract.",
            "params": {
              "admin": "Administrator of the smart contract",
              "baseTokenURI": "Base URI of the token",
              "name": "Name of the token",
              "paymentParams": "Payment gateway params",
              "soulboundIdentity": "Address of the SoulboundIdentity contract",
              "symbol": "Symbol of the token"
            }
          },
          "disablePaymentMethod(address)": {
            "details": "The caller must have the admin role to call this function",
            "params": {
              "_paymentMethod": "Token to remove"
            }
          },
          "eip712Domain()": {
            "details": "See {EIP-5267}. _Available since v4.9._"
          },
          "enablePaymentMethod(address)": {
            "details": "The caller must have the admin role to call this function",
            "params": {
              "_paymentMethod": "New token to add"
            }
          },
          "exists(uint256)": {
            "details": "Returns true if the token has been minted",
            "params": {
              "tokenId": "Token to check"
            },
            "returns": {
              "_0": "True if the token exists"
            }
          },
          "getEnabledPaymentMethods()": {
            "details": "Returns the address of all available payment methods",
            "returns": {
              "_0": "Array of all enabled payment methods"
            }
          },
          "getIdentityId(uint256)": {
            "params": {
              "tokenId": "Id of the token"
            },
            "returns": {
              "_0": "Id of the identity"
            }
          },
          "getMintPrice(address)": {
            "details": "Returns current pricing for minting",
            "params": {
              "paymentMethod": "Address of token that user want to pay"
            },
            "returns": {
              "price": "Current price for minting in the given payment method"
            }
          },
          "getMintPriceWithProtocolFee(address)": {
            "details": "Returns current pricing for minting with protocol fee",
            "params": {
              "paymentMethod": "Address of token that user want to pay"
            },
            "returns": {
              "price": "Current price for minting in the given payment method",
              "protocolFee": "Current protocol fee for minting in the given payment method"
            }
          },
          "getProtocolFee(address,uint256)": {
            "details": "This method will calculate the protocol fee based on the payment method",
            "params": {
              "amount": "Price to be paid in the specified payment method",
              "paymentMethod": "Address of token that user want to pay"
            }
          },
          "getRoleAdmin(bytes32)": {
            "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
          },
          "grantRole(bytes32,address)": {
            "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
          },
          "hasRole(bytes32,address)": {
            "details": "Returns `true` if `account` has been granted `role`."
          },
          "mint(address,address,address,uint256,bytes)": {
            "details": "The caller must have the MINTER role",
            "params": {
              "authorityAddress": "Address of the authority that signed the message",
              "paymentMethod": "Address of token that user want to pay",
              "signature": "Signature of the message",
              "signatureDate": "Date of the signature",
              "to": "The address to mint the SBT to"
            },
            "returns": {
              "_0": "The SBT ID of the newly minted SBT"
            }
          },
          "mint(address,uint256,address,uint256,bytes)": {
            "details": "The caller must have the MINTER role",
            "params": {
              "authorityAddress": "Address of the authority that signed the message",
              "identityId": "TokenId of the identity to mint the NFT to",
              "paymentMethod": "Address of token that user want to pay",
              "signature": "Signature of the message",
              "signatureDate": "Date of the signature"
            },
            "returns": {
              "_0": "The NFT ID of the newly minted SBT"
            }
          },
          "name()": {
            "details": "See {ISBTMetadata-name}."
          },
          "ownerOf(uint256)": {
            "details": "See {ISBT-ownerOf}."
          },
          "removeAuthority(address)": {
            "details": "The caller must have the admin or project admin role to call this function",
            "params": {
              "_authority": "Authority to remove"
            }
          },
          "renounceRole(bytes32,address)": {
            "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
          },
          "revokeRole(bytes32,address)": {
            "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
          },
          "setAddLinkPrice(uint256)": {
            "details": "The caller must have the admin or project admin role to call this function",
            "params": {
              "_addLinkPrice": "New price for adding the link in SoulLinker in stable coin"
            }
          },
          "setAddLinkPriceMASA(uint256)": {
            "details": "The caller must have the admin or project admin role to call this function",
            "params": {
              "_addLinkPriceMASA": "New price for adding the link in SoulLinker in MASA"
            }
          },
          "setMasaToken(address)": {
            "details": "The caller must have the admin role to call this function It can be set to address(0) to disable paying in MASA",
            "params": {
              "_masaToken": "New utility token to pay the fee in"
            }
          },
          "setMintPrice(uint256)": {
            "details": "The caller must have the admin or project admin role to call this function",
            "params": {
              "_mintPrice": "New price of minting in stable coin"
            }
          },
          "setMintPriceMASA(uint256)": {
            "details": "The caller must have the admin or project admin role to call this function",
            "params": {
              "_mintPriceMASA": "New price of minting in MASA"
            }
          },
          "setProjectFeeReceiver(address)": {
            "details": "The caller must have the admin or project admin role to call this function",
            "params": {
              "_projectFeeReceiver": "New project fee receiver wallet"
            }
          },
          "setProtocolFeeAmount(uint256)": {
            "details": "The caller must have the admin role to call this function",
            "params": {
              "_protocolFeeAmount": "New protocol fee amount"
            }
          },
          "setProtocolFeePercent(uint256)": {
            "details": "The caller must have the admin role to call this function",
            "params": {
              "_protocolFeePercent": "New protocol fee percent"
            }
          },
          "setProtocolFeeReceiver(address)": {
            "details": "The caller must have the admin role to call this function",
            "params": {
              "_protocolFeeReceiver": "New protocol fee wallet"
            }
          },
          "setQueryLinkPrice(uint256)": {
            "details": "The caller must have the admin or project admin role to call this function",
            "params": {
              "_queryLinkPrice": "New price for reading data in SoulLinker in stable coin"
            }
          },
          "setQueryLinkPriceMASA(uint256)": {
            "details": "The caller must have the admin or project admin role to call this function",
            "params": {
              "_queryLinkPriceMASA": "New price for reading data in SoulLinker in MASA"
            }
          },
          "setSoulboundIdentity(address)": {
            "details": "The caller must be the admin to call this function",
            "params": {
              "_soulboundIdentity": "Address of the SoulboundIdentity contract"
            }
          },
          "setStableCoin(address)": {
            "details": "The caller must have the admin role to call this function",
            "params": {
              "_stableCoin": "New stable coin to pay the fee in"
            }
          },
          "setSwapRouter(address)": {
            "details": "The caller must have the admin role to call this function",
            "params": {
              "_swapRouter": "New swap router address"
            }
          },
          "setWrappedNativeToken(address)": {
            "details": "The caller must have the admin role to call this function",
            "params": {
              "_wrappedNativeToken": "New wrapped native token address"
            }
          },
          "supportsInterface(bytes4)": {
            "details": "Interface identification is specified in ERC-165.",
            "params": {
              "interfaceId": "The interface identifier, as specified in ERC-165"
            },
            "returns": {
              "_0": "`true` if the contract implements `interfaceId` and  `interfaceId` is not 0xffffffff, `false` otherwise"
            }
          },
          "symbol()": {
            "details": "See {ISBTMetadata-symbol}."
          },
          "tokenByIndex(uint256)": {
            "details": "See {ISBTEnumerable-tokenByIndex}."
          },
          "tokenOfOwnerByIndex(address,uint256)": {
            "details": "See {ISBTEnumerable-tokenOfOwnerByIndex}."
          },
          "tokenURI(uint256)": {
            "details": "Throws if `_tokenId` is not a valid SBT. URIs are defined in RFC  3986. The URI may point to a JSON file that conforms to the \"ERC721  Metadata JSON Schema\".",
            "params": {
              "tokenId": "SBT to get the URI of"
            },
            "returns": {
              "_0": "URI of the SBT"
            }
          },
          "totalSupply()": {
            "details": "See {ISBTEnumerable-totalSupply}."
          }
        },
        "title": "Soulbound Two-factor authentication (Green - 2FA)",
        "version": 1
      },
      "evm": {
        "bytecode": {
          "functionDebugData": {
            "@_12091": {
              "entryPoint": null,
              "id": 12091,
              "parameterSlots": 6,
              "returnSlots": 0
            },
            "@_12703": {
              "entryPoint": null,
              "id": 12703,
              "parameterSlots": 6,
              "returnSlots": 0
            },
            "@_12972": {
              "entryPoint": null,
              "id": 12972,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_4132": {
              "entryPoint": null,
              "id": 4132,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_653": {
              "entryPoint": null,
              "id": 653,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_9272": {
              "entryPoint": null,
              "id": 9272,
              "parameterSlots": 6,
              "returnSlots": 0
            },
            "@_9994": {
              "entryPoint": null,
              "id": 9994,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_buildDomainSeparator_4179": {
              "entryPoint": 816,
              "id": 4179,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_grantRole_283": {
              "entryPoint": 571,
              "id": 283,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_msgSender_3034": {
              "entryPoint": null,
              "id": 3034,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@getStringSlot_3421": {
              "entryPoint": 984,
              "id": 3421,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@hasRole_79": {
              "entryPoint": null,
              "id": 79,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@toShortStringWithFallback_3275": {
              "entryPoint": 732,
              "id": 3275,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@toShortString_3177": {
              "entryPoint": 908,
              "id": 3177,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_decode_available_length_t_string_memory_ptr_fromMemory": {
              "entryPoint": 1422,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_decode_t_address_fromMemory": {
              "entryPoint": 1197,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_t_string_memory_ptr_fromMemory": {
              "entryPoint": 1495,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_t_struct$_PaymentParams_$9916_memory_ptr_fromMemory": {
              "entryPoint": 1563,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_t_uint256_fromMemory": {
              "entryPoint": 1550,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_addresst_string_memory_ptrt_string_memory_ptrt_string_memory_ptrt_addresst_struct$_PaymentParams_$9916_memory_ptr_fromMemory": {
              "entryPoint": 1779,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 6
            },
            "abi_encode_t_address_to_t_address_fromStack": {
              "entryPoint": 2024,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_t_bytes32_to_t_bytes32_fromStack": {
              "entryPoint": 2016,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 2121,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_t_uint256_to_t_uint256_fromStack": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed": {
              "entryPoint": 2035,
              "id": null,
              "parameterSlots": 6,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 2178,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "allocate_memory": {
              "entryPoint": 1292,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "allocate_unbounded": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "array_allocation_size_t_string_memory_ptr": {
              "entryPoint": 1323,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_dataslot_t_bytes_memory_ptr": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_length_t_bytes_memory_ptr": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_length_t_string_memory_ptr": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "cleanup_t_address": {
              "entryPoint": 1153,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "cleanup_t_bytes32": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "cleanup_t_uint160": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "cleanup_t_uint256": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32": {
              "entryPoint": 2215,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "copy_memory_to_memory": {
              "entryPoint": 1371,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "extract_byte_array_length": {
              "entryPoint": 2305,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "finalize_allocation": {
              "entryPoint": 1242,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "panic_error_0x22": {
              "entryPoint": 2283,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x41": {
              "entryPoint": 1220,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "read_from_memoryt_bytes32": {
              "entryPoint": 2204,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "round_up_to_mul_of_32": {
              "entryPoint": 1210,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "shift_left_dynamic": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "validator_revert_t_address": {
              "entryPoint": 1171,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "validator_revert_t_uint256": {
              "entryPoint": 1543,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:11054:55",
                "statements": [
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "47:35:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "57:19:55",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "73:2:55",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "67:5:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "67:9:55"
                          },
                          "variableNames": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulIdentifier",
                              "src": "57:6:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "allocate_unbounded",
                    "nodeType": "YulFunctionDefinition",
                    "returnVariables": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "40:6:55",
                        "type": ""
                      }
                    ],
                    "src": "7:75:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "177:28:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "194:1:55",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "197:1:55",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "187:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "187:12:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "187:12:55"
                        }
                      ]
                    },
                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                    "nodeType": "YulFunctionDefinition",
                    "src": "88:117:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "300:28:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "317:1:55",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "320:1:55",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "310:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "310:12:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "310:12:55"
                        }
                      ]
                    },
                    "name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                    "nodeType": "YulFunctionDefinition",
                    "src": "211:117:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "379:81:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "389:65:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "404:5:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "411:42:55",
                                "type": "",
                                "value": "0xffffffffffffffffffffffffffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "400:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "400:54:55"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nodeType": "YulIdentifier",
                              "src": "389:7:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_uint160",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "361:5:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nodeType": "YulTypedName",
                        "src": "371:7:55",
                        "type": ""
                      }
                    ],
                    "src": "334:126:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "511:51:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "521:35:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "550:5:55"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint160",
                              "nodeType": "YulIdentifier",
                              "src": "532:17:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "532:24:55"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nodeType": "YulIdentifier",
                              "src": "521:7:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "493:5:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nodeType": "YulTypedName",
                        "src": "503:7:55",
                        "type": ""
                      }
                    ],
                    "src": "466:96:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "611:79:55",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "668:16:55",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "677:1:55",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "680:1:55",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "670:6:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "670:12:55"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "670:12:55"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "634:5:55"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "659:5:55"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "cleanup_t_address",
                                      "nodeType": "YulIdentifier",
                                      "src": "641:17:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "641:24:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "631:2:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "631:35:55"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "624:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "624:43:55"
                          },
                          "nodeType": "YulIf",
                          "src": "621:63:55"
                        }
                      ]
                    },
                    "name": "validator_revert_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "604:5:55",
                        "type": ""
                      }
                    ],
                    "src": "568:122:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "759:80:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "769:22:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "784:6:55"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "778:5:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "778:13:55"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "769:5:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "827:5:55"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_address",
                              "nodeType": "YulIdentifier",
                              "src": "800:26:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "800:33:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "800:33:55"
                        }
                      ]
                    },
                    "name": "abi_decode_t_address_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "737:6:55",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "745:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "753:5:55",
                        "type": ""
                      }
                    ],
                    "src": "696:143:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "934:28:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "951:1:55",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "954:1:55",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "944:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "944:12:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "944:12:55"
                        }
                      ]
                    },
                    "name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
                    "nodeType": "YulFunctionDefinition",
                    "src": "845:117:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1057:28:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1074:1:55",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1077:1:55",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "1067:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1067:12:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1067:12:55"
                        }
                      ]
                    },
                    "name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
                    "nodeType": "YulFunctionDefinition",
                    "src": "968:117:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1139:54:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1149:38:55",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "1167:5:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1174:2:55",
                                    "type": "",
                                    "value": "31"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1163:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1163:14:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1183:2:55",
                                    "type": "",
                                    "value": "31"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "1179:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1179:7:55"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "1159:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1159:28:55"
                          },
                          "variableNames": [
                            {
                              "name": "result",
                              "nodeType": "YulIdentifier",
                              "src": "1149:6:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "round_up_to_mul_of_32",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "1122:5:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "result",
                        "nodeType": "YulTypedName",
                        "src": "1132:6:55",
                        "type": ""
                      }
                    ],
                    "src": "1091:102:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1227:152:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1244:1:55",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1247:77:55",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1237:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1237:88:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1237:88:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1341:1:55",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1344:4:55",
                                "type": "",
                                "value": "0x41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1334:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1334:15:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1334:15:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1365:1:55",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1368:4:55",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "1358:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1358:15:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1358:15:55"
                        }
                      ]
                    },
                    "name": "panic_error_0x41",
                    "nodeType": "YulFunctionDefinition",
                    "src": "1199:180:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1428:238:55",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1438:58:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "1460:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "size",
                                    "nodeType": "YulIdentifier",
                                    "src": "1490:4:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "round_up_to_mul_of_32",
                                  "nodeType": "YulIdentifier",
                                  "src": "1468:21:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1468:27:55"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1456:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1456:40:55"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "1442:10:55",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1607:22:55",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "1609:16:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1609:18:55"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1609:18:55"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "1550:10:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1562:18:55",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1547:2:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1547:34:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "1586:10:55"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "1598:6:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1583:2:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1583:22:55"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "1544:2:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1544:62:55"
                          },
                          "nodeType": "YulIf",
                          "src": "1541:88:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1645:2:55",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "1649:10:55"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1638:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1638:22:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1638:22:55"
                        }
                      ]
                    },
                    "name": "finalize_allocation",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "1414:6:55",
                        "type": ""
                      },
                      {
                        "name": "size",
                        "nodeType": "YulTypedName",
                        "src": "1422:4:55",
                        "type": ""
                      }
                    ],
                    "src": "1385:281:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1713:88:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1723:30:55",
                          "value": {
                            "arguments": [],
                            "functionName": {
                              "name": "allocate_unbounded",
                              "nodeType": "YulIdentifier",
                              "src": "1733:18:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1733:20:55"
                          },
                          "variableNames": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulIdentifier",
                              "src": "1723:6:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "1782:6:55"
                              },
                              {
                                "name": "size",
                                "nodeType": "YulIdentifier",
                                "src": "1790:4:55"
                              }
                            ],
                            "functionName": {
                              "name": "finalize_allocation",
                              "nodeType": "YulIdentifier",
                              "src": "1762:19:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1762:33:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1762:33:55"
                        }
                      ]
                    },
                    "name": "allocate_memory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "size",
                        "nodeType": "YulTypedName",
                        "src": "1697:4:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "1706:6:55",
                        "type": ""
                      }
                    ],
                    "src": "1672:129:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1874:241:55",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1979:22:55",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "1981:16:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1981:18:55"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1981:18:55"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "1951:6:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1959:18:55",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1948:2:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1948:30:55"
                          },
                          "nodeType": "YulIf",
                          "src": "1945:56:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2011:37:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "2041:6:55"
                              }
                            ],
                            "functionName": {
                              "name": "round_up_to_mul_of_32",
                              "nodeType": "YulIdentifier",
                              "src": "2019:21:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2019:29:55"
                          },
                          "variableNames": [
                            {
                              "name": "size",
                              "nodeType": "YulIdentifier",
                              "src": "2011:4:55"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2085:23:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "size",
                                "nodeType": "YulIdentifier",
                                "src": "2097:4:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2103:4:55",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2093:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2093:15:55"
                          },
                          "variableNames": [
                            {
                              "name": "size",
                              "nodeType": "YulIdentifier",
                              "src": "2085:4:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_allocation_size_t_string_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "1858:6:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "size",
                        "nodeType": "YulTypedName",
                        "src": "1869:4:55",
                        "type": ""
                      }
                    ],
                    "src": "1807:308:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2170:258:55",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2180:10:55",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "2189:1:55",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "2184:1:55",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2249:63:55",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "2274:3:55"
                                        },
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "2279:1:55"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "2270:3:55"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2270:11:55"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "src",
                                              "nodeType": "YulIdentifier",
                                              "src": "2293:3:55"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "2298:1:55"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "2289:3:55"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "2289:11:55"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "2283:5:55"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2283:18:55"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "2263:6:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2263:39:55"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2263:39:55"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "2210:1:55"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "2213:6:55"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "2207:2:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2207:13:55"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "2221:19:55",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "2223:15:55",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "2232:1:55"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2235:2:55",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "2228:3:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2228:10:55"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "2223:1:55"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "2203:3:55",
                            "statements": []
                          },
                          "src": "2199:113:55"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2346:76:55",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "2396:3:55"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "2401:6:55"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "2392:3:55"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "2392:16:55"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "2410:1:55",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "2385:6:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2385:27:55"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2385:27:55"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "2327:1:55"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "2330:6:55"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "2324:2:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2324:13:55"
                          },
                          "nodeType": "YulIf",
                          "src": "2321:101:55"
                        }
                      ]
                    },
                    "name": "copy_memory_to_memory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "2152:3:55",
                        "type": ""
                      },
                      {
                        "name": "dst",
                        "nodeType": "YulTypedName",
                        "src": "2157:3:55",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "2162:6:55",
                        "type": ""
                      }
                    ],
                    "src": "2121:307:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2529:326:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "2539:75:55",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "2606:6:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "array_allocation_size_t_string_memory_ptr",
                                  "nodeType": "YulIdentifier",
                                  "src": "2564:41:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2564:49:55"
                              }
                            ],
                            "functionName": {
                              "name": "allocate_memory",
                              "nodeType": "YulIdentifier",
                              "src": "2548:15:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2548:66:55"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "2539:5:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "array",
                                "nodeType": "YulIdentifier",
                                "src": "2630:5:55"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "2637:6:55"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2623:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2623:21:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2623:21:55"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2653:27:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "array",
                                "nodeType": "YulIdentifier",
                                "src": "2668:5:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2675:4:55",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2664:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2664:16:55"
                          },
                          "variables": [
                            {
                              "name": "dst",
                              "nodeType": "YulTypedName",
                              "src": "2657:3:55",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2718:83:55",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
                                    "nodeType": "YulIdentifier",
                                    "src": "2720:77:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2720:79:55"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2720:79:55"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "src",
                                    "nodeType": "YulIdentifier",
                                    "src": "2699:3:55"
                                  },
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "2704:6:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2695:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2695:16:55"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "2713:3:55"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "2692:2:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2692:25:55"
                          },
                          "nodeType": "YulIf",
                          "src": "2689:112:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "src",
                                "nodeType": "YulIdentifier",
                                "src": "2832:3:55"
                              },
                              {
                                "name": "dst",
                                "nodeType": "YulIdentifier",
                                "src": "2837:3:55"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "2842:6:55"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "2810:21:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2810:39:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2810:39:55"
                        }
                      ]
                    },
                    "name": "abi_decode_available_length_t_string_memory_ptr_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "2502:3:55",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "2507:6:55",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "2515:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "2523:5:55",
                        "type": ""
                      }
                    ],
                    "src": "2434:421:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2948:282:55",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2997:83:55",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
                                    "nodeType": "YulIdentifier",
                                    "src": "2999:77:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2999:79:55"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2999:79:55"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "2976:6:55"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2984:4:55",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "2972:3:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2972:17:55"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "2991:3:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "2968:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2968:27:55"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "2961:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2961:35:55"
                          },
                          "nodeType": "YulIf",
                          "src": "2958:122:55"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3089:27:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "3109:6:55"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "3103:5:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3103:13:55"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "3093:6:55",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3125:99:55",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "3197:6:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3205:4:55",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3193:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3193:17:55"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "3212:6:55"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "3220:3:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_available_length_t_string_memory_ptr_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "3134:58:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3134:90:55"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "3125:5:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_t_string_memory_ptr_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "2926:6:55",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "2934:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "2942:5:55",
                        "type": ""
                      }
                    ],
                    "src": "2875:355:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3325:28:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3342:1:55",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3345:1:55",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "3335:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3335:12:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3335:12:55"
                        }
                      ]
                    },
                    "name": "revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f",
                    "nodeType": "YulFunctionDefinition",
                    "src": "3236:117:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3448:28:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3465:1:55",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3468:1:55",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "3458:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3458:12:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3458:12:55"
                        }
                      ]
                    },
                    "name": "revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421",
                    "nodeType": "YulFunctionDefinition",
                    "src": "3359:117:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3527:32:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "3537:16:55",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "3548:5:55"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nodeType": "YulIdentifier",
                              "src": "3537:7:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "3509:5:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nodeType": "YulTypedName",
                        "src": "3519:7:55",
                        "type": ""
                      }
                    ],
                    "src": "3482:77:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3608:79:55",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3665:16:55",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3674:1:55",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3677:1:55",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3667:6:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3667:12:55"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3667:12:55"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "3631:5:55"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "3656:5:55"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "cleanup_t_uint256",
                                      "nodeType": "YulIdentifier",
                                      "src": "3638:17:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3638:24:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "3628:2:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3628:35:55"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "3621:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3621:43:55"
                          },
                          "nodeType": "YulIf",
                          "src": "3618:63:55"
                        }
                      ]
                    },
                    "name": "validator_revert_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "3601:5:55",
                        "type": ""
                      }
                    ],
                    "src": "3565:122:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3756:80:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "3766:22:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "3781:6:55"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "3775:5:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3775:13:55"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "3766:5:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "3824:5:55"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_uint256",
                              "nodeType": "YulIdentifier",
                              "src": "3797:26:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3797:33:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3797:33:55"
                        }
                      ]
                    },
                    "name": "abi_decode_t_uint256_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "3734:6:55",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "3742:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "3750:5:55",
                        "type": ""
                      }
                    ],
                    "src": "3693:143:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3982:1643:55",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4028:83:55",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f",
                                    "nodeType": "YulIdentifier",
                                    "src": "4030:77:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4030:79:55"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4030:79:55"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "4003:3:55"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4008:9:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3999:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3999:19:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4020:6:55",
                                "type": "",
                                "value": "0x0100"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "3995:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3995:32:55"
                          },
                          "nodeType": "YulIf",
                          "src": "3992:119:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4120:32:55",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4145:6:55",
                                "type": "",
                                "value": "0x0100"
                              }
                            ],
                            "functionName": {
                              "name": "allocate_memory",
                              "nodeType": "YulIdentifier",
                              "src": "4129:15:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4129:23:55"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "4120:5:55"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "4162:167:55",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4203:15:55",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4217:1:55",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "4207:6:55",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "4243:5:55"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4250:4:55",
                                        "type": "",
                                        "value": "0x00"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4239:3:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4239:16:55"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "headStart",
                                            "nodeType": "YulIdentifier",
                                            "src": "4293:9:55"
                                          },
                                          {
                                            "name": "offset",
                                            "nodeType": "YulIdentifier",
                                            "src": "4304:6:55"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "4289:3:55"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "4289:22:55"
                                      },
                                      {
                                        "name": "end",
                                        "nodeType": "YulIdentifier",
                                        "src": "4313:3:55"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "abi_decode_t_address_fromMemory",
                                      "nodeType": "YulIdentifier",
                                      "src": "4257:31:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4257:60:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "4232:6:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4232:86:55"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "4232:86:55"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "4339:176:55",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4388:16:55",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4402:2:55",
                                "type": "",
                                "value": "32"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "4392:6:55",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "4429:5:55"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4436:4:55",
                                        "type": "",
                                        "value": "0x20"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4425:3:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4425:16:55"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "headStart",
                                            "nodeType": "YulIdentifier",
                                            "src": "4479:9:55"
                                          },
                                          {
                                            "name": "offset",
                                            "nodeType": "YulIdentifier",
                                            "src": "4490:6:55"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "4475:3:55"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "4475:22:55"
                                      },
                                      {
                                        "name": "end",
                                        "nodeType": "YulIdentifier",
                                        "src": "4499:3:55"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "abi_decode_t_address_fromMemory",
                                      "nodeType": "YulIdentifier",
                                      "src": "4443:31:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4443:60:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "4418:6:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4418:86:55"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "4418:86:55"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "4525:168:55",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4566:16:55",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4580:2:55",
                                "type": "",
                                "value": "64"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "4570:6:55",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "4607:5:55"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4614:4:55",
                                        "type": "",
                                        "value": "0x40"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4603:3:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4603:16:55"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "headStart",
                                            "nodeType": "YulIdentifier",
                                            "src": "4657:9:55"
                                          },
                                          {
                                            "name": "offset",
                                            "nodeType": "YulIdentifier",
                                            "src": "4668:6:55"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "4653:3:55"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "4653:22:55"
                                      },
                                      {
                                        "name": "end",
                                        "nodeType": "YulIdentifier",
                                        "src": "4677:3:55"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "abi_decode_t_address_fromMemory",
                                      "nodeType": "YulIdentifier",
                                      "src": "4621:31:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4621:60:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "4596:6:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4596:86:55"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "4596:86:55"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "4703:167:55",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4743:16:55",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4757:2:55",
                                "type": "",
                                "value": "96"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "4747:6:55",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "4784:5:55"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4791:4:55",
                                        "type": "",
                                        "value": "0x60"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4780:3:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4780:16:55"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "headStart",
                                            "nodeType": "YulIdentifier",
                                            "src": "4834:9:55"
                                          },
                                          {
                                            "name": "offset",
                                            "nodeType": "YulIdentifier",
                                            "src": "4845:6:55"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "4830:3:55"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "4830:22:55"
                                      },
                                      {
                                        "name": "end",
                                        "nodeType": "YulIdentifier",
                                        "src": "4854:3:55"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "abi_decode_t_address_fromMemory",
                                      "nodeType": "YulIdentifier",
                                      "src": "4798:31:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4798:60:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "4773:6:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4773:86:55"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "4773:86:55"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "4880:177:55",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "4929:17:55",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4943:3:55",
                                "type": "",
                                "value": "128"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "4933:6:55",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "4971:5:55"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4978:4:55",
                                        "type": "",
                                        "value": "0x80"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "4967:3:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4967:16:55"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "headStart",
                                            "nodeType": "YulIdentifier",
                                            "src": "5021:9:55"
                                          },
                                          {
                                            "name": "offset",
                                            "nodeType": "YulIdentifier",
                                            "src": "5032:6:55"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "5017:3:55"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "5017:22:55"
                                      },
                                      {
                                        "name": "end",
                                        "nodeType": "YulIdentifier",
                                        "src": "5041:3:55"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "abi_decode_t_address_fromMemory",
                                      "nodeType": "YulIdentifier",
                                      "src": "4985:31:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4985:60:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "4960:6:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4960:86:55"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "4960:86:55"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "5067:178:55",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "5117:17:55",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5131:3:55",
                                "type": "",
                                "value": "160"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "5121:6:55",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "5159:5:55"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5166:4:55",
                                        "type": "",
                                        "value": "0xa0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5155:3:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5155:16:55"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "headStart",
                                            "nodeType": "YulIdentifier",
                                            "src": "5209:9:55"
                                          },
                                          {
                                            "name": "offset",
                                            "nodeType": "YulIdentifier",
                                            "src": "5220:6:55"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "5205:3:55"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "5205:22:55"
                                      },
                                      {
                                        "name": "end",
                                        "nodeType": "YulIdentifier",
                                        "src": "5229:3:55"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "abi_decode_t_address_fromMemory",
                                      "nodeType": "YulIdentifier",
                                      "src": "5173:31:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5173:60:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "5148:6:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5148:86:55"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "5148:86:55"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "5255:176:55",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "5303:17:55",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5317:3:55",
                                "type": "",
                                "value": "192"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "5307:6:55",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "5345:5:55"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5352:4:55",
                                        "type": "",
                                        "value": "0xc0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5341:3:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5341:16:55"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "headStart",
                                            "nodeType": "YulIdentifier",
                                            "src": "5395:9:55"
                                          },
                                          {
                                            "name": "offset",
                                            "nodeType": "YulIdentifier",
                                            "src": "5406:6:55"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "5391:3:55"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "5391:22:55"
                                      },
                                      {
                                        "name": "end",
                                        "nodeType": "YulIdentifier",
                                        "src": "5415:3:55"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "abi_decode_t_uint256_fromMemory",
                                      "nodeType": "YulIdentifier",
                                      "src": "5359:31:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5359:60:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "5334:6:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5334:86:55"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "5334:86:55"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "5441:177:55",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "5490:17:55",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5504:3:55",
                                "type": "",
                                "value": "224"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "5494:6:55",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "expression": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "5532:5:55"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5539:4:55",
                                        "type": "",
                                        "value": "0xe0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "5528:3:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5528:16:55"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "headStart",
                                            "nodeType": "YulIdentifier",
                                            "src": "5582:9:55"
                                          },
                                          {
                                            "name": "offset",
                                            "nodeType": "YulIdentifier",
                                            "src": "5593:6:55"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "5578:3:55"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "5578:22:55"
                                      },
                                      {
                                        "name": "end",
                                        "nodeType": "YulIdentifier",
                                        "src": "5602:3:55"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "abi_decode_t_uint256_fromMemory",
                                      "nodeType": "YulIdentifier",
                                      "src": "5546:31:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5546:60:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "mstore",
                                  "nodeType": "YulIdentifier",
                                  "src": "5521:6:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5521:86:55"
                              },
                              "nodeType": "YulExpressionStatement",
                              "src": "5521:86:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_t_struct$_PaymentParams_$9916_memory_ptr_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3957:9:55",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "3968:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "3976:5:55",
                        "type": ""
                      }
                    ],
                    "src": "3885:1740:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5854:1492:55",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5901:83:55",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nodeType": "YulIdentifier",
                                    "src": "5903:77:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5903:79:55"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5903:79:55"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "5875:7:55"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5884:9:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "5871:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5871:23:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5896:3:55",
                                "type": "",
                                "value": "416"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "5867:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5867:33:55"
                          },
                          "nodeType": "YulIf",
                          "src": "5864:120:55"
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "5994:128:55",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "6009:15:55",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6023:1:55",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "6013:6:55",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "6038:74:55",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "6084:9:55"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "6095:6:55"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6080:3:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6080:22:55"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "6104:7:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_address_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "6048:31:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6048:64:55"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "6038:6:55"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "6132:292:55",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "6147:39:55",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "6171:9:55"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6182:2:55",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6167:3:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6167:18:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "6161:5:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6161:25:55"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "6151:6:55",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "6233:83:55",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                                        "nodeType": "YulIdentifier",
                                        "src": "6235:77:55"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "6235:79:55"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "6235:79:55"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "6205:6:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6213:18:55",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "6202:2:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6202:30:55"
                              },
                              "nodeType": "YulIf",
                              "src": "6199:117:55"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "6330:84:55",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "6386:9:55"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "6397:6:55"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6382:3:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6382:22:55"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "6406:7:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_string_memory_ptr_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "6340:41:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6340:74:55"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nodeType": "YulIdentifier",
                                  "src": "6330:6:55"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "6434:292:55",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "6449:39:55",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "6473:9:55"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6484:2:55",
                                        "type": "",
                                        "value": "64"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6469:3:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6469:18:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "6463:5:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6463:25:55"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "6453:6:55",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "6535:83:55",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                                        "nodeType": "YulIdentifier",
                                        "src": "6537:77:55"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "6537:79:55"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "6537:79:55"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "6507:6:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6515:18:55",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "6504:2:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6504:30:55"
                              },
                              "nodeType": "YulIf",
                              "src": "6501:117:55"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "6632:84:55",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "6688:9:55"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "6699:6:55"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6684:3:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6684:22:55"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "6708:7:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_string_memory_ptr_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "6642:41:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6642:74:55"
                              },
                              "variableNames": [
                                {
                                  "name": "value2",
                                  "nodeType": "YulIdentifier",
                                  "src": "6632:6:55"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "6736:292:55",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "6751:39:55",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "6775:9:55"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6786:2:55",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6771:3:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6771:18:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "6765:5:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6765:25:55"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "6755:6:55",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "6837:83:55",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                                        "nodeType": "YulIdentifier",
                                        "src": "6839:77:55"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "6839:79:55"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "6839:79:55"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "6809:6:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6817:18:55",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "6806:2:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6806:30:55"
                              },
                              "nodeType": "YulIf",
                              "src": "6803:117:55"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "6934:84:55",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "6990:9:55"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "7001:6:55"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "6986:3:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6986:22:55"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "7010:7:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_string_memory_ptr_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "6944:41:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6944:74:55"
                              },
                              "variableNames": [
                                {
                                  "name": "value3",
                                  "nodeType": "YulIdentifier",
                                  "src": "6934:6:55"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "7038:130:55",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "7053:17:55",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7067:3:55",
                                "type": "",
                                "value": "128"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "7057:6:55",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "7084:74:55",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "7130:9:55"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "7141:6:55"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "7126:3:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7126:22:55"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "7150:7:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_address_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "7094:31:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7094:64:55"
                              },
                              "variableNames": [
                                {
                                  "name": "value4",
                                  "nodeType": "YulIdentifier",
                                  "src": "7084:6:55"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "7178:161:55",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "7193:17:55",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7207:3:55",
                                "type": "",
                                "value": "160"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "7197:6:55",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "7224:105:55",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "7301:9:55"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "7312:6:55"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "7297:3:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7297:22:55"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "7321:7:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_struct$_PaymentParams_$9916_memory_ptr_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "7234:62:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7234:95:55"
                              },
                              "variableNames": [
                                {
                                  "name": "value5",
                                  "nodeType": "YulIdentifier",
                                  "src": "7224:6:55"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_string_memory_ptrt_string_memory_ptrt_string_memory_ptrt_addresst_struct$_PaymentParams_$9916_memory_ptr_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5784:9:55",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "5795:7:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5807:6:55",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "5815:6:55",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "5823:6:55",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "5831:6:55",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "5839:6:55",
                        "type": ""
                      },
                      {
                        "name": "value5",
                        "nodeType": "YulTypedName",
                        "src": "5847:6:55",
                        "type": ""
                      }
                    ],
                    "src": "5631:1715:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7397:32:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "7407:16:55",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "7418:5:55"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nodeType": "YulIdentifier",
                              "src": "7407:7:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_bytes32",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "7379:5:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nodeType": "YulTypedName",
                        "src": "7389:7:55",
                        "type": ""
                      }
                    ],
                    "src": "7352:77:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7500:53:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "7517:3:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "7540:5:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "cleanup_t_bytes32",
                                  "nodeType": "YulIdentifier",
                                  "src": "7522:17:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7522:24:55"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7510:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7510:37:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7510:37:55"
                        }
                      ]
                    },
                    "name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "7488:5:55",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "7495:3:55",
                        "type": ""
                      }
                    ],
                    "src": "7435:118:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7624:53:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "7641:3:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "7664:5:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "cleanup_t_uint256",
                                  "nodeType": "YulIdentifier",
                                  "src": "7646:17:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7646:24:55"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7634:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7634:37:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7634:37:55"
                        }
                      ]
                    },
                    "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "7612:5:55",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "7619:3:55",
                        "type": ""
                      }
                    ],
                    "src": "7559:118:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7748:53:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "7765:3:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "7788:5:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "cleanup_t_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "7770:17:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7770:24:55"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7758:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7758:37:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7758:37:55"
                        }
                      ]
                    },
                    "name": "abi_encode_t_address_to_t_address_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "7736:5:55",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "7743:3:55",
                        "type": ""
                      }
                    ],
                    "src": "7683:118:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8017:454:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "8027:27:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8039:9:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8050:3:55",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8035:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8035:19:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8027:4:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "8108:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8121:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8132:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8117:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8117:17:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "8064:43:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8064:71:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8064:71:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "8189:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8202:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8213:2:55",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8198:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8198:18:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "8145:43:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8145:72:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8145:72:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "8271:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8284:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8295:2:55",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8280:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8280:18:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "8227:43:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8227:72:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8227:72:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "8353:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8366:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8377:2:55",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8362:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8362:18:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "8309:43:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8309:72:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8309:72:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value4",
                                "nodeType": "YulIdentifier",
                                "src": "8435:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8448:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8459:3:55",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8444:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8444:19:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_address_to_t_address_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "8391:43:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8391:73:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8391:73:55"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7957:9:55",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "7969:6:55",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "7977:6:55",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "7985:6:55",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "7993:6:55",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "8001:6:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8012:4:55",
                        "type": ""
                      }
                    ],
                    "src": "7807:664:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8536:40:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "8547:22:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "8563:5:55"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "8557:5:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8557:12:55"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "8547:6:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_length_t_string_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "8519:5:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "8529:6:55",
                        "type": ""
                      }
                    ],
                    "src": "8477:99:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8678:73:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "8695:3:55"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "8700:6:55"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8688:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8688:19:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8688:19:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8716:29:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "8735:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8740:4:55",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8731:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8731:14:55"
                          },
                          "variableNames": [
                            {
                              "name": "updated_pos",
                              "nodeType": "YulIdentifier",
                              "src": "8716:11:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "8650:3:55",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "8655:6:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "updated_pos",
                        "nodeType": "YulTypedName",
                        "src": "8666:11:55",
                        "type": ""
                      }
                    ],
                    "src": "8582:169:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8849:272:55",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "8859:53:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "8906:5:55"
                              }
                            ],
                            "functionName": {
                              "name": "array_length_t_string_memory_ptr",
                              "nodeType": "YulIdentifier",
                              "src": "8873:32:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8873:39:55"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "8863:6:55",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8921:78:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "8987:3:55"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "8992:6:55"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "8928:58:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8928:71:55"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "8921:3:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "9034:5:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9041:4:55",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9030:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9030:16:55"
                              },
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "9048:3:55"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "9053:6:55"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "9008:21:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9008:52:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9008:52:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9069:46:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "9080:3:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "9107:6:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "round_up_to_mul_of_32",
                                  "nodeType": "YulIdentifier",
                                  "src": "9085:21:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9085:29:55"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9076:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9076:39:55"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "9069:3:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "8830:5:55",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "8837:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "8845:3:55",
                        "type": ""
                      }
                    ],
                    "src": "8757:364:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9245:195:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "9255:26:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9267:9:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9278:2:55",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9263:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9263:18:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "9255:4:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9302:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9313:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9298:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9298:17:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "9321:4:55"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9327:9:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "9317:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9317:20:55"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9291:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9291:47:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9291:47:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9347:86:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "9419:6:55"
                              },
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "9428:4:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "9355:63:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9355:78:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "9347:4:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9217:9:55",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "9229:6:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "9240:4:55",
                        "type": ""
                      }
                    ],
                    "src": "9127:313:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9504:40:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "9515:22:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "9531:5:55"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "9525:5:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9525:12:55"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "9515:6:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_length_t_bytes_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "9487:5:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "9497:6:55",
                        "type": ""
                      }
                    ],
                    "src": "9446:98:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9606:60:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "9616:11:55",
                          "value": {
                            "name": "ptr",
                            "nodeType": "YulIdentifier",
                            "src": "9624:3:55"
                          },
                          "variableNames": [
                            {
                              "name": "data",
                              "nodeType": "YulIdentifier",
                              "src": "9616:4:55"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9637:22:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "ptr",
                                "nodeType": "YulIdentifier",
                                "src": "9649:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9654:4:55",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9645:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9645:14:55"
                          },
                          "variableNames": [
                            {
                              "name": "data",
                              "nodeType": "YulIdentifier",
                              "src": "9637:4:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_dataslot_t_bytes_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "ptr",
                        "nodeType": "YulTypedName",
                        "src": "9593:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "9601:4:55",
                        "type": ""
                      }
                    ],
                    "src": "9550:116:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9727:99:55",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9738:42:55",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "ptr",
                                    "nodeType": "YulIdentifier",
                                    "src": "9775:3:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "9769:5:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9769:10:55"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_bytes32",
                              "nodeType": "YulIdentifier",
                              "src": "9751:17:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9751:29:55"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "9742:5:55",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9790:29:55",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "9814:5:55"
                          },
                          "variableNames": [
                            {
                              "name": "returnValue",
                              "nodeType": "YulIdentifier",
                              "src": "9790:11:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "read_from_memoryt_bytes32",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "ptr",
                        "nodeType": "YulTypedName",
                        "src": "9707:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "returnValue",
                        "nodeType": "YulTypedName",
                        "src": "9715:11:55",
                        "type": ""
                      }
                    ],
                    "src": "9672:154:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9885:54:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "9895:37:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "bits",
                                "nodeType": "YulIdentifier",
                                "src": "9920:4:55"
                              },
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "9926:5:55"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "9916:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9916:16:55"
                          },
                          "variableNames": [
                            {
                              "name": "newValue",
                              "nodeType": "YulIdentifier",
                              "src": "9895:8:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "shift_left_dynamic",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "bits",
                        "nodeType": "YulTypedName",
                        "src": "9860:4:55",
                        "type": ""
                      },
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "9866:5:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "newValue",
                        "nodeType": "YulTypedName",
                        "src": "9876:8:55",
                        "type": ""
                      }
                    ],
                    "src": "9832:107:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10035:504:55",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10046:52:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "array",
                                "nodeType": "YulIdentifier",
                                "src": "10092:5:55"
                              }
                            ],
                            "functionName": {
                              "name": "array_length_t_bytes_memory_ptr",
                              "nodeType": "YulIdentifier",
                              "src": "10060:31:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10060:38:55"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "10050:6:55",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10107:21:55",
                          "value": {
                            "name": "array",
                            "nodeType": "YulIdentifier",
                            "src": "10123:5:55"
                          },
                          "variables": [
                            {
                              "name": "dataArea",
                              "nodeType": "YulTypedName",
                              "src": "10111:8:55",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10138:52:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "array",
                                "nodeType": "YulIdentifier",
                                "src": "10184:5:55"
                              }
                            ],
                            "functionName": {
                              "name": "array_dataslot_t_bytes_memory_ptr",
                              "nodeType": "YulIdentifier",
                              "src": "10150:33:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10150:40:55"
                          },
                          "variableNames": [
                            {
                              "name": "dataArea",
                              "nodeType": "YulIdentifier",
                              "src": "10138:8:55"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10200:44:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "dataArea",
                                "nodeType": "YulIdentifier",
                                "src": "10235:8:55"
                              }
                            ],
                            "functionName": {
                              "name": "read_from_memoryt_bytes32",
                              "nodeType": "YulIdentifier",
                              "src": "10209:25:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10209:35:55"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "10200:5:55"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10272:260:55",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "10286:236:55",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "value",
                                      "nodeType": "YulIdentifier",
                                      "src": "10316:5:55"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "10383:1:55",
                                              "type": "",
                                              "value": "8"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "10390:2:55",
                                                  "type": "",
                                                  "value": "32"
                                                },
                                                {
                                                  "name": "length",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "10394:6:55"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "sub",
                                                "nodeType": "YulIdentifier",
                                                "src": "10386:3:55"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "10386:15:55"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mul",
                                            "nodeType": "YulIdentifier",
                                            "src": "10379:3:55"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "10379:23:55"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "10424:66:55",
                                          "type": "",
                                          "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shift_left_dynamic",
                                        "nodeType": "YulIdentifier",
                                        "src": "10339:18:55"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "10339:169:55"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "10295:3:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10295:227:55"
                                },
                                "variableNames": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "10286:5:55"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "10260:6:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10268:2:55",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "10257:2:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10257:14:55"
                          },
                          "nodeType": "YulIf",
                          "src": "10254:278:55"
                        }
                      ]
                    },
                    "name": "convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "10019:5:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "10029:5:55",
                        "type": ""
                      }
                    ],
                    "src": "9945:594:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10573:152:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10590:1:55",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10593:77:55",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10583:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10583:88:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10583:88:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10687:1:55",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10690:4:55",
                                "type": "",
                                "value": "0x22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10680:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10680:15:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10680:15:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10711:1:55",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10714:4:55",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "10704:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10704:15:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10704:15:55"
                        }
                      ]
                    },
                    "name": "panic_error_0x22",
                    "nodeType": "YulFunctionDefinition",
                    "src": "10545:180:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10782:269:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "10792:22:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "10806:4:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10812:1:55",
                                "type": "",
                                "value": "2"
                              }
                            ],
                            "functionName": {
                              "name": "div",
                              "nodeType": "YulIdentifier",
                              "src": "10802:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10802:12:55"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "10792:6:55"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10823:38:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "10853:4:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10859:1:55",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "10849:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10849:12:55"
                          },
                          "variables": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nodeType": "YulTypedName",
                              "src": "10827:18:55",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10900:51:55",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "10914:27:55",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "length",
                                      "nodeType": "YulIdentifier",
                                      "src": "10928:6:55"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10936:4:55",
                                      "type": "",
                                      "value": "0x7f"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "10924:3:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10924:17:55"
                                },
                                "variableNames": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "10914:6:55"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "10880:18:55"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "10873:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10873:26:55"
                          },
                          "nodeType": "YulIf",
                          "src": "10870:81:55"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "11003:42:55",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x22",
                                    "nodeType": "YulIdentifier",
                                    "src": "11017:16:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "11017:18:55"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "11017:18:55"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "10967:18:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "10990:6:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10998:2:55",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "10987:2:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10987:14:55"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "10964:2:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10964:38:55"
                          },
                          "nodeType": "YulIf",
                          "src": "10961:84:55"
                        }
                      ]
                    },
                    "name": "extract_byte_array_length",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "10766:4:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "10775:6:55",
                        "type": ""
                      }
                    ],
                    "src": "10731:320:55"
                  }
                ]
              },
              "contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr_fromMemory(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_memory_to_memory(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr_fromMemory(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := mload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr_fromMemory(add(offset, 0x20), length, end)\n    }\n\n    function revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() {\n        revert(0, 0)\n    }\n\n    function revert_error_5e8f644817bc4960744f35c15999b6eff64ae702f94b1c46297cfd4e1aec2421() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    // struct PaymentGateway.PaymentParams\n    function abi_decode_t_struct$_PaymentParams_$9916_memory_ptr_fromMemory(headStart, end) -> value {\n        if slt(sub(end, headStart), 0x0100) { revert_error_3538a459e4a0eb828f1aed5ebe5dc96fe59620a31d9b33e41259bb820cae769f() }\n        value := allocate_memory(0x0100)\n\n        {\n            // swapRouter\n\n            let offset := 0\n\n            mstore(add(value, 0x00), abi_decode_t_address_fromMemory(add(headStart, offset), end))\n\n        }\n\n        {\n            // wrappedNativeToken\n\n            let offset := 32\n\n            mstore(add(value, 0x20), abi_decode_t_address_fromMemory(add(headStart, offset), end))\n\n        }\n\n        {\n            // stableCoin\n\n            let offset := 64\n\n            mstore(add(value, 0x40), abi_decode_t_address_fromMemory(add(headStart, offset), end))\n\n        }\n\n        {\n            // masaToken\n\n            let offset := 96\n\n            mstore(add(value, 0x60), abi_decode_t_address_fromMemory(add(headStart, offset), end))\n\n        }\n\n        {\n            // projectFeeReceiver\n\n            let offset := 128\n\n            mstore(add(value, 0x80), abi_decode_t_address_fromMemory(add(headStart, offset), end))\n\n        }\n\n        {\n            // protocolFeeReceiver\n\n            let offset := 160\n\n            mstore(add(value, 0xa0), abi_decode_t_address_fromMemory(add(headStart, offset), end))\n\n        }\n\n        {\n            // protocolFeeAmount\n\n            let offset := 192\n\n            mstore(add(value, 0xc0), abi_decode_t_uint256_fromMemory(add(headStart, offset), end))\n\n        }\n\n        {\n            // protocolFeePercent\n\n            let offset := 224\n\n            mstore(add(value, 0xe0), abi_decode_t_uint256_fromMemory(add(headStart, offset), end))\n\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_string_memory_ptrt_string_memory_ptrt_string_memory_ptrt_addresst_struct$_PaymentParams_$9916_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5 {\n        if slt(sub(dataEnd, headStart), 416) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := mload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := mload(add(headStart, 64))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value2 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := mload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 128\n\n            value4 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 160\n\n            value5 := abi_decode_t_struct$_PaymentParams_$9916_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart , value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 160)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_address_to_t_address_fromStack(value4,  add(headStart, 128))\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_dataslot_t_bytes_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function read_from_memoryt_bytes32(ptr) -> returnValue {\n\n        let value := cleanup_t_bytes32(mload(ptr))\n\n        returnValue :=\n\n        value\n\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32(array) -> value {\n\n        let length := array_length_t_bytes_memory_ptr(array)\n        let dataArea := array\n\n        dataArea := array_dataslot_t_bytes_memory_ptr(array)\n\n        value := read_from_memoryt_bytes32(dataArea)\n\n        if lt(length, 32) {\n            value := and(\n                value,\n                shift_left_dynamic(\n                    mul(8, sub(32, length)),\n                    0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n                )\n            )\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n}\n",
              "id": 55,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "linkReferences": {},
          "object": "",
          "opcodes": "PUSH2 0x160 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x4EA7 CODESIZE SUB DUP1 PUSH3 0x4EA7 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x35 SWAP2 PUSH3 0x6F3 JUMP JUMPDEST DUP6 DUP6 DUP6 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xE DUP2 MSTORE PUSH1 0x20 ADD PUSH14 0x29B7BAB63137BAB73223B932B2B7 PUSH1 0x91 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x5 DUP2 MSTORE PUSH1 0x20 ADD PUSH5 0x312E302E3 PUSH1 0xDC SHL DUP2 MSTORE POP DUP8 DUP8 DUP8 DUP8 DUP8 DUP8 DUP5 DUP5 DUP8 DUP4 PUSH3 0x9F PUSH1 0x0 DUP1 SHL DUP4 PUSH3 0x23B PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x20 DUP1 DUP5 ADD MLOAD PUSH1 0x2 DUP1 SLOAD DUP5 AND SWAP2 DUP6 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x3 DUP1 SLOAD DUP5 AND SWAP2 DUP6 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x4 DUP1 SLOAD DUP5 AND SWAP2 DUP6 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x80 DUP5 ADD MLOAD PUSH1 0x7 DUP1 SLOAD DUP5 AND SWAP2 DUP6 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0xA0 DUP5 ADD MLOAD PUSH1 0x8 DUP1 SLOAD SWAP1 SWAP4 AND SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SSTORE PUSH1 0xC0 DUP3 ADD MLOAD PUSH1 0x9 SSTORE PUSH1 0xE0 SWAP1 SWAP2 ADD MLOAD PUSH1 0xA SSTORE DUP4 MLOAD PUSH3 0x14A SWAP3 POP PUSH1 0xB SWAP2 DUP6 ADD SWAP1 PUSH3 0x3DB JUMP JUMPDEST POP DUP1 MLOAD PUSH3 0x160 SWAP1 PUSH1 0xC SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH3 0x3DB JUMP JUMPDEST POP PUSH3 0x172 SWAP2 POP PUSH1 0x0 SWAP1 POP DUP8 PUSH3 0x23B JUMP JUMPDEST DUP3 MLOAD PUSH3 0x187 SWAP1 PUSH1 0x13 SWAP1 PUSH1 0x20 DUP7 ADD SWAP1 PUSH3 0x3DB JUMP JUMPDEST POP DUP2 PUSH1 0x14 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP POP POP POP POP POP POP PUSH3 0x1D0 PUSH1 0x1B DUP4 PUSH3 0x2DC PUSH1 0x20 SHL PUSH3 0x1C1A OR SWAP1 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST PUSH2 0x120 MSTORE PUSH3 0x1ED DUP2 PUSH1 0x1C PUSH3 0x2DC PUSH1 0x20 SWAP1 DUP2 SHL PUSH3 0x1C1A OR SWAP1 SHR JUMP JUMPDEST PUSH2 0x140 MSTORE DUP2 MLOAD PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 KECCAK256 PUSH1 0xE0 MSTORE DUP2 MLOAD SWAP1 DUP3 ADD KECCAK256 PUSH2 0x100 MSTORE CHAINID PUSH1 0xA0 MSTORE PUSH3 0x217 PUSH3 0x330 JUMP JUMPDEST PUSH1 0x80 MSTORE POP POP POP ADDRESS PUSH1 0x60 SHL PUSH1 0xC0 MSTORE POP POP PUSH1 0x1 PUSH1 0x1F SSTORE POP PUSH3 0x932 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH3 0x2D8 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH3 0x297 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP4 MLOAD LT ISZERO PUSH3 0x2FC JUMPI PUSH3 0x2F4 DUP4 PUSH3 0x38C JUMP JUMPDEST SWAP1 POP PUSH3 0x32A JUMP JUMPDEST DUP3 PUSH3 0x313 DUP4 PUSH3 0x3D8 PUSH1 0x20 SHL PUSH3 0x1C51 OR PUSH1 0x20 SHR JUMP JUMPDEST DUP2 MLOAD PUSH3 0x324 SWAP3 PUSH1 0x20 ADD SWAP1 PUSH3 0x3DB JUMP JUMPDEST POP PUSH1 0xFF SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH1 0x40 MLOAD PUSH1 0x0 SWAP3 PUSH3 0x371 SWAP3 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F SWAP3 CHAINID SWAP1 ADDRESS SWAP1 PUSH1 0x20 ADD PUSH3 0x7F3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SWAP1 POP PUSH1 0x1F DUP2 MLOAD GT ISZERO PUSH3 0x3C3 JUMPI DUP3 PUSH1 0x40 MLOAD PUSH4 0x305A27A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH3 0x3BA SWAP2 SWAP1 PUSH3 0x882 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD PUSH3 0x3D0 DUP3 PUSH3 0x8A7 JUMP JUMPDEST OR SWAP4 SWAP3 POP POP POP JUMP JUMPDEST SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 0x3E9 SWAP1 PUSH3 0x901 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 0x40D JUMPI PUSH1 0x0 DUP6 SSTORE PUSH3 0x458 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH3 0x428 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x458 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x458 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x458 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x43B JUMP JUMPDEST POP PUSH3 0x466 SWAP3 SWAP2 POP PUSH3 0x46A JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x466 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x46B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH3 0x32A JUMP JUMPDEST PUSH3 0x49E DUP2 PUSH3 0x481 JUMP JUMPDEST DUP2 EQ PUSH3 0x4AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST DUP1 MLOAD PUSH3 0x32A DUP2 PUSH3 0x493 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH3 0x4E5 DUP3 PUSH3 0x4BA JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR ISZERO PUSH3 0x505 JUMPI PUSH3 0x505 PUSH3 0x4C4 JUMP JUMPDEST PUSH1 0x40 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x518 PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST SWAP1 POP PUSH3 0x526 DUP3 DUP3 PUSH3 0x4DA JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH3 0x547 JUMPI PUSH3 0x547 PUSH3 0x4C4 JUMP JUMPDEST PUSH3 0x552 DUP3 PUSH3 0x4BA JUMP JUMPDEST PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x578 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH3 0x55E JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH3 0x588 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x5A5 PUSH3 0x59F DUP5 PUSH3 0x52B JUMP JUMPDEST PUSH3 0x50C JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH3 0x5C2 JUMPI PUSH3 0x5C2 PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x5CF DUP5 DUP3 DUP6 PUSH3 0x55B JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x5ED JUMPI PUSH3 0x5ED PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH3 0x5FF DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x58E JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 PUSH3 0x49E JUMP JUMPDEST DUP1 MLOAD PUSH3 0x32A DUP2 PUSH3 0x607 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x633 JUMPI PUSH3 0x633 PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x640 PUSH2 0x100 PUSH3 0x50C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH3 0x650 DUP5 DUP5 PUSH3 0x4AD JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH3 0x663 DUP5 DUP5 DUP4 ADD PUSH3 0x4AD JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH3 0x679 DUP5 DUP3 DUP6 ADD PUSH3 0x4AD JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH3 0x68F DUP5 DUP3 DUP6 ADD PUSH3 0x4AD JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH3 0x6A5 DUP5 DUP3 DUP6 ADD PUSH3 0x4AD JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 PUSH3 0x6BB DUP5 DUP3 DUP6 ADD PUSH3 0x4AD JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP PUSH1 0xC0 PUSH3 0x6D1 DUP5 DUP3 DUP6 ADD PUSH3 0x60E JUMP JUMPDEST PUSH1 0xC0 DUP4 ADD MSTORE POP PUSH1 0xE0 PUSH3 0x6E7 DUP5 DUP3 DUP6 ADD PUSH3 0x60E JUMP JUMPDEST PUSH1 0xE0 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x1A0 DUP8 DUP10 SUB SLT ISZERO PUSH3 0x712 JUMPI PUSH3 0x712 PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH3 0x720 DUP10 DUP10 PUSH3 0x4AD JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 DUP8 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x741 JUMPI PUSH3 0x741 PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x74F DUP10 DUP3 DUP11 ADD PUSH3 0x5D7 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 DUP8 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x770 JUMPI PUSH3 0x770 PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x77E DUP10 DUP3 DUP11 ADD PUSH3 0x5D7 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 DUP8 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x79F JUMPI PUSH3 0x79F PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x7AD DUP10 DUP3 DUP11 ADD PUSH3 0x5D7 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x80 PUSH3 0x7C0 DUP10 DUP3 DUP11 ADD PUSH3 0x4AD JUMP JUMPDEST SWAP3 POP POP PUSH1 0xA0 PUSH3 0x7D3 DUP10 DUP3 DUP11 ADD PUSH3 0x61B JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST DUP1 JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH3 0x7E2 DUP2 PUSH3 0x481 JUMP JUMPDEST PUSH1 0xA0 DUP2 ADD PUSH3 0x803 DUP3 DUP9 PUSH3 0x7E0 JUMP JUMPDEST PUSH3 0x812 PUSH1 0x20 DUP4 ADD DUP8 PUSH3 0x7E0 JUMP JUMPDEST PUSH3 0x821 PUSH1 0x40 DUP4 ADD DUP7 PUSH3 0x7E0 JUMP JUMPDEST PUSH3 0x830 PUSH1 0x60 DUP4 ADD DUP6 PUSH3 0x7E0 JUMP JUMPDEST PUSH3 0x83F PUSH1 0x80 DUP4 ADD DUP5 PUSH3 0x7E8 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x854 DUP3 MLOAD SWAP1 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH3 0x86D DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH3 0x55B JUMP JUMPDEST PUSH3 0x878 DUP2 PUSH3 0x4BA JUMP JUMPDEST SWAP1 SWAP4 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH3 0x895 DUP2 DUP5 PUSH3 0x849 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x32A DUP3 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH3 0x8B2 DUP3 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD PUSH3 0x8C1 DUP2 PUSH3 0x89C JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP3 LT ISZERO PUSH3 0x8E4 JUMPI PUSH3 0x8DF PUSH1 0x0 NOT DUP4 PUSH1 0x20 SUB PUSH1 0x8 MUL SHL SWAP1 JUMP JUMPDEST DUP4 AND SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x2 DUP2 DIV PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x916 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH3 0x92C JUMPI PUSH3 0x92C PUSH3 0x8EB JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0x60 SHR PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH2 0x120 MLOAD PUSH2 0x140 MLOAD PUSH2 0x4517 PUSH3 0x990 PUSH1 0x0 CODECOPY PUSH1 0x0 PUSH2 0x153C ADD MSTORE PUSH1 0x0 PUSH2 0x1511 ADD MSTORE PUSH1 0x0 PUSH2 0x30A4 ADD MSTORE PUSH1 0x0 PUSH2 0x3083 ADD MSTORE PUSH1 0x0 PUSH2 0x2CE9 ADD MSTORE PUSH1 0x0 PUSH2 0x2D13 ADD MSTORE PUSH1 0x0 PUSH2 0x2D3D ADD MSTORE PUSH2 0x4517 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2C7 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH3 0xBDFDE5 EQ PUSH2 0x2CC JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x2EE JUMPI DUP1 PUSH4 0x513C3E9 EQ PUSH2 0x324 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x351 JUMPI DUP1 PUSH4 0x10200519 EQ PUSH2 0x373 JUMPI DUP1 PUSH4 0x13150B48 EQ PUSH2 0x395 JUMPI DUP1 PUSH4 0x17FCB39B EQ PUSH2 0x3B8 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x3D8 JUMPI DUP1 PUSH4 0x1830E881 EQ PUSH2 0x3ED JUMPI DUP1 PUSH4 0x1F37C124 EQ PUSH2 0x403 JUMPI DUP1 PUSH4 0x20D558AA EQ PUSH2 0x419 JUMPI DUP1 PUSH4 0x217A2C7B EQ PUSH2 0x42C JUMPI DUP1 PUSH4 0x23AF4E17 EQ PUSH2 0x44C JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x46C JUMPI DUP1 PUSH4 0x26DEFA73 EQ PUSH2 0x48C JUMPI DUP1 PUSH4 0x289C686B EQ PUSH2 0x4AC JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x4CC JUMPI DUP1 PUSH4 0x2F745C59 EQ PUSH2 0x4EC JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x50C JUMPI DUP1 PUSH4 0x39A51BE5 EQ PUSH2 0x52C JUMPI DUP1 PUSH4 0x3AD3033E EQ PUSH2 0x54C JUMPI DUP1 PUSH4 0x3C72AE70 EQ PUSH2 0x56C JUMPI DUP1 PUSH4 0x41273657 EQ PUSH2 0x58C JUMPI DUP1 PUSH4 0x41C04D5E EQ PUSH2 0x5AC JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x5CE JUMPI DUP1 PUSH4 0x46877B1A EQ PUSH2 0x5EE JUMPI DUP1 PUSH4 0x4962A158 EQ PUSH2 0x60E JUMPI DUP1 PUSH4 0x4F558E79 EQ PUSH2 0x62E JUMPI DUP1 PUSH4 0x4F6CCCE7 EQ PUSH2 0x64E JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x66E JUMPI DUP1 PUSH4 0x6817C76C EQ PUSH2 0x68E JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x6A4 JUMPI DUP1 PUSH4 0x719D0F2B EQ PUSH2 0x6C4 JUMPI DUP1 PUSH4 0x76AD1997 EQ PUSH2 0x6E4 JUMPI DUP1 PUSH4 0x776D1A54 EQ PUSH2 0x704 JUMPI DUP1 PUSH4 0x77BED5ED EQ PUSH2 0x71A JUMPI DUP1 PUSH4 0x7A0D1646 EQ PUSH2 0x747 JUMPI DUP1 PUSH4 0x7AD09DFF EQ PUSH2 0x777 JUMPI DUP1 PUSH4 0x7DB8CB68 EQ PUSH2 0x78A JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x7AA JUMPI DUP1 PUSH4 0x8D018461 EQ PUSH2 0x7D2 JUMPI DUP1 PUSH4 0x8EC9C93B EQ PUSH2 0x7F2 JUMPI DUP1 PUSH4 0x91223D69 EQ PUSH2 0x808 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x838 JUMPI DUP1 PUSH4 0x94A665E9 EQ PUSH2 0x858 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x878 JUMPI DUP1 PUSH4 0x992642E5 EQ PUSH2 0x88D JUMPI DUP1 PUSH4 0x99B589CB EQ PUSH2 0x8AD JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x8CD JUMPI DUP1 PUSH4 0xA4983421 EQ PUSH2 0x8E2 JUMPI DUP1 PUSH4 0xB97D6B23 EQ PUSH2 0x902 JUMPI DUP1 PUSH4 0xC1177D19 EQ PUSH2 0x918 JUMPI DUP1 PUSH4 0xC31C9C07 EQ PUSH2 0x938 JUMPI DUP1 PUSH4 0xC86AADB6 EQ PUSH2 0x958 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x978 JUMPI DUP1 PUSH4 0xD544E010 EQ PUSH2 0x998 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x9B8 JUMPI DUP1 PUSH4 0xD6E6EB9F EQ PUSH2 0x9D8 JUMPI DUP1 PUSH4 0xDA058AE3 EQ PUSH2 0x9EE JUMPI DUP1 PUSH4 0xEB93E855 EQ PUSH2 0xA0E JUMPI DUP1 PUSH4 0xEBDA4396 EQ PUSH2 0xA3C JUMPI DUP1 PUSH4 0xF4A0A528 EQ PUSH2 0xA5C JUMPI DUP1 PUSH4 0xFD48AC83 EQ PUSH2 0xA7C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH2 0x2E7 CALLDATASIZE PUSH1 0x4 PUSH2 0x365D JUMP JUMPDEST PUSH2 0xA9C JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x30E PUSH2 0x309 CALLDATASIZE PUSH1 0x4 PUSH2 0x3699 JUMP JUMPDEST PUSH2 0xAD0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x31B SWAP2 SWAP1 PUSH2 0x36C4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x330 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x344 PUSH2 0x33F CALLDATASIZE PUSH1 0x4 PUSH2 0x365D JUMP JUMPDEST PUSH2 0xAE1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x31B SWAP2 SWAP1 PUSH2 0x36F2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x35D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x366 PUSH2 0xB0B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x31B SWAP2 SWAP1 PUSH2 0x376A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x37F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x388 PUSH2 0xB9D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x31B SWAP2 SWAP1 PUSH2 0x37D8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3AB PUSH1 0x1A SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x31B SWAP2 SWAP1 PUSH2 0x37EF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD PUSH2 0x344 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x11 SLOAD PUSH2 0x3AB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3AB PUSH1 0x16 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x40F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3AB PUSH1 0x17 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x3AB PUSH2 0x427 CALLDATASIZE PUSH1 0x4 PUSH2 0x385B JUMP JUMPDEST PUSH2 0xBFE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x438 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3AB PUSH2 0x447 CALLDATASIZE PUSH1 0x4 PUSH2 0x38F0 JUMP JUMPDEST PUSH2 0xD36 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x458 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH2 0x467 CALLDATASIZE PUSH1 0x4 PUSH2 0x392D JUMP JUMPDEST PUSH2 0xD49 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x478 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3AB PUSH2 0x487 CALLDATASIZE PUSH1 0x4 PUSH2 0x365D JUMP JUMPDEST PUSH2 0xDA6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x498 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH2 0x4A7 CALLDATASIZE PUSH1 0x4 PUSH2 0x392D JUMP JUMPDEST PUSH2 0xDBB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH2 0x4C7 CALLDATASIZE PUSH1 0x4 PUSH2 0x365D JUMP JUMPDEST PUSH2 0xE8B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH2 0x4E7 CALLDATASIZE PUSH1 0x4 PUSH2 0x394E JUMP JUMPDEST PUSH2 0xEFE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3AB PUSH2 0x507 CALLDATASIZE PUSH1 0x4 PUSH2 0x38F0 JUMP JUMPDEST PUSH2 0xF1F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x518 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH2 0x527 CALLDATASIZE PUSH1 0x4 PUSH2 0x394E JUMP JUMPDEST PUSH2 0xF71 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x538 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x8 SLOAD PUSH2 0x344 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x558 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH2 0x567 CALLDATASIZE PUSH1 0x4 PUSH2 0x392D JUMP JUMPDEST PUSH2 0xFA7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x578 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH2 0x587 CALLDATASIZE PUSH1 0x4 PUSH2 0x365D JUMP JUMPDEST PUSH2 0x1004 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x598 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH2 0x5A7 CALLDATASIZE PUSH1 0x4 PUSH2 0x392D JUMP JUMPDEST PUSH2 0x1077 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3AB PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x44C2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH2 0x5E9 CALLDATASIZE PUSH1 0x4 PUSH2 0x365D JUMP JUMPDEST PUSH2 0x10D4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH2 0x609 CALLDATASIZE PUSH1 0x4 PUSH2 0x392D JUMP JUMPDEST PUSH2 0x1106 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x61A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH2 0x629 CALLDATASIZE PUSH1 0x4 PUSH2 0x365D JUMP JUMPDEST PUSH2 0x1163 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x63A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x30E PUSH2 0x649 CALLDATASIZE PUSH1 0x4 PUSH2 0x365D JUMP JUMPDEST PUSH2 0x11D6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x65A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3AB PUSH2 0x669 CALLDATASIZE PUSH1 0x4 PUSH2 0x365D JUMP JUMPDEST PUSH2 0x11E1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x67A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x344 PUSH2 0x689 CALLDATASIZE PUSH1 0x4 PUSH2 0x365D JUMP JUMPDEST PUSH2 0x122F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x69A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3AB PUSH1 0x15 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3AB PUSH2 0x6BF CALLDATASIZE PUSH1 0x4 PUSH2 0x392D JUMP JUMPDEST PUSH2 0x1264 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3AB PUSH2 0x6DF CALLDATASIZE PUSH1 0x4 PUSH2 0x392D JUMP JUMPDEST PUSH2 0x12A8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH2 0x6FF CALLDATASIZE PUSH1 0x4 PUSH2 0x392D JUMP JUMPDEST PUSH2 0x13A8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x710 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3AB PUSH1 0x18 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x726 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x14 SLOAD PUSH2 0x73A SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x31B SWAP2 SWAP1 PUSH2 0x39B6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x753 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x30E PUSH2 0x762 CALLDATASIZE PUSH1 0x4 PUSH2 0x392D JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x3AB PUSH2 0x785 CALLDATASIZE PUSH1 0x4 PUSH2 0x39C4 JUMP JUMPDEST PUSH2 0x1405 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x796 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH2 0x7A5 CALLDATASIZE PUSH1 0x4 PUSH2 0x365D JUMP JUMPDEST PUSH2 0x1490 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7BF PUSH2 0x1503 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x31B SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3A57 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH2 0x7ED CALLDATASIZE PUSH1 0x4 PUSH2 0x392D JUMP JUMPDEST PUSH2 0x158C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3AB PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x814 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x30E PUSH2 0x823 CALLDATASIZE PUSH1 0x4 PUSH2 0x392D JUMP JUMPDEST PUSH1 0x1E PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x844 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x30E PUSH2 0x853 CALLDATASIZE PUSH1 0x4 PUSH2 0x394E JUMP JUMPDEST PUSH2 0x1628 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x864 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH2 0x873 CALLDATASIZE PUSH1 0x4 PUSH2 0x392D JUMP JUMPDEST PUSH2 0x1651 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x884 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x366 PUSH2 0x17BE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x899 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3 SLOAD PUSH2 0x344 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x7 SLOAD PUSH2 0x344 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3AB PUSH1 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH2 0x8FD CALLDATASIZE PUSH1 0x4 PUSH2 0x365D JUMP JUMPDEST PUSH2 0x17CD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x90E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3AB PUSH1 0x19 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x924 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3AB PUSH2 0x933 CALLDATASIZE PUSH1 0x4 PUSH2 0x365D JUMP JUMPDEST PUSH2 0x1801 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x944 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 SLOAD PUSH2 0x344 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x964 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH2 0x973 CALLDATASIZE PUSH1 0x4 PUSH2 0x392D JUMP JUMPDEST PUSH2 0x18B9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x984 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x366 PUSH2 0x993 CALLDATASIZE PUSH1 0x4 PUSH2 0x365D JUMP JUMPDEST PUSH2 0x1965 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH2 0x9B3 CALLDATASIZE PUSH1 0x4 PUSH2 0x392D JUMP JUMPDEST PUSH2 0x19CB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH2 0x9D3 CALLDATASIZE PUSH1 0x4 PUSH2 0x394E JUMP JUMPDEST PUSH2 0x1A99 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3AB PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH2 0xA09 CALLDATASIZE PUSH1 0x4 PUSH2 0x392D JUMP JUMPDEST PUSH2 0x1AB5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA1A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA2E PUSH2 0xA29 CALLDATASIZE PUSH1 0x4 PUSH2 0x392D JUMP JUMPDEST PUSH2 0x1B12 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x31B SWAP3 SWAP2 SWAP1 PUSH2 0x3AC6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA48 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 SLOAD PUSH2 0x344 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA68 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH2 0xA77 CALLDATASIZE PUSH1 0x4 PUSH2 0x365D JUMP JUMPDEST PUSH2 0x1B34 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH2 0xA97 CALLDATASIZE PUSH1 0x4 PUSH2 0x365D JUMP JUMPDEST PUSH2 0x1BA7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAA7 DUP2 PUSH2 0x1C54 JUMP JUMPDEST PUSH1 0x9 SLOAD DUP3 EQ ISZERO PUSH2 0xACA JUMPI PUSH1 0x40 MLOAD PUSH4 0xC23F6CCB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x9 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0xADB DUP3 PUSH2 0x1C5E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x6 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xAF1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0xB DUP1 SLOAD PUSH2 0xB1A SWAP1 PUSH2 0x3AF7 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xB46 SWAP1 PUSH2 0x3AF7 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xB93 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xB68 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xB93 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xB76 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x6 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0xB93 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xBD7 JUMPI POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC08 PUSH2 0x1C83 JUMP JUMPDEST PUSH1 0x14 SLOAD PUSH1 0x40 MLOAD PUSH4 0x31A9108F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x6352211E SWAP1 PUSH2 0xC39 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x37EF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC65 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC89 SWAP2 SWAP1 PUSH2 0x3B2F JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0xCC0 JUMPI CALLER JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x60296C7 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP2 SWAP1 PUSH2 0x36F2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xCDA DUP10 DUP4 PUSH2 0xCD2 DUP12 DUP12 DUP12 PUSH2 0x1CAD JUMP JUMPDEST DUP11 DUP10 DUP10 PUSH2 0x1D0C JUMP JUMPDEST SWAP1 POP PUSH32 0xDC7A913FB88EF84B4EDAAE2C1CCC524475744905088D5C1362BAB12C676F9E97 DUP2 DUP10 DUP10 DUP10 DUP14 PUSH1 0x15 SLOAD PUSH1 0x40 MLOAD PUSH2 0xD17 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3B50 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 SWAP2 POP POP PUSH2 0xD2C PUSH1 0x1 PUSH1 0x1F SSTORE JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD42 DUP4 DUP4 PUSH2 0x1D9D JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD54 DUP2 PUSH2 0x1C54 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0xD83 JUMPI PUSH1 0x40 MLOAD PUSH4 0xC23F6CCB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xDC6 PUSH1 0x0 CALLER PUSH2 0x1628 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0xDE8 JUMPI POP PUSH2 0xDE6 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x44C2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER PUSH2 0x1628 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0xE06 JUMPI PUSH1 0x40 MLOAD PUSH4 0x26F0F481 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xE2D JUMPI PUSH1 0x40 MLOAD PUSH4 0xD92E233D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1E PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xE67 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF411C327 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1E PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xE96 PUSH1 0x0 CALLER PUSH2 0x1628 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0xEB8 JUMPI POP PUSH2 0xEB6 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x44C2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER PUSH2 0x1628 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0xED6 JUMPI PUSH1 0x40 MLOAD PUSH4 0x26F0F481 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x17 SLOAD EQ ISZERO PUSH2 0xEF9 JUMPI PUSH1 0x40 MLOAD PUSH4 0xC23F6CCB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x17 SSTORE JUMP JUMPDEST PUSH2 0xF07 DUP3 PUSH2 0xDA6 JUMP JUMPDEST PUSH2 0xF10 DUP2 PUSH2 0x1C54 JUMP JUMPDEST PUSH2 0xF1A DUP4 DUP4 PUSH2 0x1E0A JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF2A DUP4 PUSH2 0x1264 JUMP JUMPDEST DUP3 LT PUSH2 0xF48 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP1 PUSH2 0x3BE7 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0xF99 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP1 PUSH2 0x3C43 JUMP JUMPDEST PUSH2 0xFA3 DUP3 DUP3 PUSH2 0x1E8E JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFB2 DUP2 PUSH2 0x1C54 JUMP JUMPDEST PUSH1 0x14 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0xFE1 JUMPI PUSH1 0x40 MLOAD PUSH4 0xC23F6CCB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x14 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x100F PUSH1 0x0 CALLER PUSH2 0x1628 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x1031 JUMPI POP PUSH2 0x102F PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x44C2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER PUSH2 0x1628 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x104F JUMPI PUSH1 0x40 MLOAD PUSH4 0x26F0F481 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x18 SLOAD EQ ISZERO PUSH2 0x1072 JUMPI PUSH1 0x40 MLOAD PUSH4 0xC23F6CCB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x18 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1082 DUP2 PUSH2 0x1C54 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x10B1 JUMPI PUSH1 0x40 MLOAD PUSH4 0xC23F6CCB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x10DE CALLER DUP3 PUSH2 0x1EF3 JUMP JUMPDEST PUSH2 0x10FA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP1 PUSH2 0x3C8A JUMP JUMPDEST PUSH2 0x1103 DUP2 PUSH2 0x1F16 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1111 DUP2 PUSH2 0x1C54 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x1140 JUMPI PUSH1 0x40 MLOAD PUSH4 0xC23F6CCB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x116E PUSH1 0x0 CALLER PUSH2 0x1628 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x1190 JUMPI POP PUSH2 0x118E PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x44C2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER PUSH2 0x1628 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x11AE JUMPI PUSH1 0x40 MLOAD PUSH4 0x26F0F481 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x16 SLOAD EQ ISZERO PUSH2 0x11D1 JUMPI PUSH1 0x40 MLOAD PUSH4 0xC23F6CCB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x16 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0xADB DUP3 PUSH2 0x1FB0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11EC PUSH1 0x11 SLOAD SWAP1 JUMP JUMPDEST DUP3 LT PUSH2 0x120A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP1 PUSH2 0x3CE0 JUMP JUMPDEST PUSH1 0x11 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x121D JUMPI PUSH2 0x121D PUSH2 0x3CF0 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0xADB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP1 PUSH2 0x3D32 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x128C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP1 PUSH2 0x3D85 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x15 SLOAD PUSH1 0x0 EQ DUP1 ISZERO PUSH2 0x12BC JUMPI POP PUSH1 0x16 SLOAD ISZERO JUMPDEST ISZERO PUSH2 0x12C9 JUMPI POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ DUP1 ISZERO PUSH2 0x12FE JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST DUP1 ISZERO PUSH2 0x130C JUMPI POP PUSH1 0x0 PUSH1 0x16 SLOAD GT JUMPDEST ISZERO PUSH2 0x1319 JUMPI POP POP PUSH1 0x16 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ DUP1 ISZERO PUSH2 0x134E JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST ISZERO PUSH2 0x135B JUMPI POP POP PUSH1 0x15 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1388 JUMPI PUSH2 0xADB DUP3 PUSH1 0x15 SLOAD PUSH2 0x1FCD JUMP JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH4 0xAC29AB7 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP2 SWAP1 PUSH2 0x36F2 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13B3 DUP2 PUSH2 0x1C54 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x13E2 JUMPI PUSH1 0x40 MLOAD PUSH4 0xC23F6CCB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x140F PUSH2 0x1C83 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND CALLER EQ PUSH2 0x1425 JUMPI CALLER PUSH2 0xC9D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x143F DUP9 DUP9 PUSH2 0x1437 DUP11 DUP11 DUP11 PUSH2 0x2160 JUMP JUMPDEST DUP10 DUP9 DUP9 PUSH2 0x1D0C JUMP JUMPDEST SWAP1 POP PUSH32 0x7650948236619E679E44BF502D527EC950D1D58336E6BABF229F483C57D04672 DUP2 DUP9 DUP9 DUP9 DUP13 PUSH1 0x15 SLOAD PUSH1 0x40 MLOAD PUSH2 0x147C SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3D95 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 SWAP1 POP PUSH2 0xD2C PUSH1 0x1 PUSH1 0x1F SSTORE JUMP JUMPDEST PUSH2 0x149B PUSH1 0x0 CALLER PUSH2 0x1628 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x14BD JUMPI POP PUSH2 0x14BB PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x44C2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER PUSH2 0x1628 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x14DB JUMPI PUSH1 0x40 MLOAD PUSH4 0x26F0F481 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1A SLOAD EQ ISZERO PUSH2 0x14FE JUMPI PUSH1 0x40 MLOAD PUSH4 0xC23F6CCB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1A SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 DUP3 DUP1 DUP1 DUP4 PUSH2 0x1537 PUSH32 0x0 PUSH1 0x1B PUSH2 0x219C JUMP JUMPDEST PUSH2 0x1562 PUSH32 0x0 PUSH1 0x1C PUSH2 0x219C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0xF PUSH1 0xF8 SHL SWAP12 SWAP4 SWAP11 POP SWAP2 SWAP9 POP CHAINID SWAP8 POP ADDRESS SWAP7 POP SWAP5 POP SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH2 0x1597 PUSH1 0x0 CALLER PUSH2 0x1628 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x15B9 JUMPI POP PUSH2 0x15B7 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x44C2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER PUSH2 0x1628 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x15D7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x26F0F481 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x1606 JUMPI PUSH1 0x40 MLOAD PUSH4 0xC23F6CCB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x165C DUP2 PUSH2 0x1C54 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1697 JUMPI DUP2 PUSH1 0x40 MLOAD PUSH4 0x18317BD5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP2 SWAP1 PUSH2 0x36F2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMPDEST PUSH1 0x6 SLOAD DUP2 LT ISZERO PUSH2 0xF1A JUMPI DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x6 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x16DF JUMPI PUSH2 0x16DF PUSH2 0x3CF0 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x17AC JUMPI PUSH1 0x6 DUP1 SLOAD PUSH2 0x170A SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x3DDC JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x171A JUMPI PUSH2 0x171A PUSH2 0x3CF0 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 DUP4 SWAP1 DUP2 LT PUSH2 0x1746 JUMPI PUSH2 0x1746 PUSH2 0x3CF0 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x6 DUP1 SLOAD DUP1 PUSH2 0x1785 JUMPI PUSH2 0x1785 PUSH2 0x3DF3 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 DUP2 ADD PUSH1 0x0 NOT SWAP1 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE ADD SWAP1 SSTORE POP POP POP JUMP JUMPDEST DUP1 PUSH2 0x17B6 DUP2 PUSH2 0x3E09 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x16B8 JUMP JUMPDEST PUSH1 0x60 PUSH1 0xC DUP1 SLOAD PUSH2 0xB1A SWAP1 PUSH2 0x3AF7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17D8 DUP2 PUSH2 0x1C54 JUMP JUMPDEST PUSH1 0xA SLOAD DUP3 EQ ISZERO PUSH2 0x17FB JUMPI PUSH1 0x40 MLOAD PUSH4 0xC23F6CCB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0xA SSTORE JUMP JUMPDEST PUSH1 0x14 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x182D JUMPI PUSH1 0x40 MLOAD PUSH4 0xD7FE67B PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1838 DUP4 PUSH2 0x122F JUMP JUMPDEST PUSH1 0x14 SLOAD PUSH1 0x40 MLOAD PUSH4 0x294CDF0D PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x294CDF0D SWAP1 PUSH2 0x1869 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x36F2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1881 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1895 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD42 SWAP2 SWAP1 PUSH2 0x3E2F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x18C4 DUP2 PUSH2 0x1C54 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x18FE JUMPI PUSH1 0x40 MLOAD PUSH4 0xF411C327 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x6 DUP1 SLOAD SWAP2 DUP3 ADD DUP2 SSTORE SWAP1 SWAP2 MSTORE PUSH32 0xF652222313E28459528D920B65115C16C04F3EFC82AAEDC97BE59F3F377C0D3F ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1970 DUP3 PUSH2 0x2240 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x197A PUSH2 0x2265 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x199A JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xD42 JUMP JUMPDEST DUP1 PUSH2 0x19A4 DUP5 PUSH2 0x2274 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x19B5 SWAP3 SWAP2 SWAP1 PUSH2 0x3E72 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x19D6 PUSH1 0x0 CALLER PUSH2 0x1628 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x19F8 JUMPI POP PUSH2 0x19F6 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x44C2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER PUSH2 0x1628 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x1A16 JUMPI PUSH1 0x40 MLOAD PUSH4 0x26F0F481 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1A3D JUMPI PUSH1 0x40 MLOAD PUSH4 0xD92E233D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1E PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1A78 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH4 0x24B1F805 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP2 SWAP1 PUSH2 0x36F2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1E PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x1AA2 DUP3 PUSH2 0xDA6 JUMP JUMPDEST PUSH2 0x1AAB DUP2 PUSH2 0x1C54 JUMP JUMPDEST PUSH2 0xF1A DUP4 DUP4 PUSH2 0x1E8E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AC0 DUP2 PUSH2 0x1C54 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x1AEF JUMPI PUSH1 0x40 MLOAD PUSH4 0xC23F6CCB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1B1E DUP4 PUSH2 0x12A8 JUMP JUMPDEST SWAP2 POP DUP2 PUSH2 0x1B2B DUP5 DUP5 PUSH2 0x1D9D JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH2 0x1B3F PUSH1 0x0 CALLER PUSH2 0x1628 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x1B61 JUMPI POP PUSH2 0x1B5F PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x44C2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER PUSH2 0x1628 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x1B7F JUMPI PUSH1 0x40 MLOAD PUSH4 0x26F0F481 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x15 SLOAD EQ ISZERO PUSH2 0x1BA2 JUMPI PUSH1 0x40 MLOAD PUSH4 0xC23F6CCB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x15 SSTORE JUMP JUMPDEST PUSH2 0x1BB2 PUSH1 0x0 CALLER PUSH2 0x1628 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x1BD4 JUMPI POP PUSH2 0x1BD2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x44C2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER PUSH2 0x1628 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x1BF2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x26F0F481 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x19 SLOAD EQ ISZERO PUSH2 0x1C15 JUMPI PUSH1 0x40 MLOAD PUSH4 0xC23F6CCB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x19 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP4 MLOAD LT ISZERO PUSH2 0x1C36 JUMPI PUSH2 0x1C2F DUP4 PUSH2 0x2310 JUMP JUMPDEST SWAP1 POP PUSH2 0xADB JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD PUSH2 0x1C47 SWAP3 PUSH1 0x20 ADD SWAP1 PUSH2 0x35AC JUMP JUMPDEST POP PUSH1 0xFF SWAP1 POP PUSH2 0xADB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1103 DUP2 CALLER PUSH2 0x234E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x780E9D63 PUSH1 0xE0 SHL EQ DUP1 PUSH2 0xADB JUMPI POP PUSH2 0xADB DUP3 PUSH2 0x23A7 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1F SLOAD EQ ISZERO PUSH2 0x1CA6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP1 PUSH2 0x3ED4 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1F SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D04 PUSH32 0x94B1435871ABAE349525E55CB9A064AD0EAC0FAB877FEE876ED90F72FCF33CCE DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1CE9 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3EE4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0x23E7 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D50 DUP6 DUP5 DUP5 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP10 SWAP3 POP PUSH2 0x2414 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1D5C DUP10 PUSH2 0x1B12 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x1D6B DUP10 DUP4 DUP4 PUSH2 0x2495 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D76 PUSH1 0x1D SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP PUSH2 0x1D86 PUSH1 0x1D DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x1D90 DUP10 DUP3 PUSH2 0x284C JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 ISZERO PUSH2 0x1DD8 JUMPI PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x1DC9 JUMPI POP PUSH1 0x9 SLOAD PUSH2 0x1DD8 JUMP JUMPDEST PUSH2 0x1DD5 DUP5 PUSH1 0x9 SLOAD PUSH2 0x1FCD JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0xA SLOAD ISZERO PUSH2 0xD42 JUMPI PUSH2 0x1D04 PUSH2 0x1E03 PUSH1 0x64 PUSH2 0x1DFD PUSH1 0xA SLOAD DUP8 PUSH2 0x2928 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 PUSH2 0x2934 JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x2940 JUMP JUMPDEST PUSH2 0x1E14 DUP3 DUP3 PUSH2 0x1628 JUMP JUMPDEST PUSH2 0xFA3 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x1E4A CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH2 0x1E98 DUP3 DUP3 PUSH2 0x1628 JUMP JUMPDEST ISZERO PUSH2 0xFA3 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1EFF DUP4 PUSH2 0x122F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND SWAP2 AND EQ SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F21 DUP3 PUSH2 0x122F JUMP JUMPDEST SWAP1 POP PUSH2 0x1F2F DUP2 PUSH1 0x0 DUP5 PUSH2 0x294C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x1F58 SWAP1 DUP5 SWAP1 PUSH2 0x3DDC JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE MLOAD DUP4 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP2 PUSH32 0xCC16F5DBB4873280815C1EE09DBD06736CFFCC184412CF7A71A0FDB75D397CA5 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x1FE9 JUMPI POP PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO JUMPDEST ISZERO PUSH2 0x2007 JUMPI PUSH1 0x40 MLOAD PUSH4 0xFCA2174F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x2020 JUMPI POP PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO JUMPDEST ISZERO PUSH2 0x203E JUMPI PUSH1 0x40 MLOAD PUSH4 0xFCA2174F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x2057 JUMPI POP PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO JUMPDEST ISZERO PUSH2 0x2075 JUMPI PUSH1 0x40 MLOAD PUSH4 0xFCA2174F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x208E JUMPI POP PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO JUMPDEST ISZERO PUSH2 0x20AC JUMPI PUSH1 0x40 MLOAD PUSH4 0xFCA2174F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO DUP1 PUSH2 0x20E1 JUMPI POP PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO PUSH2 0x2101 JUMPI DUP4 PUSH1 0x40 MLOAD PUSH4 0x961C9A4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP2 SWAP1 PUSH2 0x36F2 JUMP JUMPDEST DUP3 PUSH2 0x210F JUMPI PUSH1 0x0 SWAP2 POP PUSH2 0x2159 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x2141 JUMPI PUSH1 0x2 SLOAD PUSH1 0x3 SLOAD PUSH2 0x213A SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND DUP6 PUSH2 0x2957 JUMP JUMPDEST SWAP2 POP PUSH2 0x2159 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH2 0x213A SWAP1 DUP6 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH2 0x2957 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D04 PUSH32 0x885D61CD569C3C85A110715A0D188C45590CF3F8A77E71714F4F0211EAD7AC8C DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1CE9 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3F22 JUMP JUMPDEST PUSH1 0x60 PUSH1 0xFF DUP4 EQ PUSH2 0x21AF JUMPI PUSH2 0x1C2F DUP4 PUSH2 0x2A15 JUMP JUMPDEST DUP2 DUP1 SLOAD PUSH2 0x21BB SWAP1 PUSH2 0x3AF7 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x21E7 SWAP1 PUSH2 0x3AF7 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2234 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2209 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2234 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2217 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH2 0xADB JUMP JUMPDEST PUSH2 0x2249 DUP2 PUSH2 0x1FB0 JUMP JUMPDEST PUSH2 0x1103 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP1 PUSH2 0x3D32 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x13 DUP1 SLOAD PUSH2 0xB1A SWAP1 PUSH2 0x3AF7 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x2281 DUP4 PUSH2 0x2A54 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x22A0 JUMPI PUSH2 0x22A0 PUSH2 0x3DB0 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x22CA JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x2303 JUMPI PUSH2 0x2308 JUMP JUMPDEST PUSH2 0x22D4 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SWAP1 POP PUSH1 0x1F DUP2 MLOAD GT ISZERO PUSH2 0x233B JUMPI DUP3 PUSH1 0x40 MLOAD PUSH4 0x305A27A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP2 SWAP1 PUSH2 0x376A JUMP JUMPDEST DUP1 MLOAD PUSH2 0x2346 DUP3 PUSH2 0x3F5D JUMP JUMPDEST OR SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x2358 DUP3 DUP3 PUSH2 0x1628 JUMP JUMPDEST PUSH2 0xFA3 JUMPI PUSH2 0x2365 DUP2 PUSH2 0x2B2A JUMP JUMPDEST PUSH2 0x2370 DUP4 PUSH1 0x20 PUSH2 0x2B3C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2381 SWAP3 SWAP2 SWAP1 PUSH2 0x3F9C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH2 0xCB7 SWAP2 PUSH1 0x4 ADD PUSH2 0x376A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x13F2A32F PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x23D8 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0xADB JUMPI POP PUSH2 0xADB DUP3 PUSH2 0x2CA7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xADB PUSH2 0x23F4 PUSH2 0x2CDC JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH2 0x1901 PUSH1 0xF0 SHL DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2420 DUP5 DUP5 PUSH2 0x2D6C JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x2454 JUMPI PUSH1 0x40 MLOAD PUSH4 0x8BAA579F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1E PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x248F JUMPI DUP1 PUSH1 0x40 MLOAD PUSH4 0x4A0BFEC1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP2 SWAP1 PUSH2 0x36F2 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x249F DUP3 DUP3 PUSH2 0x2940 JUMP JUMPDEST PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x24B8 JUMPI POP PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO JUMPDEST ISZERO PUSH2 0x24D6 JUMPI PUSH1 0x40 MLOAD PUSH4 0xFCA2174F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x24EF JUMPI POP PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO JUMPDEST ISZERO PUSH2 0x250D JUMPI PUSH1 0x40 MLOAD PUSH4 0xFCA2174F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x2526 JUMPI POP PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO JUMPDEST ISZERO PUSH2 0x2544 JUMPI PUSH1 0x40 MLOAD PUSH4 0xFCA2174F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x255D JUMPI POP PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO JUMPDEST ISZERO PUSH2 0x257B JUMPI PUSH1 0x40 MLOAD PUSH4 0xFCA2174F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 ISZERO DUP1 ISZERO PUSH2 0x2587 JUMPI POP DUP2 ISZERO JUMPDEST ISZERO PUSH2 0x2591 JUMPI PUSH2 0x248F JUMP JUMPDEST PUSH1 0x0 DUP3 GT DUP1 ISZERO PUSH2 0x25AA JUMPI POP PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO JUMPDEST ISZERO PUSH2 0x25C8 JUMPI PUSH1 0x40 MLOAD PUSH4 0x910AF6F5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x2603 JUMPI DUP4 PUSH1 0x40 MLOAD PUSH4 0xAC29AB7 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP2 SWAP1 PUSH2 0x36F2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x2808 JUMPI PUSH2 0x261B DUP4 DUP4 PUSH2 0x2940 JUMP JUMPDEST CALLVALUE LT ISZERO PUSH2 0x2646 JUMPI PUSH2 0x262C DUP4 DUP4 PUSH2 0x2940 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x91A6D0F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP2 SWAP1 PUSH2 0x37EF JUMP JUMPDEST DUP3 ISZERO PUSH2 0x26D0 JUMPI PUSH1 0x7 SLOAD PUSH1 0x40 MLOAD PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP6 SWAP1 PUSH2 0x266A SWAP1 PUSH2 0x3FEE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x26A7 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x26AC JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x26CE JUMPI PUSH1 0x40 MLOAD PUSH4 0x12171D83 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMPDEST DUP2 ISZERO PUSH2 0x275A JUMPI PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP5 SWAP1 PUSH2 0x26F4 SWAP1 PUSH2 0x3FEE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2731 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2736 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x2758 JUMPI PUSH1 0x40 MLOAD PUSH4 0x12171D83 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMPDEST PUSH2 0x2764 DUP4 DUP4 PUSH2 0x2940 JUMP JUMPDEST CALLVALUE GT ISZERO PUSH2 0x2803 JUMPI PUSH1 0x0 PUSH2 0x2781 PUSH2 0x277A DUP6 DUP6 PUSH2 0x2940 JUMP JUMPDEST CALLVALUE SWAP1 PUSH2 0x2D88 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 MLOAD PUSH2 0x279C SWAP1 PUSH2 0x3FEE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x27D9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x27DE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x2800 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3C312751 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMPDEST PUSH2 0x248F JUMP JUMPDEST DUP3 ISZERO PUSH2 0x282A JUMPI PUSH1 0x7 SLOAD PUSH2 0x282A SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND SWAP2 CALLER SWAP2 AND DUP7 PUSH2 0x2D94 JUMP JUMPDEST DUP2 ISZERO PUSH2 0x248F JUMPI PUSH1 0x8 SLOAD PUSH2 0x248F SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND SWAP2 CALLER SWAP2 AND DUP6 PUSH2 0x2D94 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x2872 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP1 PUSH2 0x402A JUMP JUMPDEST PUSH2 0x287B DUP2 PUSH2 0x1FB0 JUMP JUMPDEST ISZERO PUSH2 0x2898 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP1 PUSH2 0x406A JUMP JUMPDEST PUSH2 0x28A4 PUSH1 0x0 DUP4 DUP4 PUSH2 0x294C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x28CD SWAP1 DUP5 SWAP1 PUSH2 0x407A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP4 SWAP3 PUSH32 0xF6798A560793A54C3BCFE86A93CDE1E73087D944C0EA20544137D4121396885 SWAP2 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD42 DUP3 DUP5 PUSH2 0x4092 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD42 DUP3 DUP5 PUSH2 0x40B1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD42 DUP3 DUP5 PUSH2 0x407A JUMP JUMPDEST PUSH2 0xF1A DUP4 DUP4 DUP4 PUSH2 0x2DEC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH2 0x2966 DUP7 DUP7 PUSH2 0x2EA4 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x7C0329D PUSH1 0xE2 SHL DUP2 MSTORE SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x1F00CA74 SWAP1 PUSH2 0x2999 SWAP1 DUP8 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x40C5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x29B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x29C5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x29ED SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x41D0 JUMP JUMPDEST SWAP2 POP DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2A02 JUMPI PUSH2 0x2A02 PUSH2 0x3CF0 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x2A22 DUP4 PUSH2 0x3036 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP POP POP SWAP2 DUP3 MSTORE POP PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0x2A93 JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH10 0x4EE2D6D415B85ACEF81 PUSH1 0x20 SHL DUP4 LT PUSH2 0x2ABD JUMPI PUSH10 0x4EE2D6D415B85ACEF81 PUSH1 0x20 SHL DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x2ADB JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x2AF3 JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x2B07 JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x2B19 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0xADB JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xADB PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x14 JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x2B4B DUP4 PUSH1 0x2 PUSH2 0x4092 JUMP JUMPDEST PUSH2 0x2B56 SWAP1 PUSH1 0x2 PUSH2 0x407A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2B6D JUMPI PUSH2 0x2B6D PUSH2 0x3DB0 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2B97 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x3 PUSH1 0xFC SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2BB2 JUMPI PUSH2 0x2BB2 PUSH2 0x3CF0 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xF PUSH1 0xFB SHL DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x2BE1 JUMPI PUSH2 0x2BE1 PUSH2 0x3CF0 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH2 0x2C05 DUP5 PUSH1 0x2 PUSH2 0x4092 JUMP JUMPDEST PUSH2 0x2C10 SWAP1 PUSH1 0x1 PUSH2 0x407A JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x2C88 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL DUP6 PUSH1 0xF AND PUSH1 0x10 DUP2 LT PUSH2 0x2C44 JUMPI PUSH2 0x2C44 PUSH2 0x3CF0 JUMP JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2C5A JUMPI PUSH2 0x2C5A PUSH2 0x3CF0 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH2 0x2C81 DUP2 PUSH2 0x420A JUMP JUMPDEST SWAP1 POP PUSH2 0x2C13 JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0xD42 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP1 PUSH2 0x4253 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0xADB JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0xADB JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ DUP1 ISZERO PUSH2 0x2D35 JUMPI POP PUSH32 0x0 CHAINID EQ JUMPDEST ISZERO PUSH2 0x2D5F JUMPI POP PUSH32 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x2D67 PUSH2 0x305E JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2D7B DUP6 DUP6 PUSH2 0x30F4 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x2308 DUP2 PUSH2 0x313A JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD42 DUP3 DUP5 PUSH2 0x3DDC JUMP JUMPDEST PUSH2 0x248F DUP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2DB5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4263 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x31ED JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x2E47 JUMPI PUSH2 0x2E42 DUP2 PUSH1 0x11 DUP1 SLOAD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x12 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP3 SWAP1 SSTORE PUSH1 0x1 DUP3 ADD DUP4 SSTORE SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x31ECC21A745E3968A04E9570E4425BC18FA8019C68028196B546D1669C200C68 ADD SSTORE JUMP JUMPDEST PUSH2 0x2E6A JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x2E6A JUMPI PUSH2 0x2E6A DUP4 DUP3 PUSH2 0x327F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x2E81 JUMPI PUSH2 0xF1A DUP2 PUSH2 0x331C JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xF1A JUMPI PUSH2 0xF1A DUP3 DUP3 PUSH2 0x33CB JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ DUP1 PUSH2 0x2ED0 JUMPI POP PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO PUSH2 0x2F9A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 ADD DUP4 MSTORE PUSH1 0x0 SWAP3 PUSH1 0x20 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP PUSH1 0x2 SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND SWAP2 AND EQ PUSH2 0x2F12 JUMPI DUP4 PUSH2 0x2F1F JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2F32 JUMPI PUSH2 0x2F32 PUSH2 0x3CF0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x20 SWAP2 DUP3 MUL SWAP3 SWAP1 SWAP3 ADD ADD MSTORE PUSH1 0x2 SLOAD DUP5 DUP3 AND SWAP2 AND EQ PUSH2 0x2F5B JUMPI DUP3 PUSH2 0x2F68 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x2F7B JUMPI PUSH2 0x2F7B PUSH2 0x3CF0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE SWAP1 POP PUSH2 0xADB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x3 DUP1 DUP3 MSTORE PUSH1 0x80 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x20 DUP3 ADD PUSH1 0x60 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP4 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2FD1 JUMPI PUSH2 0x2FD1 PUSH2 0x3CF0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x20 SWAP2 DUP3 MUL SWAP3 SWAP1 SWAP3 ADD ADD MSTORE PUSH1 0x2 SLOAD DUP3 MLOAD SWAP2 AND SWAP1 DUP3 SWAP1 PUSH1 0x1 SWAP1 DUP2 LT PUSH2 0x3002 JUMPI PUSH2 0x3002 PUSH2 0x3CF0 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP3 DUP2 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH2 0x2F7B JUMPI PUSH2 0x2F7B PUSH2 0x3CF0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH1 0x1F DUP2 GT ISZERO PUSH2 0xADB JUMPI PUSH1 0x40 MLOAD PUSH4 0x2CD44AC3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH32 0x0 PUSH32 0x0 CHAINID ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x30D9 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x428B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD PUSH1 0x41 EQ ISZERO PUSH2 0x312B JUMPI PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x0 BYTE PUSH2 0x311F DUP8 DUP3 DUP6 DUP6 PUSH2 0x340F JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP POP PUSH2 0x3133 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP PUSH1 0x2 JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x314E JUMPI PUSH2 0x314E PUSH2 0x42CD JUMP JUMPDEST EQ ISZERO PUSH2 0x3157 JUMPI POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x316B JUMPI PUSH2 0x316B PUSH2 0x42CD JUMP JUMPDEST EQ ISZERO PUSH2 0x3189 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP1 PUSH2 0x4312 JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x319D JUMPI PUSH2 0x319D PUSH2 0x42CD JUMP JUMPDEST EQ ISZERO PUSH2 0x31BB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP1 PUSH2 0x4356 JUMP JUMPDEST PUSH1 0x3 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x31CF JUMPI PUSH2 0x31CF PUSH2 0x42CD JUMP JUMPDEST EQ ISZERO PUSH2 0x1103 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP1 PUSH2 0x43A5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3242 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x34BC SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0x3263 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x3263 SWAP2 SWAP1 PUSH2 0x43C8 JUMP JUMPDEST PUSH2 0xF1A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP1 PUSH2 0x4430 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH2 0x328C DUP5 PUSH2 0x1264 JUMP JUMPDEST PUSH2 0x3296 SWAP2 SWAP1 PUSH2 0x3DDC JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP1 DUP3 EQ PUSH2 0x32E9 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 SLOAD DUP5 DUP5 MSTORE DUP2 DUP5 KECCAK256 DUP2 SWAP1 SSTORE DUP4 MSTORE PUSH1 0x10 SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP2 SWAP1 SSTORE JUMPDEST POP PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x10 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP5 SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND DUP4 MSTORE PUSH1 0xF DUP2 MSTORE DUP4 DUP4 KECCAK256 SWAP2 DUP4 MSTORE MSTORE SWAP1 DUP2 KECCAK256 SSTORE JUMP JUMPDEST PUSH1 0x11 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x332E SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x3DDC JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x12 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x11 DUP1 SLOAD SWAP4 SWAP5 POP SWAP1 SWAP3 DUP5 SWAP1 DUP2 LT PUSH2 0x3356 JUMPI PUSH2 0x3356 PUSH2 0x3CF0 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP DUP1 PUSH1 0x11 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x3377 JUMPI PUSH2 0x3377 PUSH2 0x3CF0 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SWAP3 SWAP1 SWAP3 SSTORE DUP3 DUP2 MSTORE PUSH1 0x12 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP5 SWAP1 SSTORE DUP6 DUP3 MSTORE DUP2 KECCAK256 SSTORE PUSH1 0x11 DUP1 SLOAD DUP1 PUSH2 0x33AF JUMPI PUSH2 0x33AF PUSH2 0x3DF3 JUMP JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x33D6 DUP4 PUSH2 0x1264 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 SWAP1 SSTORE SWAP4 DUP3 MSTORE PUSH1 0x10 SWAP1 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH16 0xA2A8918CA85BAFE22016D0B997E4DF60 PUSH1 0x1 PUSH1 0xFF SHL SUB DUP4 GT ISZERO PUSH2 0x343C JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x3 PUSH2 0x34B3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP8 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x3461 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4449 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3483 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x34AC JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x34B3 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1D04 DUP5 DUP5 PUSH1 0x0 DUP6 DUP6 PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x34E3 SWAP2 SWAP1 PUSH2 0x4471 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3520 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3525 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x3536 DUP8 DUP4 DUP4 DUP8 PUSH2 0x3541 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x357D JUMPI DUP3 MLOAD PUSH2 0x3576 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x3576 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP1 PUSH2 0x44B1 JUMP JUMPDEST POP DUP2 PUSH2 0x1D04 JUMP JUMPDEST PUSH2 0x1D04 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x3592 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP2 SWAP1 PUSH2 0x376A JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x35B8 SWAP1 PUSH2 0x3AF7 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x35DA JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x3620 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x35F3 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x3620 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x3620 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x3620 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x3605 JUMP JUMPDEST POP PUSH2 0x362C SWAP3 SWAP2 POP PUSH2 0x3630 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x362C JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x3631 JUMP JUMPDEST DUP1 JUMPDEST DUP2 EQ PUSH2 0x1103 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0xADB DUP2 PUSH2 0x3645 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3672 JUMPI PUSH2 0x3672 PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1D04 DUP5 DUP5 PUSH2 0x3652 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH2 0x3647 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0xADB DUP2 PUSH2 0x367E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x36AE JUMPI PUSH2 0x36AE PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1D04 DUP5 DUP5 PUSH2 0x368E JUMP JUMPDEST DUP1 ISZERO ISZERO JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0xADB DUP3 DUP5 PUSH2 0x36BA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xADB DUP3 PUSH2 0x36D2 JUMP JUMPDEST PUSH2 0x36BE DUP2 PUSH2 0x36DE JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0xADB DUP3 DUP5 PUSH2 0x36E9 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x371B JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x3703 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x248F JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3740 DUP3 MLOAD SWAP1 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH2 0x3757 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x3700 JUMP JUMPDEST PUSH2 0x3760 DUP2 PUSH2 0x372C JUMP JUMPDEST SWAP1 SWAP4 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xD42 DUP2 DUP5 PUSH2 0x3736 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3787 DUP4 DUP4 PUSH2 0x36E9 JUMP JUMPDEST POP POP PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3799 DUP3 MLOAD SWAP1 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 DUP4 ADD DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x37CD JUMPI DUP2 MLOAD PUSH2 0x37BC DUP9 DUP3 PUSH2 0x377B JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP4 ADD SWAP3 POP POP PUSH1 0x1 ADD PUSH2 0x37A8 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xD42 DUP2 DUP5 PUSH2 0x378F JUMP JUMPDEST DUP1 PUSH2 0x36BE JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0xADB DUP3 DUP5 PUSH2 0x37E9 JUMP JUMPDEST PUSH2 0x3647 DUP2 PUSH2 0x36DE JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0xADB DUP2 PUSH2 0x37FD JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x3826 JUMPI PUSH2 0x3826 PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x3840 JUMPI PUSH2 0x3840 PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x3133 JUMPI PUSH2 0x3133 PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x3877 JUMPI PUSH2 0x3877 PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3883 DUP10 DUP10 PUSH2 0x3806 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 PUSH2 0x3894 DUP10 DUP3 DUP11 ADD PUSH2 0x3652 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 PUSH2 0x38A5 DUP10 DUP3 DUP11 ADD PUSH2 0x3806 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 PUSH2 0x38B6 DUP10 DUP3 DUP11 ADD PUSH2 0x3652 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x38D5 JUMPI PUSH2 0x38D5 PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x38E1 DUP10 DUP3 DUP11 ADD PUSH2 0x3811 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3906 JUMPI PUSH2 0x3906 PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3912 DUP6 DUP6 PUSH2 0x3806 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3923 DUP6 DUP3 DUP7 ADD PUSH2 0x3652 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3942 JUMPI PUSH2 0x3942 PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1D04 DUP5 DUP5 PUSH2 0x3806 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3964 JUMPI PUSH2 0x3964 PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3970 DUP6 DUP6 PUSH2 0x3652 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3923 DUP6 DUP3 DUP7 ADD PUSH2 0x3806 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xADB PUSH2 0x3992 PUSH2 0x1C51 DUP5 PUSH2 0x36D2 JUMP JUMPDEST PUSH2 0x36D2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xADB DUP3 PUSH2 0x3981 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xADB DUP3 PUSH2 0x3997 JUMP JUMPDEST PUSH2 0x36BE DUP2 PUSH2 0x39A2 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0xADB DUP3 DUP5 PUSH2 0x39AD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x39E0 JUMPI PUSH2 0x39E0 PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x39EC DUP10 DUP10 PUSH2 0x3806 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 PUSH2 0x3894 DUP10 DUP3 DUP11 ADD PUSH2 0x3806 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT DUP2 AND PUSH2 0x36BE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3787 DUP4 DUP4 PUSH2 0x37E9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A23 DUP3 MLOAD SWAP1 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 DUP4 ADD DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x37CD JUMPI DUP2 MLOAD PUSH2 0x3A46 DUP9 DUP3 PUSH2 0x3A0D JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP4 ADD SWAP3 POP POP PUSH1 0x1 ADD PUSH2 0x3A32 JUMP JUMPDEST PUSH1 0xE0 DUP2 ADD PUSH2 0x3A65 DUP3 DUP11 PUSH2 0x39FD JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x3A77 DUP2 DUP10 PUSH2 0x3736 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x3A8B DUP2 DUP9 PUSH2 0x3736 JUMP JUMPDEST SWAP1 POP PUSH2 0x3A9A PUSH1 0x60 DUP4 ADD DUP8 PUSH2 0x37E9 JUMP JUMPDEST PUSH2 0x3AA7 PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x36E9 JUMP JUMPDEST PUSH2 0x3AB4 PUSH1 0xA0 DUP4 ADD DUP6 PUSH2 0x37E9 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0x1D90 DUP2 DUP5 PUSH2 0x3A19 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0x3AD4 DUP3 DUP6 PUSH2 0x37E9 JUMP JUMPDEST PUSH2 0xD42 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x37E9 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x2 DUP2 DIV PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x3B0B JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x3B1E JUMPI PUSH2 0x3B1E PUSH2 0x3AE1 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH2 0xADB DUP2 PUSH2 0x37FD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3B44 JUMPI PUSH2 0x3B44 PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1D04 DUP5 DUP5 PUSH2 0x3B24 JUMP JUMPDEST PUSH1 0xC0 DUP2 ADD PUSH2 0x3B5E DUP3 DUP10 PUSH2 0x37E9 JUMP JUMPDEST PUSH2 0x3B6B PUSH1 0x20 DUP4 ADD DUP9 PUSH2 0x37E9 JUMP JUMPDEST PUSH2 0x3B78 PUSH1 0x40 DUP4 ADD DUP8 PUSH2 0x36E9 JUMP JUMPDEST PUSH2 0x3B85 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x37E9 JUMP JUMPDEST PUSH2 0x3B92 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x36E9 JUMP JUMPDEST PUSH2 0x3536 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x37E9 JUMP JUMPDEST PUSH1 0x28 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD PUSH32 0x534254456E756D657261626C653A206F776E657220696E646578206F7574206F DUP2 MSTORE PUSH8 0x6620626F756E6473 PUSH1 0xC0 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP2 POP JUMPDEST POP PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xADB DUP2 PUSH2 0x3B9F JUMP JUMPDEST PUSH1 0x2F DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 DUP2 MSTORE PUSH15 0x103937B632B9903337B91039B2B633 PUSH1 0x89 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP2 POP PUSH2 0x3BE0 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xADB DUP2 PUSH2 0x3BF7 JUMP JUMPDEST PUSH1 0x1E DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD PUSH32 0x5342543A2063616C6C6572206973206E6F7420746F6B656E206F776E65720000 DUP2 MSTORE SWAP2 POP JUMPDEST POP PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xADB DUP2 PUSH2 0x3C53 JUMP JUMPDEST PUSH1 0x29 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD PUSH32 0x534254456E756D657261626C653A20676C6F62616C20696E646578206F757420 DUP2 MSTORE PUSH9 0x6F6620626F756E6473 PUSH1 0xB8 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP2 POP PUSH2 0x3BE0 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xADB DUP2 PUSH2 0x3C9A JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x15 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD PUSH21 0x14D0950E881A5B9D985B1A59081D1BDAD95B881251 PUSH1 0x5A SHL DUP2 MSTORE SWAP2 POP PUSH2 0x3C83 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xADB DUP2 PUSH2 0x3D06 JUMP JUMPDEST PUSH1 0x26 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD PUSH32 0x5342543A2061646472657373207A65726F206973206E6F7420612076616C6964 DUP2 MSTORE PUSH6 0x1037BBB732B9 PUSH1 0xD1 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP2 POP PUSH2 0x3BE0 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xADB DUP2 PUSH2 0x3D42 JUMP JUMPDEST PUSH1 0xC0 DUP2 ADD PUSH2 0x3DA3 DUP3 DUP10 PUSH2 0x37E9 JUMP JUMPDEST PUSH2 0x3B6B PUSH1 0x20 DUP4 ADD DUP9 PUSH2 0x36E9 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x3DEE JUMPI PUSH2 0x3DEE PUSH2 0x3DC6 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x3E1D JUMPI PUSH2 0x3E1D PUSH2 0x3DC6 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH2 0xADB DUP2 PUSH2 0x3645 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3E44 JUMPI PUSH2 0x3E44 PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1D04 DUP5 DUP5 PUSH2 0x3E24 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3E5A DUP3 MLOAD SWAP1 JUMP JUMPDEST PUSH2 0x3E68 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x3700 JUMP JUMPDEST SWAP3 SWAP1 SWAP3 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3E7E DUP3 DUP6 PUSH2 0x3E50 JUMP JUMPDEST SWAP2 POP PUSH2 0x3E8A DUP3 DUP5 PUSH2 0x3E50 JUMP JUMPDEST PUSH5 0x173539B7B7 PUSH1 0xD9 SHL DUP2 MSTORE SWAP2 POP PUSH1 0x5 DUP3 ADD PUSH2 0x1D04 JUMP JUMPDEST PUSH1 0x1F DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 DUP2 MSTORE SWAP2 POP PUSH2 0x3C83 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xADB DUP2 PUSH2 0x3EA0 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD PUSH2 0x3EF2 DUP3 DUP8 PUSH2 0x37E9 JUMP JUMPDEST PUSH2 0x3EFF PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x37E9 JUMP JUMPDEST PUSH2 0x3F0C PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x36E9 JUMP JUMPDEST PUSH2 0x3F19 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x37E9 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x80 DUP2 ADD PUSH2 0x3F30 DUP3 DUP8 PUSH2 0x37E9 JUMP JUMPDEST PUSH2 0x3EFF PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x36E9 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xADB DUP3 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F67 DUP3 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD PUSH2 0x3F74 DUP2 PUSH2 0x3F53 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP3 LT ISZERO PUSH2 0x3F95 JUMPI PUSH2 0x3F90 PUSH1 0x0 NOT DUP4 PUSH1 0x20 SUB PUSH1 0x8 MUL SHL SWAP1 JUMP JUMPDEST DUP4 AND SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH23 0x20B1B1B2B9B9A1B7B73A3937B61D1030B1B1B7BAB73A1 PUSH1 0x4D SHL DUP2 MSTORE PUSH1 0x17 ADD PUSH1 0x0 PUSH2 0x3FC8 DUP3 DUP6 PUSH2 0x3E50 JUMP JUMPDEST PUSH17 0x1034B99036B4B9B9B4B733903937B6329 PUSH1 0x7D SHL DUP2 MSTORE PUSH1 0x11 ADD SWAP2 POP PUSH2 0x1D04 DUP3 DUP5 PUSH2 0x3E50 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0xADB JUMP JUMPDEST PUSH1 0x1D DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD PUSH32 0x5342543A206D696E7420746F20746865207A65726F2061646472657373000000 DUP2 MSTORE SWAP2 POP PUSH2 0x3C83 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xADB DUP2 PUSH2 0x3FF6 JUMP JUMPDEST PUSH1 0x19 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD PUSH25 0x14D0950E881D1BDAD95B88185B1C9958591E481B5A5B9D1959 PUSH1 0x3A SHL DUP2 MSTORE SWAP2 POP PUSH2 0x3C83 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xADB DUP2 PUSH2 0x403A JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x408D JUMPI PUSH2 0x408D PUSH2 0x3DC6 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x40AC JUMPI PUSH2 0x40AC PUSH2 0x3DC6 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x40C0 JUMPI PUSH2 0x40C0 PUSH2 0x3F3D JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0x40D3 DUP3 DUP6 PUSH2 0x37E9 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x1D04 DUP2 DUP5 PUSH2 0x378F JUMP JUMPDEST PUSH2 0x40EE DUP3 PUSH2 0x372C JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR ISZERO PUSH2 0x410B JUMPI PUSH2 0x410B PUSH2 0x3DB0 JUMP JUMPDEST PUSH1 0x40 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x411D PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST SWAP1 POP PUSH2 0x13A3 DUP3 DUP3 PUSH2 0x40E5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x4142 JUMPI PUSH2 0x4142 PUSH2 0x3DB0 JUMP JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x415F PUSH2 0x415A DUP5 PUSH2 0x4129 JUMP JUMPDEST PUSH2 0x4112 JUMP JUMPDEST DUP4 DUP2 MSTORE SWAP1 POP PUSH1 0x20 DUP1 DUP3 ADD SWAP1 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x417E JUMPI PUSH2 0x417E PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x41A2 JUMPI DUP1 PUSH2 0x4193 DUP9 DUP3 PUSH2 0x3E24 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0x4180 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x41C0 JUMPI PUSH2 0x41C0 PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1D04 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x414C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x41E5 JUMPI PUSH2 0x41E5 PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x41FE JUMPI PUSH2 0x41FE PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D04 DUP5 DUP3 DUP6 ADD PUSH2 0x41AC JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x4219 JUMPI PUSH2 0x4219 PUSH2 0x3DC6 JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 SWAP2 ADD SWAP1 DUP2 MSTORE PUSH1 0x0 PUSH2 0x3C83 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xADB DUP2 PUSH2 0x4221 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x4271 DUP3 DUP7 PUSH2 0x36E9 JUMP JUMPDEST PUSH2 0x427E PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x36E9 JUMP JUMPDEST PUSH2 0x1D04 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x37E9 JUMP JUMPDEST PUSH1 0xA0 DUP2 ADD PUSH2 0x4299 DUP3 DUP9 PUSH2 0x37E9 JUMP JUMPDEST PUSH2 0x42A6 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x37E9 JUMP JUMPDEST PUSH2 0x42B3 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x37E9 JUMP JUMPDEST PUSH2 0x42C0 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x37E9 JUMP JUMPDEST PUSH2 0xD2C PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x36E9 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x18 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD PUSH24 0x45434453413A20696E76616C6964207369676E6174757265 PUSH1 0x40 SHL DUP2 MSTORE SWAP2 POP PUSH2 0x3C83 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xADB DUP2 PUSH2 0x42E3 JUMP JUMPDEST PUSH1 0x1F DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 DUP2 MSTORE SWAP2 POP PUSH2 0x3C83 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xADB DUP2 PUSH2 0x4322 JUMP JUMPDEST PUSH1 0x22 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C DUP2 MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP2 POP PUSH2 0x3BE0 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xADB DUP2 PUSH2 0x4366 JUMP JUMPDEST DUP1 ISZERO ISZERO PUSH2 0x3647 JUMP JUMPDEST DUP1 MLOAD PUSH2 0xADB DUP2 PUSH2 0x43B5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x43DD JUMPI PUSH2 0x43DD PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1D04 DUP5 DUP5 PUSH2 0x43BD JUMP JUMPDEST PUSH1 0x2A DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E DUP2 MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP2 POP PUSH2 0x3BE0 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xADB DUP2 PUSH2 0x43E9 JUMP JUMPDEST PUSH1 0xFF DUP2 AND PUSH2 0x36BE JUMP JUMPDEST PUSH1 0x80 DUP2 ADD PUSH2 0x4457 DUP3 DUP8 PUSH2 0x37E9 JUMP JUMPDEST PUSH2 0x4464 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x4440 JUMP JUMPDEST PUSH2 0x3F0C PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x37E9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD42 DUP3 DUP5 PUSH2 0x3E50 JUMP JUMPDEST PUSH1 0x1D DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 DUP2 MSTORE SWAP2 POP PUSH2 0x3C83 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xADB DUP2 PUSH2 0x447D JUMP INVALID MSTORE 0xEA 0xFC GT 0xF6 0xF8 0x1F DUP7 DUP8 DUP12 SELFDESTRUCT 0xD3 GT MULMOD LOG0 0xD9 0x2F CALLDATACOPY POP PUSH6 0x27754F007888 MSTORE8 SELFDESTRUCT SWAP16 PUSH4 0xB130A264 PUSH10 0x706673582212208396A9 SWAP4 STATICCALL 0x1F 0xEA INVALID 0xAC ORIGIN 0x5E 0xD9 0xCB MLOAD 0x49 0x1F DUP10 PUSH3 0xD6A3C6 0xA9 SSTORE SIGNEXTEND SGT OR DUP16 SWAP13 PUSH6 0xA7EBD164736F PUSH13 0x63430008080033000000000000 ",
          "sourceMap": "426:5697:34:-:0;;;1133:442;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1389:5;1408:4;1426:6;1446:12;1472:17;1503:13;3178:431:23;;;;;;;;;;;;;-1:-1:-1;;;3178:431:23;;;;;;;;;;;;;;;;-1:-1:-1;;;3178:431:23;;;1630:5:48;1649:4;1667:6;1687:12;1713:17;1744:13;2126:4:46;2132:6;2155:5;2162:13;2686:37:36;2198:4:0;2697:18:36;;2717:5;2686:10;;;:37;;:::i;:::-;2747:24;;2734:10;:37;;-1:-1:-1;;;;;;2734:37:36;;;-1:-1:-1;;;;;2734:37:36;;;;;;;2802:32;;;;;2781:18;:53;;;;;;;;;;;;;2857:24;;;;2844:10;:37;;;;;;;;;;;;;2903:23;;;;2891:9;:35;;;;;;;;;;;;;2957:32;;;;2936:18;:53;;;;;;;;;;;;;3021:33;;;;2999:19;:55;;;;;;;;;;;;;3084:31;;;;3064:17;:51;3146:32;;;;;3125:18;:53;954:13:50;;;;-1:-1:-1;954:5:50;;:13;;;;:::i;:::-;-1:-1:-1;977:17:50;;;;:7;;:17;;;;;:::i;:::-;-1:-1:-1;2187:37:46::2;::::0;-1:-1:-1;2198:4:0::2;::::0;-1:-1:-1;2218:5:46;2187:10:::2;:37::i;:::-;2235:28:::0;;::::2;::::0;:13:::2;::::0;:28:::2;::::0;::::2;::::0;::::2;:::i;:::-;;2312:18;2273:17;;:58;;;;;-1:-1:-1::0;;;;;2273:58:46::2;;;;;-1:-1:-1::0;;;;;2273:58:46::2;;;;;;1907:431:::0;;;;;;3251:45:23;3282:13;3251:4;:30;;;;;;:45;;;;:::i;:::-;3243:53;;3317:51;:7;3351:16;3317:33;;;;;;;:51;;:::i;:::-;3306:62;;3392:22;;;;;;;;;;3378:36;;3441:25;;;;;;3424:42;;3494:13;3477:30;;3542:23;:21;:23::i;:::-;3517:48;;-1:-1:-1;;;3597:4:23;3575:27;;;;-1:-1:-1;;1716:1:5;1821:7;:22;-1:-1:-1;426:5697:34;;-1:-1:-1;;;;;;;;426:5697:34;7587:233:0;3107:4;3130:12;;;;;;;;;;;-1:-1:-1;;;;;3130:29:0;;;;;;;;;;;;7665:149;;7708:6;:12;;;;;;;;;;;-1:-1:-1;;;;;7708:29:0;;;;;;;;;:36;;-1:-1:-1;;7708:36:0;7740:4;7708:36;;;7790:12;719:10:17;;640:96;7790:12:0;-1:-1:-1;;;;;7763:40:0;7781:7;-1:-1:-1;;;;;7763:40:0;7775:4;7763:40;;;;;;;;;;7665:149;7587:233;;:::o;2895:341:19:-;2991:11;3040:2;3024:5;3018:19;:24;3014:216;;;3065:20;3079:5;3065:13;:20::i;:::-;3058:27;;;;3014:216;3157:5;3116:32;3142:5;3116:25;;;;;:32;;:::i;:::-;:46;;;;;;;;:::i;:::-;-1:-1:-1;1371:66:19;;-1:-1:-1;3014:216:19;2895:341;;;;:::o;3963:180:23:-;4077:11;;4090:14;;4054:81;;4018:7;;4054:81;;1929:95;;4106:13;;4129:4;;4054:81;;;:::i;:::-;;;;;;;;;;;;;4044:92;;;;;;4037:99;;3963:180;:::o;1689:286:19:-;1754:11;1777:17;1803:3;1777:30;;1835:2;1821:4;:11;:16;1817:72;;;1874:3;1860:18;;-1:-1:-1;;;1860:18:19;;;;;;;;:::i;:::-;;;;;;;;1817:72;1955:11;;1938:13;1955:4;1938:13;:::i;:::-;1930:36;;1689:286;-1:-1:-1;;;1689:286:19:o;3310:202:20:-;3486:10;3310:202::o;426:5697:34:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;426:5697:34;;;-1:-1:-1;426:5697:34;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;466:96:55;503:7;-1:-1:-1;;;;;400:54:55;;532:24;334:126;568:122;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;778:13;;800:33;778:13;800:33;:::i;1091:102::-;1183:2;1163:14;-1:-1:-1;;1159:28:55;;1091:102::o;1199:180::-;-1:-1:-1;;;1244:1:55;1237:88;1344:4;1341:1;1334:15;1368:4;1365:1;1358:15;1385:281;1468:27;1490:4;1468:27;:::i;:::-;1460:6;1456:40;1598:6;1586:10;1583:22;-1:-1:-1;;;;;1550:10:55;1547:34;1544:62;1541:88;;;1609:18;;:::i;:::-;1645:2;1638:22;-1:-1:-1;;1385:281:55:o;1672:129::-;1706:6;1733:20;73:2;67:9;;7:75;1733:20;1723:30;;1762:33;1790:4;1782:6;1762:33;:::i;:::-;1672:129;;;:::o;1807:308::-;1869:4;-1:-1:-1;;;;;1951:6:55;1948:30;1945:56;;;1981:18;;:::i;:::-;2019:29;2041:6;2019:29;:::i;:::-;2103:4;2093:15;;1807:308;-1:-1:-1;;1807:308:55:o;2121:307::-;2189:1;2199:113;2213:6;2210:1;2207:13;2199:113;;;2289:11;;;2283:18;2270:11;;;2263:39;2235:2;2228:10;2199:113;;;2330:6;2327:1;2324:13;2321:101;;;2410:1;2401:6;2396:3;2392:16;2385:27;2321:101;2170:258;2121:307;;;:::o;2434:421::-;2523:5;2548:66;2564:49;2606:6;2564:49;:::i;:::-;2548:66;:::i;:::-;2539:75;;2637:6;2630:5;2623:21;2675:4;2668:5;2664:16;2713:3;2704:6;2699:3;2695:16;2692:25;2689:112;;;2720:79;197:1;194;187:12;2720:79;2810:39;2842:6;2837:3;2832;2810:39;:::i;:::-;2529:326;2434:421;;;;;:::o;2875:355::-;2942:5;2991:3;2984:4;2976:6;2972:17;2968:27;2958:122;;2999:79;197:1;194;187:12;2999:79;3109:6;3103:13;3134:90;3220:3;3212:6;3205:4;3197:6;3193:17;3134:90;:::i;:::-;3125:99;2875:355;-1:-1:-1;;;;2875:355:55:o;3565:122::-;3656:5;3638:24;3310:202:20;3693:143:55;3775:13;;3797:33;3775:13;3797:33;:::i;3885:1740::-;3976:5;4020:6;4008:9;4003:3;3999:19;3995:32;3992:119;;;4030:79;197:1;194;187:12;4030:79;4129:23;4145:6;4129:23;:::i;:::-;4120:32;-1:-1:-1;4217:1:55;4257:60;4313:3;4293:9;4257:60;:::i;:::-;4232:86;;-1:-1:-1;4402:2:55;4443:60;4499:3;4475:22;;;4443:60;:::i;:::-;4436:4;4429:5;4425:16;4418:86;4339:176;4580:2;4621:60;4677:3;4668:6;4657:9;4653:22;4621:60;:::i;:::-;4614:4;4607:5;4603:16;4596:86;4525:168;4757:2;4798:60;4854:3;4845:6;4834:9;4830:22;4798:60;:::i;:::-;4791:4;4784:5;4780:16;4773:86;4703:167;4943:3;4985:60;5041:3;5032:6;5021:9;5017:22;4985:60;:::i;:::-;4978:4;4971:5;4967:16;4960:86;4880:177;5131:3;5173:60;5229:3;5220:6;5209:9;5205:22;5173:60;:::i;:::-;5166:4;5159:5;5155:16;5148:86;5067:178;5317:3;5359:60;5415:3;5406:6;5395:9;5391:22;5359:60;:::i;:::-;5352:4;5345:5;5341:16;5334:86;5255:176;5504:3;5546:60;5602:3;5593:6;5582:9;5578:22;5546:60;:::i;:::-;5539:4;5532:5;5528:16;5521:86;5441:177;3885:1740;;;;:::o;5631:1715::-;5807:6;5815;5823;5831;5839;5847;5896:3;5884:9;5875:7;5871:23;5867:33;5864:120;;;5903:79;197:1;194;187:12;5903:79;6023:1;6048:64;6104:7;6084:9;6048:64;:::i;:::-;6038:74;;5994:128;6182:2;6171:9;6167:18;6161:25;-1:-1:-1;;;;;6205:6:55;6202:30;6199:117;;;6235:79;197:1;194;187:12;6235:79;6340:74;6406:7;6397:6;6386:9;6382:22;6340:74;:::i;:::-;6330:84;;6132:292;6484:2;6473:9;6469:18;6463:25;-1:-1:-1;;;;;6507:6:55;6504:30;6501:117;;;6537:79;197:1;194;187:12;6537:79;6642:74;6708:7;6699:6;6688:9;6684:22;6642:74;:::i;:::-;6632:84;;6434:292;6786:2;6775:9;6771:18;6765:25;-1:-1:-1;;;;;6809:6:55;6806:30;6803:117;;;6839:79;197:1;194;187:12;6839:79;6944:74;7010:7;7001:6;6990:9;6986:22;6944:74;:::i;:::-;6934:84;;6736:292;7067:3;7094:64;7150:7;7141:6;7130:9;7126:22;7094:64;:::i;:::-;7084:74;;7038:130;7207:3;7234:95;7321:7;7312:6;7301:9;7297:22;7234:95;:::i;:::-;7224:105;;7178:161;5631:1715;;;;;;;;:::o;7435:118::-;7540:5;7522:24;7517:3;7510:37;7435:118;;:::o;7683:::-;7770:24;7788:5;7770:24;:::i;7807:664::-;8050:3;8035:19;;8064:71;8039:9;8108:6;8064:71;:::i;:::-;8145:72;8213:2;8202:9;8198:18;8189:6;8145:72;:::i;:::-;8227;8295:2;8284:9;8280:18;8271:6;8227:72;:::i;:::-;8309;8377:2;8366:9;8362:18;8353:6;8309:72;:::i;:::-;8391:73;8459:3;8448:9;8444:19;8435:6;8391:73;:::i;:::-;7807:664;;;;;;;;:::o;8757:364::-;8845:3;8873:39;8906:5;8557:12;;8477:99;8873:39;8688:19;;;8740:4;8731:14;;8921:78;;9008:52;9053:6;9048:3;9041:4;9034:5;9030:16;9008:52;:::i;:::-;9085:29;9107:6;9085:29;:::i;:::-;9076:39;;;;8757:364;-1:-1:-1;;;8757:364:55:o;9127:313::-;9278:2;9291:47;;;9263:18;;9355:78;9263:18;9419:6;9355:78;:::i;:::-;9347:86;9127:313;-1:-1:-1;;;9127:313:55:o;9672:154::-;9715:11;9751:29;9775:3;9769:10;3486::20;3310:202;9945:594:55;10029:5;10060:38;10092:5;8557:12;;8477:99;10060:38;9654:4;9645:14;;10209:35;9645:14;10209:35;:::i;:::-;10200:44;;10268:2;10260:6;10257:14;10254:278;;;10339:169;-1:-1:-1;;10394:6:55;10390:2;10386:15;10383:1;10379:23;9916:16;;9832:107;10339:169;10316:5;10295:227;10286:236;;10254:278;10035:504;;9945:594;;;:::o;10545:180::-;-1:-1:-1;;;10590:1:55;10583:88;10690:4;10687:1;10680:15;10714:4;10711:1;10704:15;10731:320;10812:1;10802:12;;10859:1;10849:12;;;10870:81;;10936:4;10928:6;10924:17;10914:27;;10870:81;10998:2;10990:6;10987:14;10967:18;10964:38;10961:84;;;11017:18;;:::i;:::-;10782:269;10731:320;;;:::o;:::-;426:5697:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
        },
        "deployedBytecode": {
          "functionDebugData": {
            "@DEFAULT_ADMIN_ROLE_27": {
              "entryPoint": null,
              "id": 27,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@PROJECT_ADMIN_ROLE_9899": {
              "entryPoint": null,
              "id": 9899,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_addTokenToAllTokensEnumeration_13625": {
              "entryPoint": null,
              "id": 13625,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_addTokenToOwnerEnumeration_13605": {
              "entryPoint": 13259,
              "id": 13605,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_afterTokenTransfer_13310": {
              "entryPoint": null,
              "id": 13310,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_baseURI_12536": {
              "entryPoint": 8805,
              "id": 12536,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_beforeTokenTransfer_12557": {
              "entryPoint": 10572,
              "id": 12557,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_beforeTokenTransfer_13299": {
              "entryPoint": null,
              "id": 13299,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_beforeTokenTransfer_13575": {
              "entryPoint": 11756,
              "id": 13575,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_buildDomainSeparator_4179": {
              "entryPoint": 12382,
              "id": 4179,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_burn_13274": {
              "entryPoint": 7958,
              "id": 13274,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_callOptionalReturn_1140": {
              "entryPoint": 12781,
              "id": 1140,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_checkRole_131": {
              "entryPoint": 9038,
              "id": 131,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_checkRole_92": {
              "entryPoint": 7252,
              "id": 92,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_convertFromStableCoin_10347": {
              "entryPoint": 8141,
              "id": 10347,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@_domainSeparatorV4_4158": {
              "entryPoint": 11484,
              "id": 4158,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_estimateSwapAmount_10637": {
              "entryPoint": 10583,
              "id": 10637,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@_exists_13164": {
              "entryPoint": 8112,
              "id": 13164,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@_getPathFromTokenToToken_10724": {
              "entryPoint": 11940,
              "id": 10724,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@_getProtocolFee_10404": {
              "entryPoint": 7581,
              "id": 10404,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@_grantRole_283": {
              "entryPoint": 7690,
              "id": 283,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_hashTypedDataV4_4195": {
              "entryPoint": 9191,
              "id": 4195,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@_hash_9413": {
              "entryPoint": 7341,
              "id": 9413,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@_hash_9439": {
              "entryPoint": 8544,
              "id": 9439,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@_isOwner_13146": {
              "entryPoint": 7923,
              "id": 13146,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@_mintWithCounter_12887": {
              "entryPoint": 7436,
              "id": 12887,
              "parameterSlots": 6,
              "returnSlots": 1
            },
            "@_mint_13226": {
              "entryPoint": 10316,
              "id": 13226,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_msgSender_3034": {
              "entryPoint": null,
              "id": 3034,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_nonReentrantAfter_687": {
              "entryPoint": null,
              "id": 687,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_nonReentrantBefore_679": {
              "entryPoint": 7299,
              "id": 679,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_pay_10592": {
              "entryPoint": 9365,
              "id": 10592,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_removeTokenFromAllTokensEnumeration_13736": {
              "entryPoint": 13084,
              "id": 13736,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_removeTokenFromOwnerEnumeration_13688": {
              "entryPoint": 12927,
              "id": 13688,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_requireMinted_13288": {
              "entryPoint": 8768,
              "id": 13288,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_revert_3021": {
              "entryPoint": null,
              "id": 3021,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_revokeRole_314": {
              "entryPoint": 7822,
              "id": 314,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_throwError_3727": {
              "entryPoint": 12602,
              "id": 3727,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_verify_12833": {
              "entryPoint": 9236,
              "id": 12833,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@addAuthority_12750": {
              "entryPoint": 3515,
              "id": 12750,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@addLinkPriceMASA_12044": {
              "entryPoint": null,
              "id": 12044,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@addLinkPrice_12041": {
              "entryPoint": null,
              "id": 12041,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@add_5324": {
              "entryPoint": 10560,
              "id": 5324,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@authorities_12677": {
              "entryPoint": null,
              "id": 12677,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@balanceOf_13027": {
              "entryPoint": 4708,
              "id": 13027,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@burn_13398": {
              "entryPoint": 4308,
              "id": 13398,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@byteLength_3235": {
              "entryPoint": 12342,
              "id": 3235,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@current_3062": {
              "entryPoint": null,
              "id": 3062,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@disablePaymentMethod_10169": {
              "entryPoint": 5713,
              "id": 10169,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@div_5369": {
              "entryPoint": 10548,
              "id": 5369,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@eip712Domain_4242": {
              "entryPoint": 5379,
              "id": 4242,
              "parameterSlots": 0,
              "returnSlots": 7
            },
            "@enablePaymentMethod_10107": {
              "entryPoint": 6329,
              "id": 10107,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@enabledPaymentMethod_9928": {
              "entryPoint": null,
              "id": 9928,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@enabledPaymentMethods_9931": {
              "entryPoint": 2785,
              "id": 9931,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@exists_12373": {
              "entryPoint": 4566,
              "id": 12373,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@functionCallWithValue_2846": {
              "entryPoint": null,
              "id": 2846,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "@functionCall_2782": {
              "entryPoint": 13500,
              "id": 2782,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@getEnabledPaymentMethods_10277": {
              "entryPoint": 2973,
              "id": 10277,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@getIdentityId_12360": {
              "entryPoint": 6145,
              "id": 12360,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@getMintPriceWithProtocolFee_12527": {
              "entryPoint": 6930,
              "id": 12527,
              "parameterSlots": 1,
              "returnSlots": 2
            },
            "@getMintPrice_12503": {
              "entryPoint": 4776,
              "id": 12503,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@getProtocolFee_10293": {
              "entryPoint": 3382,
              "id": 10293,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@getRoleAdmin_146": {
              "entryPoint": 3494,
              "id": 146,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@getStringSlot_3421": {
              "entryPoint": 7249,
              "id": 3421,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@grantRole_166": {
              "entryPoint": 3838,
              "id": 166,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@hasRole_79": {
              "entryPoint": 5672,
              "id": 79,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@increment_3076": {
              "entryPoint": null,
              "id": 3076,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@isContract_2710": {
              "entryPoint": null,
              "id": 2710,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@log10_4985": {
              "entryPoint": 10836,
              "id": 4985,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@masaToken_9924": {
              "entryPoint": null,
              "id": 9924,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@mintPriceMASA_12038": {
              "entryPoint": null,
              "id": 12038,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@mintPrice_12036": {
              "entryPoint": null,
              "id": 12036,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@mint_9333": {
              "entryPoint": 3070,
              "id": 9333,
              "parameterSlots": 6,
              "returnSlots": 1
            },
            "@mint_9387": {
              "entryPoint": 5125,
              "id": 9387,
              "parameterSlots": 6,
              "returnSlots": 1
            },
            "@mul_5354": {
              "entryPoint": 10536,
              "id": 5354,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@name_13065": {
              "entryPoint": 2827,
              "id": 13065,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@ownerOf_13055": {
              "entryPoint": 4655,
              "id": 13055,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@projectFeeReceiver_9933": {
              "entryPoint": null,
              "id": 9933,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@protocolFeeAmount_9937": {
              "entryPoint": null,
              "id": 9937,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@protocolFeePercent_9939": {
              "entryPoint": null,
              "id": 9939,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@protocolFeeReceiver_9935": {
              "entryPoint": null,
              "id": 9935,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@queryLinkPriceMASA_12050": {
              "entryPoint": null,
              "id": 12050,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@queryLinkPrice_12047": {
              "entryPoint": null,
              "id": 12047,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@recover_3800": {
              "entryPoint": 11628,
              "id": 3800,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@removeAuthority_12799": {
              "entryPoint": 6603,
              "id": 12799,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@renounceRole_209": {
              "entryPoint": 3953,
              "id": 209,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@revokeRole_186": {
              "entryPoint": 6809,
              "id": 186,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@safeTransferFrom_873": {
              "entryPoint": 11668,
              "id": 873,
              "parameterSlots": 4,
              "returnSlots": 0
            },
            "@setAddLinkPriceMASA_12257": {
              "entryPoint": 4100,
              "id": 12257,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@setAddLinkPrice_12222": {
              "entryPoint": 3723,
              "id": 12222,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@setMasaToken_10078": {
              "entryPoint": 5032,
              "id": 10078,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@setMintPriceMASA_12161": {
              "entryPoint": 4451,
              "id": 12161,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@setMintPrice_12126": {
              "entryPoint": 6964,
              "id": 12126,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@setProjectFeeReceiver_10204": {
              "entryPoint": 5516,
              "id": 10204,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@setProtocolFeeAmount_10246": {
              "entryPoint": 2716,
              "id": 10246,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@setProtocolFeePercent_10267": {
              "entryPoint": 6093,
              "id": 10267,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@setProtocolFeeReceiver_10225": {
              "entryPoint": 4358,
              "id": 10225,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@setQueryLinkPriceMASA_12327": {
              "entryPoint": 5264,
              "id": 12327,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@setQueryLinkPrice_12292": {
              "entryPoint": 7079,
              "id": 12292,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@setSoulboundIdentity_12187": {
              "entryPoint": 4007,
              "id": 12187,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@setStableCoin_10057": {
              "entryPoint": 3401,
              "id": 10057,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@setSwapRouter_10015": {
              "entryPoint": 4215,
              "id": 10015,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@setWrappedNativeToken_10036": {
              "entryPoint": 6837,
              "id": 10036,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@soulboundIdentity_12034": {
              "entryPoint": null,
              "id": 12034,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@stableCoin_9922": {
              "entryPoint": null,
              "id": 9922,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@sub_5339": {
              "entryPoint": 11656,
              "id": 5339,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@supportsInterface_12432": {
              "entryPoint": 2768,
              "id": 12432,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@supportsInterface_13003": {
              "entryPoint": 9127,
              "id": 13003,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@supportsInterface_13449": {
              "entryPoint": 7262,
              "id": 13449,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@supportsInterface_4269": {
              "entryPoint": null,
              "id": 4269,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@supportsInterface_60": {
              "entryPoint": 11431,
              "id": 60,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@swapRouter_9918": {
              "entryPoint": null,
              "id": 9918,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@symbol_13075": {
              "entryPoint": 6078,
              "id": 13075,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@toHexString_3627": {
              "entryPoint": 11068,
              "id": 3627,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@toHexString_3647": {
              "entryPoint": 11050,
              "id": 3647,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@toShortStringWithFallback_3275": {
              "entryPoint": 7194,
              "id": 3275,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@toShortString_3177": {
              "entryPoint": 8976,
              "id": 3177,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@toStringWithFallback_3302": {
              "entryPoint": 8604,
              "id": 3302,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@toString_3203": {
              "entryPoint": 10773,
              "id": 3203,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@toString_3503": {
              "entryPoint": 8820,
              "id": 3503,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@toTypedDataHash_4018": {
              "entryPoint": null,
              "id": 4018,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@tokenByIndex_13511": {
              "entryPoint": 4577,
              "id": 13511,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@tokenOfOwnerByIndex_13477": {
              "entryPoint": 3871,
              "id": 13477,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@tokenURI_12413": {
              "entryPoint": 6501,
              "id": 12413,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@totalSupply_13488": {
              "entryPoint": null,
              "id": 13488,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@tryRecover_3773": {
              "entryPoint": 12532,
              "id": 3773,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "@tryRecover_3941": {
              "entryPoint": 13327,
              "id": 3941,
              "parameterSlots": 4,
              "returnSlots": 2
            },
            "@verifyCallResultFromTarget_2977": {
              "entryPoint": 13633,
              "id": 2977,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "@wrappedNativeToken_9920": {
              "entryPoint": null,
              "id": 9920,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr_fromMemory": {
              "entryPoint": 16716,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_decode_t_address": {
              "entryPoint": 14342,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_t_address_fromMemory": {
              "entryPoint": 15140,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_t_array$_t_uint256_$dyn_memory_ptr_fromMemory": {
              "entryPoint": 16812,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_t_bool_fromMemory": {
              "entryPoint": 17341,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_t_bytes32": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_t_bytes4": {
              "entryPoint": 13966,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_t_bytes_calldata_ptr": {
              "entryPoint": 14353,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_t_uint256": {
              "entryPoint": 13906,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_t_uint256_fromMemory": {
              "entryPoint": 15908,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_address": {
              "entryPoint": 14637,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_address_fromMemory": {
              "entryPoint": 15151,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_addresst_addresst_addresst_uint256t_bytes_calldata_ptr": {
              "entryPoint": 14788,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 6
            },
            "abi_decode_tuple_t_addresst_uint256": {
              "entryPoint": 14576,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_addresst_uint256t_addresst_uint256t_bytes_calldata_ptr": {
              "entryPoint": 14427,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 6
            },
            "abi_decode_tuple_t_array$_t_uint256_$dyn_memory_ptr_fromMemory": {
              "entryPoint": 16848,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_bool_fromMemory": {
              "entryPoint": 17352,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_bytes32": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_bytes32t_address": {
              "entryPoint": 14670,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_bytes4": {
              "entryPoint": 13977,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint256": {
              "entryPoint": 13917,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint256_fromMemory": {
              "entryPoint": 15919,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encodeUpdatedPos_t_address_to_t_address": {
              "entryPoint": 14203,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encodeUpdatedPos_t_uint256_to_t_uint256": {
              "entryPoint": 14861,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_t_address_to_t_address": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_t_address_to_t_address_fromStack": {
              "entryPoint": 14057,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_t_array$_t_address_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr_fromStack": {
              "entryPoint": 14223,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack": {
              "entryPoint": 14873,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_t_bool_to_t_bool_fromStack": {
              "entryPoint": 14010,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_t_bytes1_to_t_bytes1_fromStack": {
              "entryPoint": 14845,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_t_bytes32_to_t_bytes32_fromStack": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_t_contract$_ISoulboundIdentity_$10954_to_t_address_fromStack": {
              "entryPoint": 14765,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 14134,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack": {
              "entryPoint": 15952,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 17123,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 16929,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 17186,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_1e3f643e26125191cb4d250aea16dfef593e7657e78ad664a187bfc056770dd1_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 16374,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_4cba4594467bed28c84b2ef8d55aac89acba7e2da5637e413ab41fc240140e6b_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 15263,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 17254,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_608839fd44787057cb3d37d5cc5b64398c23ca3a9c57285ebb020478108fa981_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 15682,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_70ad2518d1f7f0f51092b89610563e26421e7b5695bf143c261b724f5156697a_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 15443,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_94311adc0a0cd4e10be11b23bd4316b8cffa4adf693e8f96f5c075aa439a7972_to_t_string_memory_ptr_nonPadded_inplace_fromStack": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_9ef05e702ba0a2951785c140491ca358d7357043a4cde53aea0ddcb0ee904823_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 16442,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_a3c3eedda6c72e2c47160117d4a29d221437504cd467b98f580e08d3d3970883_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 15622,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 17533,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 17385,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_e377e4860fbccf11d3b4fcb4a7f63197010d7ea9cd7cd736dd805d0f46d766f8_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 15514,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 16032,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 15351,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_t_uint256_to_t_uint256": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_t_uint256_to_t_uint256_fromStack": {
              "entryPoint": 14313,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_t_uint8_to_t_uint8_fromStack": {
              "entryPoint": 17472,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
              "entryPoint": 17521,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr_t_stringliteral_94311adc0a0cd4e10be11b23bd4316b8cffa4adf693e8f96f5c075aa439a7972__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
              "entryPoint": 15986,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
              "entryPoint": 16366,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
              "entryPoint": 16284,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
              "entryPoint": 14066,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed": {
              "entryPoint": 16995,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed": {
              "entryPoint": 14296,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
              "entryPoint": 14020,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed": {
              "entryPoint": 14935,
              "id": null,
              "parameterSlots": 8,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256__to_t_bytes32_t_address_t_address_t_uint256__fromStack_reversed": {
              "entryPoint": 16162,
              "id": null,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed": {
              "entryPoint": 17035,
              "id": null,
              "parameterSlots": 6,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bytes32_t_uint256_t_address_t_uint256__to_t_bytes32_t_uint256_t_address_t_uint256__fromStack_reversed": {
              "entryPoint": 16100,
              "id": null,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed": {
              "entryPoint": 17481,
              "id": null,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_contract$_ISoulboundIdentity_$10954__to_t_address__fromStack_reversed": {
              "entryPoint": 14774,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 14186,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 17170,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 16979,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 17238,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_1e3f643e26125191cb4d250aea16dfef593e7657e78ad664a187bfc056770dd1__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 16426,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_4cba4594467bed28c84b2ef8d55aac89acba7e2da5637e413ab41fc240140e6b__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 15335,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 17317,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_608839fd44787057cb3d37d5cc5b64398c23ca3a9c57285ebb020478108fa981__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 15749,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_70ad2518d1f7f0f51092b89610563e26421e7b5695bf143c261b724f5156697a__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 15498,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_9ef05e702ba0a2951785c140491ca358d7357043a4cde53aea0ddcb0ee904823__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 16490,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_a3c3eedda6c72e2c47160117d4a29d221437504cd467b98f580e08d3d3970883__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 15666,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 17585,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 17456,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_e377e4860fbccf11d3b4fcb4a7f63197010d7ea9cd7cd736dd805d0f46d766f8__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 15584,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 16084,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 15427,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
              "entryPoint": 14319,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_address_t_address_t_uint256_t_address_t_uint256__to_t_uint256_t_address_t_address_t_uint256_t_address_t_uint256__fromStack_reversed": {
              "entryPoint": 15765,
              "id": null,
              "parameterSlots": 7,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_array$_t_address_$dyn_memory_ptr__to_t_uint256_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed": {
              "entryPoint": 16581,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed": {
              "entryPoint": 15046,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256_t_uint256_t_address_t_uint256_t_address_t_uint256__to_t_uint256_t_uint256_t_address_t_uint256_t_address_t_uint256__fromStack_reversed": {
              "entryPoint": 15184,
              "id": null,
              "parameterSlots": 7,
              "returnSlots": 1
            },
            "allocate_memory": {
              "entryPoint": 16658,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "allocate_unbounded": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr": {
              "entryPoint": 16681,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_dataslot_t_array$_t_address_$dyn_memory_ptr": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_dataslot_t_array$_t_uint256_$dyn_memory_ptr": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_dataslot_t_bytes_memory_ptr": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_length_t_array$_t_address_$dyn_memory_ptr": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_length_t_array$_t_uint256_$dyn_memory_ptr": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_length_t_bytes_memory_ptr": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_length_t_string_memory_ptr": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_nextElement_t_array$_t_address_$dyn_memory_ptr": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_nextElement_t_array$_t_uint256_$dyn_memory_ptr": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr_fromStack": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_add_t_uint256": {
              "entryPoint": 16506,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_div_t_uint256": {
              "entryPoint": 16561,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_mul_t_uint256": {
              "entryPoint": 16530,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_sub_t_uint256": {
              "entryPoint": 15836,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "cleanup_t_address": {
              "entryPoint": 14046,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "cleanup_t_bool": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "cleanup_t_bytes1": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "cleanup_t_bytes32": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "cleanup_t_bytes4": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "cleanup_t_uint160": {
              "entryPoint": 14034,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "cleanup_t_uint256": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "cleanup_t_uint8": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32": {
              "entryPoint": 16221,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "convert_t_contract$_ISoulboundIdentity_$10954_to_t_address": {
              "entryPoint": 14754,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "convert_t_uint160_to_t_address": {
              "entryPoint": 14743,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "convert_t_uint160_to_t_uint160": {
              "entryPoint": 14721,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "copy_memory_to_memory": {
              "entryPoint": 14080,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "decrement_t_uint256": {
              "entryPoint": 16906,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "extract_byte_array_length": {
              "entryPoint": 15095,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "finalize_allocation": {
              "entryPoint": 16613,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "identity": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "increment_t_uint256": {
              "entryPoint": 15881,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "panic_error_0x11": {
              "entryPoint": 15814,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x12": {
              "entryPoint": 16189,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x21": {
              "entryPoint": 17101,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x22": {
              "entryPoint": 15073,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x31": {
              "entryPoint": 15859,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x32": {
              "entryPoint": 15600,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x41": {
              "entryPoint": 15792,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "read_from_memoryt_bytes32": {
              "entryPoint": 16211,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "round_up_to_mul_of_32": {
              "entryPoint": 14124,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "shift_left_dynamic": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "store_literal_in_memory_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_1e3f643e26125191cb4d250aea16dfef593e7657e78ad664a187bfc056770dd1": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_4cba4594467bed28c84b2ef8d55aac89acba7e2da5637e413ab41fc240140e6b": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_608839fd44787057cb3d37d5cc5b64398c23ca3a9c57285ebb020478108fa981": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_70ad2518d1f7f0f51092b89610563e26421e7b5695bf143c261b724f5156697a": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_94311adc0a0cd4e10be11b23bd4316b8cffa4adf693e8f96f5c075aa439a7972": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_9ef05e702ba0a2951785c140491ca358d7357043a4cde53aea0ddcb0ee904823": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_a3c3eedda6c72e2c47160117d4a29d221437504cd467b98f580e08d3d3970883": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_e377e4860fbccf11d3b4fcb4a7f63197010d7ea9cd7cd736dd805d0f46d766f8": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "validator_revert_t_address": {
              "entryPoint": 14333,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "validator_revert_t_bool": {
              "entryPoint": 17333,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "validator_revert_t_bytes32": {
              "entryPoint": null,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "validator_revert_t_bytes4": {
              "entryPoint": 13950,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "validator_revert_t_uint256": {
              "entryPoint": 13893,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:51823:55",
                "statements": [
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "47:35:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "57:19:55",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "73:2:55",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "67:5:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "67:9:55"
                          },
                          "variableNames": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulIdentifier",
                              "src": "57:6:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "allocate_unbounded",
                    "nodeType": "YulFunctionDefinition",
                    "returnVariables": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "40:6:55",
                        "type": ""
                      }
                    ],
                    "src": "7:75:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "177:28:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "194:1:55",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "197:1:55",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "187:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "187:12:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "187:12:55"
                        }
                      ]
                    },
                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                    "nodeType": "YulFunctionDefinition",
                    "src": "88:117:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "300:28:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "317:1:55",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "320:1:55",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "310:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "310:12:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "310:12:55"
                        }
                      ]
                    },
                    "name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                    "nodeType": "YulFunctionDefinition",
                    "src": "211:117:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "379:32:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "389:16:55",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "400:5:55"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nodeType": "YulIdentifier",
                              "src": "389:7:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "361:5:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nodeType": "YulTypedName",
                        "src": "371:7:55",
                        "type": ""
                      }
                    ],
                    "src": "334:77:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "460:79:55",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "517:16:55",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "526:1:55",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "529:1:55",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "519:6:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "519:12:55"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "519:12:55"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "483:5:55"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "508:5:55"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "cleanup_t_uint256",
                                      "nodeType": "YulIdentifier",
                                      "src": "490:17:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "490:24:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "480:2:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "480:35:55"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "473:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "473:43:55"
                          },
                          "nodeType": "YulIf",
                          "src": "470:63:55"
                        }
                      ]
                    },
                    "name": "validator_revert_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "453:5:55",
                        "type": ""
                      }
                    ],
                    "src": "417:122:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "597:87:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "607:29:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "629:6:55"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "616:12:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "616:20:55"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "607:5:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "672:5:55"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_uint256",
                              "nodeType": "YulIdentifier",
                              "src": "645:26:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "645:33:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "645:33:55"
                        }
                      ]
                    },
                    "name": "abi_decode_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "575:6:55",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "583:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "591:5:55",
                        "type": ""
                      }
                    ],
                    "src": "545:139:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "756:263:55",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "802:83:55",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nodeType": "YulIdentifier",
                                    "src": "804:77:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "804:79:55"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "804:79:55"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "777:7:55"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "786:9:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "773:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "773:23:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "798:2:55",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "769:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "769:32:55"
                          },
                          "nodeType": "YulIf",
                          "src": "766:119:55"
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "895:117:55",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "910:15:55",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "924:1:55",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "914:6:55",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "939:63:55",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "974:9:55"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "985:6:55"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "970:3:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "970:22:55"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "994:7:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_uint256",
                                  "nodeType": "YulIdentifier",
                                  "src": "949:20:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "949:53:55"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "939:6:55"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "726:9:55",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "737:7:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "749:6:55",
                        "type": ""
                      }
                    ],
                    "src": "690:329:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1069:105:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1079:89:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "1094:5:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1101:66:55",
                                "type": "",
                                "value": "0xffffffff00000000000000000000000000000000000000000000000000000000"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "1090:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1090:78:55"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nodeType": "YulIdentifier",
                              "src": "1079:7:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_bytes4",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "1051:5:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nodeType": "YulTypedName",
                        "src": "1061:7:55",
                        "type": ""
                      }
                    ],
                    "src": "1025:149:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1222:78:55",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1278:16:55",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1287:1:55",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "1290:1:55",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1280:6:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1280:12:55"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1280:12:55"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "1245:5:55"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "1269:5:55"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "cleanup_t_bytes4",
                                      "nodeType": "YulIdentifier",
                                      "src": "1252:16:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1252:23:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "1242:2:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1242:34:55"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "1235:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1235:42:55"
                          },
                          "nodeType": "YulIf",
                          "src": "1232:62:55"
                        }
                      ]
                    },
                    "name": "validator_revert_t_bytes4",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "1215:5:55",
                        "type": ""
                      }
                    ],
                    "src": "1180:120:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1357:86:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1367:29:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "1389:6:55"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1376:12:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1376:20:55"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "1367:5:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "1431:5:55"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_bytes4",
                              "nodeType": "YulIdentifier",
                              "src": "1405:25:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1405:32:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1405:32:55"
                        }
                      ]
                    },
                    "name": "abi_decode_t_bytes4",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "1335:6:55",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "1343:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "1351:5:55",
                        "type": ""
                      }
                    ],
                    "src": "1306:137:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1514:262:55",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1560:83:55",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nodeType": "YulIdentifier",
                                    "src": "1562:77:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1562:79:55"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1562:79:55"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1535:7:55"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1544:9:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1531:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1531:23:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1556:2:55",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1527:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1527:32:55"
                          },
                          "nodeType": "YulIf",
                          "src": "1524:119:55"
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "1653:116:55",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "1668:15:55",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1682:1:55",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "1672:6:55",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "1697:62:55",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "1731:9:55"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "1742:6:55"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1727:3:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1727:22:55"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1751:7:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_bytes4",
                                  "nodeType": "YulIdentifier",
                                  "src": "1707:19:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1707:52:55"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "1697:6:55"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes4",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1484:9:55",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1495:7:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1507:6:55",
                        "type": ""
                      }
                    ],
                    "src": "1449:327:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1824:48:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "1834:32:55",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "1859:5:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "1852:6:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1852:13:55"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "1845:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1845:21:55"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nodeType": "YulIdentifier",
                              "src": "1834:7:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_bool",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "1806:5:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nodeType": "YulTypedName",
                        "src": "1816:7:55",
                        "type": ""
                      }
                    ],
                    "src": "1782:90:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1937:50:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "1954:3:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "1974:5:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "cleanup_t_bool",
                                  "nodeType": "YulIdentifier",
                                  "src": "1959:14:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1959:21:55"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1947:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1947:34:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1947:34:55"
                        }
                      ]
                    },
                    "name": "abi_encode_t_bool_to_t_bool_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "1925:5:55",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "1932:3:55",
                        "type": ""
                      }
                    ],
                    "src": "1878:109:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2085:118:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "2095:26:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2107:9:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2118:2:55",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2103:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2103:18:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "2095:4:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "2169:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2182:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2193:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2178:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2178:17:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_bool_to_t_bool_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "2131:37:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2131:65:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2131:65:55"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2057:9:55",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2069:6:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "2080:4:55",
                        "type": ""
                      }
                    ],
                    "src": "1993:210:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2254:81:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "2264:65:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "2279:5:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2286:42:55",
                                "type": "",
                                "value": "0xffffffffffffffffffffffffffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "2275:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2275:54:55"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nodeType": "YulIdentifier",
                              "src": "2264:7:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_uint160",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "2236:5:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nodeType": "YulTypedName",
                        "src": "2246:7:55",
                        "type": ""
                      }
                    ],
                    "src": "2209:126:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2386:51:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "2396:35:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "2425:5:55"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint160",
                              "nodeType": "YulIdentifier",
                              "src": "2407:17:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2407:24:55"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nodeType": "YulIdentifier",
                              "src": "2396:7:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "2368:5:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nodeType": "YulTypedName",
                        "src": "2378:7:55",
                        "type": ""
                      }
                    ],
                    "src": "2341:96:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2508:53:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "2525:3:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "2548:5:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "cleanup_t_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "2530:17:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2530:24:55"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2518:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2518:37:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2518:37:55"
                        }
                      ]
                    },
                    "name": "abi_encode_t_address_to_t_address_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "2496:5:55",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "2503:3:55",
                        "type": ""
                      }
                    ],
                    "src": "2443:118:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2665:124:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "2675:26:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2687:9:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2698:2:55",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2683:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2683:18:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "2675:4:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "2755:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2768:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2779:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2764:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2764:17:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_address_to_t_address_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "2711:43:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2711:71:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2711:71:55"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2637:9:55",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2649:6:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "2660:4:55",
                        "type": ""
                      }
                    ],
                    "src": "2567:222:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2854:40:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "2865:22:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "2881:5:55"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "2875:5:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2875:12:55"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "2865:6:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_length_t_string_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "2837:5:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "2847:6:55",
                        "type": ""
                      }
                    ],
                    "src": "2795:99:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2996:73:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "3013:3:55"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "3018:6:55"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3006:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3006:19:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3006:19:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3034:29:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "3053:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3058:4:55",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3049:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3049:14:55"
                          },
                          "variableNames": [
                            {
                              "name": "updated_pos",
                              "nodeType": "YulIdentifier",
                              "src": "3034:11:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "2968:3:55",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "2973:6:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "updated_pos",
                        "nodeType": "YulTypedName",
                        "src": "2984:11:55",
                        "type": ""
                      }
                    ],
                    "src": "2900:169:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3124:258:55",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3134:10:55",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3143:1:55",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "3138:1:55",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3203:63:55",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "3228:3:55"
                                        },
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "3233:1:55"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "3224:3:55"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3224:11:55"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "src",
                                              "nodeType": "YulIdentifier",
                                              "src": "3247:3:55"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "3252:1:55"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "3243:3:55"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "3243:11:55"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "3237:5:55"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3237:18:55"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "3217:6:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3217:39:55"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3217:39:55"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "3164:1:55"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "3167:6:55"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "3161:2:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3161:13:55"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "3175:19:55",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "3177:15:55",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "3186:1:55"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3189:2:55",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "3182:3:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3182:10:55"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "3177:1:55"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "3157:3:55",
                            "statements": []
                          },
                          "src": "3153:113:55"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3300:76:55",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "3350:3:55"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "3355:6:55"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "3346:3:55"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3346:16:55"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3364:1:55",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "3339:6:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3339:27:55"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3339:27:55"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "3281:1:55"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "3284:6:55"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "3278:2:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3278:13:55"
                          },
                          "nodeType": "YulIf",
                          "src": "3275:101:55"
                        }
                      ]
                    },
                    "name": "copy_memory_to_memory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "3106:3:55",
                        "type": ""
                      },
                      {
                        "name": "dst",
                        "nodeType": "YulTypedName",
                        "src": "3111:3:55",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "3116:6:55",
                        "type": ""
                      }
                    ],
                    "src": "3075:307:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3436:54:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "3446:38:55",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "3464:5:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3471:2:55",
                                    "type": "",
                                    "value": "31"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3460:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3460:14:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3480:2:55",
                                    "type": "",
                                    "value": "31"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "3476:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3476:7:55"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "3456:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3456:28:55"
                          },
                          "variableNames": [
                            {
                              "name": "result",
                              "nodeType": "YulIdentifier",
                              "src": "3446:6:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "round_up_to_mul_of_32",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "3419:5:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "result",
                        "nodeType": "YulTypedName",
                        "src": "3429:6:55",
                        "type": ""
                      }
                    ],
                    "src": "3388:102:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3588:272:55",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3598:53:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "3645:5:55"
                              }
                            ],
                            "functionName": {
                              "name": "array_length_t_string_memory_ptr",
                              "nodeType": "YulIdentifier",
                              "src": "3612:32:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3612:39:55"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "3602:6:55",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3660:78:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "3726:3:55"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "3731:6:55"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "3667:58:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3667:71:55"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "3660:3:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "3773:5:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3780:4:55",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3769:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3769:16:55"
                              },
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "3787:3:55"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "3792:6:55"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "3747:21:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3747:52:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3747:52:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3808:46:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "3819:3:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "3846:6:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "round_up_to_mul_of_32",
                                  "nodeType": "YulIdentifier",
                                  "src": "3824:21:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3824:29:55"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3815:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3815:39:55"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "3808:3:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "3569:5:55",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "3576:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "3584:3:55",
                        "type": ""
                      }
                    ],
                    "src": "3496:364:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3984:195:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "3994:26:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4006:9:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4017:2:55",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4002:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4002:18:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "3994:4:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4041:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4052:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4037:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4037:17:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "4060:4:55"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4066:9:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "4056:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4056:20:55"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4030:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4030:47:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4030:47:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4086:86:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "4158:6:55"
                              },
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "4167:4:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "4094:63:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4094:78:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "4086:4:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3956:9:55",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3968:6:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "3979:4:55",
                        "type": ""
                      }
                    ],
                    "src": "3866:313:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4259:40:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "4270:22:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "4286:5:55"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "4280:5:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4280:12:55"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "4270:6:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_length_t_array$_t_address_$dyn_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "4242:5:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "4252:6:55",
                        "type": ""
                      }
                    ],
                    "src": "4185:114:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4416:73:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "4433:3:55"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "4438:6:55"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4426:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4426:19:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4426:19:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4454:29:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "4473:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4478:4:55",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4469:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4469:14:55"
                          },
                          "variableNames": [
                            {
                              "name": "updated_pos",
                              "nodeType": "YulIdentifier",
                              "src": "4454:11:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "4388:3:55",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "4393:6:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "updated_pos",
                        "nodeType": "YulTypedName",
                        "src": "4404:11:55",
                        "type": ""
                      }
                    ],
                    "src": "4305:184:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4567:60:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "4577:11:55",
                          "value": {
                            "name": "ptr",
                            "nodeType": "YulIdentifier",
                            "src": "4585:3:55"
                          },
                          "variableNames": [
                            {
                              "name": "data",
                              "nodeType": "YulIdentifier",
                              "src": "4577:4:55"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4598:22:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "ptr",
                                "nodeType": "YulIdentifier",
                                "src": "4610:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4615:4:55",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4606:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4606:14:55"
                          },
                          "variableNames": [
                            {
                              "name": "data",
                              "nodeType": "YulIdentifier",
                              "src": "4598:4:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_dataslot_t_array$_t_address_$dyn_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "ptr",
                        "nodeType": "YulTypedName",
                        "src": "4554:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "4562:4:55",
                        "type": ""
                      }
                    ],
                    "src": "4495:132:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4688:53:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "4705:3:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "4728:5:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "cleanup_t_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "4710:17:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4710:24:55"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4698:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4698:37:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4698:37:55"
                        }
                      ]
                    },
                    "name": "abi_encode_t_address_to_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "4676:5:55",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "4683:3:55",
                        "type": ""
                      }
                    ],
                    "src": "4633:108:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4827:99:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "4871:6:55"
                              },
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "4879:3:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_address_to_t_address",
                              "nodeType": "YulIdentifier",
                              "src": "4837:33:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4837:46:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4837:46:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4892:28:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "4910:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4915:4:55",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4906:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4906:14:55"
                          },
                          "variableNames": [
                            {
                              "name": "updatedPos",
                              "nodeType": "YulIdentifier",
                              "src": "4892:10:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encodeUpdatedPos_t_address_to_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4800:6:55",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "4808:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "updatedPos",
                        "nodeType": "YulTypedName",
                        "src": "4816:10:55",
                        "type": ""
                      }
                    ],
                    "src": "4747:179:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5007:38:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "5017:22:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "ptr",
                                "nodeType": "YulIdentifier",
                                "src": "5029:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5034:4:55",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5025:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5025:14:55"
                          },
                          "variableNames": [
                            {
                              "name": "next",
                              "nodeType": "YulIdentifier",
                              "src": "5017:4:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_nextElement_t_array$_t_address_$dyn_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "ptr",
                        "nodeType": "YulTypedName",
                        "src": "4994:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "next",
                        "nodeType": "YulTypedName",
                        "src": "5002:4:55",
                        "type": ""
                      }
                    ],
                    "src": "4932:113:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5205:608:55",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5215:68:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "5277:5:55"
                              }
                            ],
                            "functionName": {
                              "name": "array_length_t_array$_t_address_$dyn_memory_ptr",
                              "nodeType": "YulIdentifier",
                              "src": "5229:47:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5229:54:55"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "5219:6:55",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5292:93:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "5373:3:55"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "5378:6:55"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "5299:73:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5299:86:55"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "5292:3:55"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5394:71:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "5459:5:55"
                              }
                            ],
                            "functionName": {
                              "name": "array_dataslot_t_array$_t_address_$dyn_memory_ptr",
                              "nodeType": "YulIdentifier",
                              "src": "5409:49:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5409:56:55"
                          },
                          "variables": [
                            {
                              "name": "baseRef",
                              "nodeType": "YulTypedName",
                              "src": "5398:7:55",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5474:21:55",
                          "value": {
                            "name": "baseRef",
                            "nodeType": "YulIdentifier",
                            "src": "5488:7:55"
                          },
                          "variables": [
                            {
                              "name": "srcPtr",
                              "nodeType": "YulTypedName",
                              "src": "5478:6:55",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5564:224:55",
                            "statements": [
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "5578:34:55",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "srcPtr",
                                      "nodeType": "YulIdentifier",
                                      "src": "5605:6:55"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "5599:5:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5599:13:55"
                                },
                                "variables": [
                                  {
                                    "name": "elementValue0",
                                    "nodeType": "YulTypedName",
                                    "src": "5582:13:55",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "5625:70:55",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "elementValue0",
                                      "nodeType": "YulIdentifier",
                                      "src": "5676:13:55"
                                    },
                                    {
                                      "name": "pos",
                                      "nodeType": "YulIdentifier",
                                      "src": "5691:3:55"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "abi_encodeUpdatedPos_t_address_to_t_address",
                                    "nodeType": "YulIdentifier",
                                    "src": "5632:43:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5632:63:55"
                                },
                                "variableNames": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "5625:3:55"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "5708:70:55",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "srcPtr",
                                      "nodeType": "YulIdentifier",
                                      "src": "5771:6:55"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "array_nextElement_t_array$_t_address_$dyn_memory_ptr",
                                    "nodeType": "YulIdentifier",
                                    "src": "5718:52:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5718:60:55"
                                },
                                "variableNames": [
                                  {
                                    "name": "srcPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "5708:6:55"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "5526:1:55"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "5529:6:55"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "5523:2:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5523:13:55"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "5537:18:55",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "5539:14:55",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "5548:1:55"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "5551:1:55",
                                      "type": "",
                                      "value": "1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "5544:3:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5544:9:55"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "5539:1:55"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "5508:14:55",
                            "statements": [
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "5510:10:55",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "5519:1:55",
                                  "type": "",
                                  "value": "0"
                                },
                                "variables": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulTypedName",
                                    "src": "5514:1:55",
                                    "type": ""
                                  }
                                ]
                              }
                            ]
                          },
                          "src": "5504:284:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5797:10:55",
                          "value": {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "5804:3:55"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "5797:3:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_array$_t_address_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "5184:5:55",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "5191:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "5200:3:55",
                        "type": ""
                      }
                    ],
                    "src": "5081:732:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5967:225:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "5977:26:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5989:9:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6000:2:55",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5985:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5985:18:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "5977:4:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6024:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6035:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6020:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6020:17:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "6043:4:55"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6049:9:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "6039:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6039:20:55"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6013:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6013:47:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6013:47:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6069:116:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "6171:6:55"
                              },
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "6180:4:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_array$_t_address_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "6077:93:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6077:108:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6069:4:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5939:9:55",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5951:6:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "5962:4:55",
                        "type": ""
                      }
                    ],
                    "src": "5819:373:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6263:53:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "6280:3:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "6303:5:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "cleanup_t_uint256",
                                  "nodeType": "YulIdentifier",
                                  "src": "6285:17:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6285:24:55"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6273:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6273:37:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6273:37:55"
                        }
                      ]
                    },
                    "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "6251:5:55",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "6258:3:55",
                        "type": ""
                      }
                    ],
                    "src": "6198:118:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6420:124:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "6430:26:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6442:9:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6453:2:55",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6438:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6438:18:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6430:4:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "6510:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6523:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6534:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6519:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6519:17:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "6466:43:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6466:71:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6466:71:55"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6392:9:55",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6404:6:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "6415:4:55",
                        "type": ""
                      }
                    ],
                    "src": "6322:222:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6593:79:55",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "6650:16:55",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6659:1:55",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "6662:1:55",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "6652:6:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "6652:12:55"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "6652:12:55"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "6616:5:55"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "6641:5:55"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "cleanup_t_address",
                                      "nodeType": "YulIdentifier",
                                      "src": "6623:17:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6623:24:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "6613:2:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6613:35:55"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "6606:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6606:43:55"
                          },
                          "nodeType": "YulIf",
                          "src": "6603:63:55"
                        }
                      ]
                    },
                    "name": "validator_revert_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "6586:5:55",
                        "type": ""
                      }
                    ],
                    "src": "6550:122:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6730:87:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "6740:29:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "6762:6:55"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "6749:12:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6749:20:55"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "6740:5:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "6805:5:55"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_address",
                              "nodeType": "YulIdentifier",
                              "src": "6778:26:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6778:33:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6778:33:55"
                        }
                      ]
                    },
                    "name": "abi_decode_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "6708:6:55",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "6716:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "6724:5:55",
                        "type": ""
                      }
                    ],
                    "src": "6678:139:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6912:28:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6929:1:55",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6932:1:55",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "6922:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6922:12:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6922:12:55"
                        }
                      ]
                    },
                    "name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
                    "nodeType": "YulFunctionDefinition",
                    "src": "6823:117:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7035:28:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7052:1:55",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7055:1:55",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "7045:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7045:12:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7045:12:55"
                        }
                      ]
                    },
                    "name": "revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490",
                    "nodeType": "YulFunctionDefinition",
                    "src": "6946:117:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7158:28:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7175:1:55",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7178:1:55",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "7168:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7168:12:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7168:12:55"
                        }
                      ]
                    },
                    "name": "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
                    "nodeType": "YulFunctionDefinition",
                    "src": "7069:117:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7279:478:55",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7328:83:55",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
                                    "nodeType": "YulIdentifier",
                                    "src": "7330:77:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7330:79:55"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7330:79:55"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "7307:6:55"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7315:4:55",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "7303:3:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7303:17:55"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "7322:3:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "7299:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7299:27:55"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "7292:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7292:35:55"
                          },
                          "nodeType": "YulIf",
                          "src": "7289:122:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7420:30:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "7443:6:55"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "7430:12:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7430:20:55"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "7420:6:55"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7493:83:55",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490",
                                    "nodeType": "YulIdentifier",
                                    "src": "7495:77:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7495:79:55"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7495:79:55"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "7465:6:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7473:18:55",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "7462:2:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7462:30:55"
                          },
                          "nodeType": "YulIf",
                          "src": "7459:117:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7585:29:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "7601:6:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7609:4:55",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7597:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7597:17:55"
                          },
                          "variableNames": [
                            {
                              "name": "arrayPos",
                              "nodeType": "YulIdentifier",
                              "src": "7585:8:55"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7668:83:55",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
                                    "nodeType": "YulIdentifier",
                                    "src": "7670:77:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7670:79:55"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7670:79:55"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "arrayPos",
                                    "nodeType": "YulIdentifier",
                                    "src": "7633:8:55"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "7647:6:55"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7655:4:55",
                                        "type": "",
                                        "value": "0x01"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mul",
                                      "nodeType": "YulIdentifier",
                                      "src": "7643:3:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7643:17:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7629:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7629:32:55"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "7663:3:55"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "7626:2:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7626:41:55"
                          },
                          "nodeType": "YulIf",
                          "src": "7623:128:55"
                        }
                      ]
                    },
                    "name": "abi_decode_t_bytes_calldata_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "7246:6:55",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "7254:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "arrayPos",
                        "nodeType": "YulTypedName",
                        "src": "7262:8:55",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "7272:6:55",
                        "type": ""
                      }
                    ],
                    "src": "7205:552:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7916:956:55",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "7963:83:55",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nodeType": "YulIdentifier",
                                    "src": "7965:77:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "7965:79:55"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "7965:79:55"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "7937:7:55"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7946:9:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "7933:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7933:23:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7958:3:55",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "7929:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7929:33:55"
                          },
                          "nodeType": "YulIf",
                          "src": "7926:120:55"
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "8056:117:55",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "8071:15:55",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8085:1:55",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "8075:6:55",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "8100:63:55",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "8135:9:55"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "8146:6:55"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "8131:3:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8131:22:55"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "8155:7:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "8110:20:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8110:53:55"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "8100:6:55"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "8183:118:55",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "8198:16:55",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8212:2:55",
                                "type": "",
                                "value": "32"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "8202:6:55",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "8228:63:55",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "8263:9:55"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "8274:6:55"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "8259:3:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8259:22:55"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "8283:7:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_uint256",
                                  "nodeType": "YulIdentifier",
                                  "src": "8238:20:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8238:53:55"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nodeType": "YulIdentifier",
                                  "src": "8228:6:55"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "8311:118:55",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "8326:16:55",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8340:2:55",
                                "type": "",
                                "value": "64"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "8330:6:55",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "8356:63:55",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "8391:9:55"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "8402:6:55"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "8387:3:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8387:22:55"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "8411:7:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "8366:20:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8366:53:55"
                              },
                              "variableNames": [
                                {
                                  "name": "value2",
                                  "nodeType": "YulIdentifier",
                                  "src": "8356:6:55"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "8439:118:55",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "8454:16:55",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8468:2:55",
                                "type": "",
                                "value": "96"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "8458:6:55",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "8484:63:55",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "8519:9:55"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "8530:6:55"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "8515:3:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8515:22:55"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "8539:7:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_uint256",
                                  "nodeType": "YulIdentifier",
                                  "src": "8494:20:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8494:53:55"
                              },
                              "variableNames": [
                                {
                                  "name": "value3",
                                  "nodeType": "YulIdentifier",
                                  "src": "8484:6:55"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "8567:298:55",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "8582:47:55",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "8613:9:55"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8624:3:55",
                                        "type": "",
                                        "value": "128"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "8609:3:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8609:19:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "8596:12:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8596:33:55"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "8586:6:55",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "8676:83:55",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                                        "nodeType": "YulIdentifier",
                                        "src": "8678:77:55"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "8678:79:55"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "8678:79:55"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "8648:6:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8656:18:55",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "8645:2:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8645:30:55"
                              },
                              "nodeType": "YulIf",
                              "src": "8642:117:55"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "8773:82:55",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "8827:9:55"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "8838:6:55"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "8823:3:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8823:22:55"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "8847:7:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_bytes_calldata_ptr",
                                  "nodeType": "YulIdentifier",
                                  "src": "8791:31:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8791:64:55"
                              },
                              "variableNames": [
                                {
                                  "name": "value4",
                                  "nodeType": "YulIdentifier",
                                  "src": "8773:6:55"
                                },
                                {
                                  "name": "value5",
                                  "nodeType": "YulIdentifier",
                                  "src": "8781:6:55"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_uint256t_addresst_uint256t_bytes_calldata_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7846:9:55",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "7857:7:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7869:6:55",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "7877:6:55",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "7885:6:55",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "7893:6:55",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "7901:6:55",
                        "type": ""
                      },
                      {
                        "name": "value5",
                        "nodeType": "YulTypedName",
                        "src": "7909:6:55",
                        "type": ""
                      }
                    ],
                    "src": "7763:1109:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8961:391:55",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "9007:83:55",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nodeType": "YulIdentifier",
                                    "src": "9009:77:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9009:79:55"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9009:79:55"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "8982:7:55"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8991:9:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "8978:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8978:23:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9003:2:55",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "8974:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8974:32:55"
                          },
                          "nodeType": "YulIf",
                          "src": "8971:119:55"
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "9100:117:55",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "9115:15:55",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9129:1:55",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "9119:6:55",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "9144:63:55",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "9179:9:55"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "9190:6:55"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9175:3:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9175:22:55"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "9199:7:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "9154:20:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9154:53:55"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "9144:6:55"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "9227:118:55",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "9242:16:55",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9256:2:55",
                                "type": "",
                                "value": "32"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "9246:6:55",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "9272:63:55",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "9307:9:55"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "9318:6:55"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9303:3:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9303:22:55"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "9327:7:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_uint256",
                                  "nodeType": "YulIdentifier",
                                  "src": "9282:20:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9282:53:55"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nodeType": "YulIdentifier",
                                  "src": "9272:6:55"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8923:9:55",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "8934:7:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "8946:6:55",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "8954:6:55",
                        "type": ""
                      }
                    ],
                    "src": "8878:474:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9424:263:55",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "9470:83:55",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nodeType": "YulIdentifier",
                                    "src": "9472:77:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9472:79:55"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9472:79:55"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "9445:7:55"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9454:9:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "9441:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9441:23:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9466:2:55",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "9437:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9437:32:55"
                          },
                          "nodeType": "YulIf",
                          "src": "9434:119:55"
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "9563:117:55",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "9578:15:55",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9592:1:55",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "9582:6:55",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "9607:63:55",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "9642:9:55"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "9653:6:55"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "9638:3:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9638:22:55"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "9662:7:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "9617:20:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9617:53:55"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "9607:6:55"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9394:9:55",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "9405:7:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "9417:6:55",
                        "type": ""
                      }
                    ],
                    "src": "9358:329:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9738:32:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "9748:16:55",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "9759:5:55"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nodeType": "YulIdentifier",
                              "src": "9748:7:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_bytes32",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "9720:5:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nodeType": "YulTypedName",
                        "src": "9730:7:55",
                        "type": ""
                      }
                    ],
                    "src": "9693:77:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9819:79:55",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "9876:16:55",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9885:1:55",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9888:1:55",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "9878:6:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9878:12:55"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9878:12:55"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "9842:5:55"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "9867:5:55"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "cleanup_t_bytes32",
                                      "nodeType": "YulIdentifier",
                                      "src": "9849:17:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9849:24:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "9839:2:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9839:35:55"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "9832:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9832:43:55"
                          },
                          "nodeType": "YulIf",
                          "src": "9829:63:55"
                        }
                      ]
                    },
                    "name": "validator_revert_t_bytes32",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "9812:5:55",
                        "type": ""
                      }
                    ],
                    "src": "9776:122:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9956:87:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "9966:29:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "9988:6:55"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "9975:12:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9975:20:55"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "9966:5:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "10031:5:55"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_bytes32",
                              "nodeType": "YulIdentifier",
                              "src": "10004:26:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10004:33:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10004:33:55"
                        }
                      ]
                    },
                    "name": "abi_decode_t_bytes32",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "9934:6:55",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "9942:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "9950:5:55",
                        "type": ""
                      }
                    ],
                    "src": "9904:139:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10115:263:55",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10161:83:55",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nodeType": "YulIdentifier",
                                    "src": "10163:77:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10163:79:55"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "10163:79:55"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "10136:7:55"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10145:9:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "10132:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10132:23:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10157:2:55",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "10128:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10128:32:55"
                          },
                          "nodeType": "YulIf",
                          "src": "10125:119:55"
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "10254:117:55",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "10269:15:55",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10283:1:55",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "10273:6:55",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "10298:63:55",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "10333:9:55"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "10344:6:55"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "10329:3:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "10329:22:55"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "10353:7:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_bytes32",
                                  "nodeType": "YulIdentifier",
                                  "src": "10308:20:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10308:53:55"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "10298:6:55"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes32",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10085:9:55",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "10096:7:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "10108:6:55",
                        "type": ""
                      }
                    ],
                    "src": "10049:329:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10449:53:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "10466:3:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "10489:5:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "cleanup_t_bytes32",
                                  "nodeType": "YulIdentifier",
                                  "src": "10471:17:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10471:24:55"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10459:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10459:37:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10459:37:55"
                        }
                      ]
                    },
                    "name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "10437:5:55",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "10444:3:55",
                        "type": ""
                      }
                    ],
                    "src": "10384:118:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10606:124:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "10616:26:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10628:9:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10639:2:55",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10624:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10624:18:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "10616:4:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "10696:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10709:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10720:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10705:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10705:17:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "10652:43:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10652:71:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10652:71:55"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10578:9:55",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "10590:6:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "10601:4:55",
                        "type": ""
                      }
                    ],
                    "src": "10508:222:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10819:391:55",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10865:83:55",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nodeType": "YulIdentifier",
                                    "src": "10867:77:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10867:79:55"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "10867:79:55"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "10840:7:55"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10849:9:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "10836:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10836:23:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10861:2:55",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "10832:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10832:32:55"
                          },
                          "nodeType": "YulIf",
                          "src": "10829:119:55"
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "10958:117:55",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "10973:15:55",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10987:1:55",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "10977:6:55",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "11002:63:55",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "11037:9:55"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "11048:6:55"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "11033:3:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11033:22:55"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "11057:7:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_bytes32",
                                  "nodeType": "YulIdentifier",
                                  "src": "11012:20:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11012:53:55"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "11002:6:55"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "11085:118:55",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "11100:16:55",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11114:2:55",
                                "type": "",
                                "value": "32"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "11104:6:55",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "11130:63:55",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "11165:9:55"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "11176:6:55"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "11161:3:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11161:22:55"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "11185:7:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "11140:20:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11140:53:55"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nodeType": "YulIdentifier",
                                  "src": "11130:6:55"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes32t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10781:9:55",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "10792:7:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "10804:6:55",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "10812:6:55",
                        "type": ""
                      }
                    ],
                    "src": "10736:474:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11248:28:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "11258:12:55",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "11265:5:55"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nodeType": "YulIdentifier",
                              "src": "11258:3:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "identity",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "11234:5:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nodeType": "YulTypedName",
                        "src": "11244:3:55",
                        "type": ""
                      }
                    ],
                    "src": "11216:60:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11342:82:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "11352:66:55",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "11410:5:55"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "cleanup_t_uint160",
                                      "nodeType": "YulIdentifier",
                                      "src": "11392:17:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "11392:24:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "identity",
                                  "nodeType": "YulIdentifier",
                                  "src": "11383:8:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11383:34:55"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint160",
                              "nodeType": "YulIdentifier",
                              "src": "11365:17:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11365:53:55"
                          },
                          "variableNames": [
                            {
                              "name": "converted",
                              "nodeType": "YulIdentifier",
                              "src": "11352:9:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "convert_t_uint160_to_t_uint160",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "11322:5:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "converted",
                        "nodeType": "YulTypedName",
                        "src": "11332:9:55",
                        "type": ""
                      }
                    ],
                    "src": "11282:142:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11490:66:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "11500:50:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "11544:5:55"
                              }
                            ],
                            "functionName": {
                              "name": "convert_t_uint160_to_t_uint160",
                              "nodeType": "YulIdentifier",
                              "src": "11513:30:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11513:37:55"
                          },
                          "variableNames": [
                            {
                              "name": "converted",
                              "nodeType": "YulIdentifier",
                              "src": "11500:9:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "convert_t_uint160_to_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "11470:5:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "converted",
                        "nodeType": "YulTypedName",
                        "src": "11480:9:55",
                        "type": ""
                      }
                    ],
                    "src": "11430:126:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11650:66:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "11660:50:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "11704:5:55"
                              }
                            ],
                            "functionName": {
                              "name": "convert_t_uint160_to_t_address",
                              "nodeType": "YulIdentifier",
                              "src": "11673:30:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11673:37:55"
                          },
                          "variableNames": [
                            {
                              "name": "converted",
                              "nodeType": "YulIdentifier",
                              "src": "11660:9:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "convert_t_contract$_ISoulboundIdentity_$10954_to_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "11630:5:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "converted",
                        "nodeType": "YulTypedName",
                        "src": "11640:9:55",
                        "type": ""
                      }
                    ],
                    "src": "11562:154:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11815:94:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "11832:3:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "11896:5:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "convert_t_contract$_ISoulboundIdentity_$10954_to_t_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "11837:58:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11837:65:55"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11825:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11825:78:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11825:78:55"
                        }
                      ]
                    },
                    "name": "abi_encode_t_contract$_ISoulboundIdentity_$10954_to_t_address_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "11803:5:55",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "11810:3:55",
                        "type": ""
                      }
                    ],
                    "src": "11722:187:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12041:152:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "12051:26:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12063:9:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12074:2:55",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12059:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12059:18:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "12051:4:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "12159:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12172:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12183:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12168:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12168:17:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_contract$_ISoulboundIdentity_$10954_to_t_address_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "12087:71:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12087:99:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12087:99:55"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_contract$_ISoulboundIdentity_$10954__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "12013:9:55",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "12025:6:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "12036:4:55",
                        "type": ""
                      }
                    ],
                    "src": "11915:278:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12352:956:55",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "12399:83:55",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nodeType": "YulIdentifier",
                                    "src": "12401:77:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "12401:79:55"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "12401:79:55"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "12373:7:55"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12382:9:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "12369:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12369:23:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12394:3:55",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "12365:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12365:33:55"
                          },
                          "nodeType": "YulIf",
                          "src": "12362:120:55"
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "12492:117:55",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "12507:15:55",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12521:1:55",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "12511:6:55",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "12536:63:55",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "12571:9:55"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "12582:6:55"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "12567:3:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12567:22:55"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "12591:7:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "12546:20:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12546:53:55"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "12536:6:55"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "12619:118:55",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "12634:16:55",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12648:2:55",
                                "type": "",
                                "value": "32"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "12638:6:55",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "12664:63:55",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "12699:9:55"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "12710:6:55"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "12695:3:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12695:22:55"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "12719:7:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "12674:20:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12674:53:55"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nodeType": "YulIdentifier",
                                  "src": "12664:6:55"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "12747:118:55",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "12762:16:55",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12776:2:55",
                                "type": "",
                                "value": "64"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "12766:6:55",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "12792:63:55",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "12827:9:55"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "12838:6:55"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "12823:3:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12823:22:55"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "12847:7:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_address",
                                  "nodeType": "YulIdentifier",
                                  "src": "12802:20:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12802:53:55"
                              },
                              "variableNames": [
                                {
                                  "name": "value2",
                                  "nodeType": "YulIdentifier",
                                  "src": "12792:6:55"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "12875:118:55",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "12890:16:55",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12904:2:55",
                                "type": "",
                                "value": "96"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "12894:6:55",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "12920:63:55",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "12955:9:55"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "12966:6:55"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "12951:3:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "12951:22:55"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "12975:7:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_uint256",
                                  "nodeType": "YulIdentifier",
                                  "src": "12930:20:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12930:53:55"
                              },
                              "variableNames": [
                                {
                                  "name": "value3",
                                  "nodeType": "YulIdentifier",
                                  "src": "12920:6:55"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "13003:298:55",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "13018:47:55",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "13049:9:55"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "13060:3:55",
                                        "type": "",
                                        "value": "128"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "13045:3:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "13045:19:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nodeType": "YulIdentifier",
                                  "src": "13032:12:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13032:33:55"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "13022:6:55",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "13112:83:55",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                                        "nodeType": "YulIdentifier",
                                        "src": "13114:77:55"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "13114:79:55"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "13114:79:55"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "13084:6:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13092:18:55",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "13081:2:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13081:30:55"
                              },
                              "nodeType": "YulIf",
                              "src": "13078:117:55"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "13209:82:55",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "13263:9:55"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "13274:6:55"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "13259:3:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "13259:22:55"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "13283:7:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_bytes_calldata_ptr",
                                  "nodeType": "YulIdentifier",
                                  "src": "13227:31:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13227:64:55"
                              },
                              "variableNames": [
                                {
                                  "name": "value4",
                                  "nodeType": "YulIdentifier",
                                  "src": "13209:6:55"
                                },
                                {
                                  "name": "value5",
                                  "nodeType": "YulIdentifier",
                                  "src": "13217:6:55"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_addresst_addresst_uint256t_bytes_calldata_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "12282:9:55",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "12293:7:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "12305:6:55",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "12313:6:55",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "12321:6:55",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "12329:6:55",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "12337:6:55",
                        "type": ""
                      },
                      {
                        "name": "value5",
                        "nodeType": "YulTypedName",
                        "src": "12345:6:55",
                        "type": ""
                      }
                    ],
                    "src": "12199:1109:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13358:105:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "13368:89:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "13383:5:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13390:66:55",
                                "type": "",
                                "value": "0xff00000000000000000000000000000000000000000000000000000000000000"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "13379:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13379:78:55"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nodeType": "YulIdentifier",
                              "src": "13368:7:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_bytes1",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "13340:5:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nodeType": "YulTypedName",
                        "src": "13350:7:55",
                        "type": ""
                      }
                    ],
                    "src": "13314:149:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13532:52:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "13549:3:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "13571:5:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "cleanup_t_bytes1",
                                  "nodeType": "YulIdentifier",
                                  "src": "13554:16:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13554:23:55"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13542:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13542:36:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13542:36:55"
                        }
                      ]
                    },
                    "name": "abi_encode_t_bytes1_to_t_bytes1_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "13520:5:55",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "13527:3:55",
                        "type": ""
                      }
                    ],
                    "src": "13469:115:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13664:40:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "13675:22:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "13691:5:55"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "13685:5:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13685:12:55"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "13675:6:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_length_t_array$_t_uint256_$dyn_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "13647:5:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "13657:6:55",
                        "type": ""
                      }
                    ],
                    "src": "13590:114:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13821:73:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "13838:3:55"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "13843:6:55"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13831:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13831:19:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13831:19:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13859:29:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "13878:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13883:4:55",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13874:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13874:14:55"
                          },
                          "variableNames": [
                            {
                              "name": "updated_pos",
                              "nodeType": "YulIdentifier",
                              "src": "13859:11:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "13793:3:55",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "13798:6:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "updated_pos",
                        "nodeType": "YulTypedName",
                        "src": "13809:11:55",
                        "type": ""
                      }
                    ],
                    "src": "13710:184:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13972:60:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "13982:11:55",
                          "value": {
                            "name": "ptr",
                            "nodeType": "YulIdentifier",
                            "src": "13990:3:55"
                          },
                          "variableNames": [
                            {
                              "name": "data",
                              "nodeType": "YulIdentifier",
                              "src": "13982:4:55"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14003:22:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "ptr",
                                "nodeType": "YulIdentifier",
                                "src": "14015:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14020:4:55",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14011:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14011:14:55"
                          },
                          "variableNames": [
                            {
                              "name": "data",
                              "nodeType": "YulIdentifier",
                              "src": "14003:4:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_dataslot_t_array$_t_uint256_$dyn_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "ptr",
                        "nodeType": "YulTypedName",
                        "src": "13959:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "13967:4:55",
                        "type": ""
                      }
                    ],
                    "src": "13900:132:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14093:53:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "14110:3:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "14133:5:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "cleanup_t_uint256",
                                  "nodeType": "YulIdentifier",
                                  "src": "14115:17:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14115:24:55"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14103:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14103:37:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14103:37:55"
                        }
                      ]
                    },
                    "name": "abi_encode_t_uint256_to_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "14081:5:55",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "14088:3:55",
                        "type": ""
                      }
                    ],
                    "src": "14038:108:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14232:99:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "14276:6:55"
                              },
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "14284:3:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256",
                              "nodeType": "YulIdentifier",
                              "src": "14242:33:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14242:46:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14242:46:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14297:28:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "14315:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14320:4:55",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14311:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14311:14:55"
                          },
                          "variableNames": [
                            {
                              "name": "updatedPos",
                              "nodeType": "YulIdentifier",
                              "src": "14297:10:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encodeUpdatedPos_t_uint256_to_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "14205:6:55",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "14213:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "updatedPos",
                        "nodeType": "YulTypedName",
                        "src": "14221:10:55",
                        "type": ""
                      }
                    ],
                    "src": "14152:179:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14412:38:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "14422:22:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "ptr",
                                "nodeType": "YulIdentifier",
                                "src": "14434:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14439:4:55",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14430:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14430:14:55"
                          },
                          "variableNames": [
                            {
                              "name": "next",
                              "nodeType": "YulIdentifier",
                              "src": "14422:4:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_nextElement_t_array$_t_uint256_$dyn_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "ptr",
                        "nodeType": "YulTypedName",
                        "src": "14399:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "next",
                        "nodeType": "YulTypedName",
                        "src": "14407:4:55",
                        "type": ""
                      }
                    ],
                    "src": "14337:113:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14610:608:55",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "14620:68:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "14682:5:55"
                              }
                            ],
                            "functionName": {
                              "name": "array_length_t_array$_t_uint256_$dyn_memory_ptr",
                              "nodeType": "YulIdentifier",
                              "src": "14634:47:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14634:54:55"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "14624:6:55",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14697:93:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "14778:3:55"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "14783:6:55"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "14704:73:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14704:86:55"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "14697:3:55"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "14799:71:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "14864:5:55"
                              }
                            ],
                            "functionName": {
                              "name": "array_dataslot_t_array$_t_uint256_$dyn_memory_ptr",
                              "nodeType": "YulIdentifier",
                              "src": "14814:49:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14814:56:55"
                          },
                          "variables": [
                            {
                              "name": "baseRef",
                              "nodeType": "YulTypedName",
                              "src": "14803:7:55",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "14879:21:55",
                          "value": {
                            "name": "baseRef",
                            "nodeType": "YulIdentifier",
                            "src": "14893:7:55"
                          },
                          "variables": [
                            {
                              "name": "srcPtr",
                              "nodeType": "YulTypedName",
                              "src": "14883:6:55",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "14969:224:55",
                            "statements": [
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "14983:34:55",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "srcPtr",
                                      "nodeType": "YulIdentifier",
                                      "src": "15010:6:55"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mload",
                                    "nodeType": "YulIdentifier",
                                    "src": "15004:5:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "15004:13:55"
                                },
                                "variables": [
                                  {
                                    "name": "elementValue0",
                                    "nodeType": "YulTypedName",
                                    "src": "14987:13:55",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "15030:70:55",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "elementValue0",
                                      "nodeType": "YulIdentifier",
                                      "src": "15081:13:55"
                                    },
                                    {
                                      "name": "pos",
                                      "nodeType": "YulIdentifier",
                                      "src": "15096:3:55"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "abi_encodeUpdatedPos_t_uint256_to_t_uint256",
                                    "nodeType": "YulIdentifier",
                                    "src": "15037:43:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "15037:63:55"
                                },
                                "variableNames": [
                                  {
                                    "name": "pos",
                                    "nodeType": "YulIdentifier",
                                    "src": "15030:3:55"
                                  }
                                ]
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "15113:70:55",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "srcPtr",
                                      "nodeType": "YulIdentifier",
                                      "src": "15176:6:55"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "array_nextElement_t_array$_t_uint256_$dyn_memory_ptr",
                                    "nodeType": "YulIdentifier",
                                    "src": "15123:52:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "15123:60:55"
                                },
                                "variableNames": [
                                  {
                                    "name": "srcPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "15113:6:55"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "14931:1:55"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "14934:6:55"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "14928:2:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14928:13:55"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "14942:18:55",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "14944:14:55",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "14953:1:55"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "14956:1:55",
                                      "type": "",
                                      "value": "1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "14949:3:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "14949:9:55"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "14944:1:55"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "14913:14:55",
                            "statements": [
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "14915:10:55",
                                "value": {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "14924:1:55",
                                  "type": "",
                                  "value": "0"
                                },
                                "variables": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulTypedName",
                                    "src": "14919:1:55",
                                    "type": ""
                                  }
                                ]
                              }
                            ]
                          },
                          "src": "14909:284:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15202:10:55",
                          "value": {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "15209:3:55"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "15202:3:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "14589:5:55",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "14596:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "14605:3:55",
                        "type": ""
                      }
                    ],
                    "src": "14486:732:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15578:861:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "15588:27:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15600:9:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15611:3:55",
                                "type": "",
                                "value": "224"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15596:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15596:19:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "15588:4:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "15667:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15680:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15691:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15676:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15676:17:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_bytes1_to_t_bytes1_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "15625:41:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15625:69:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15625:69:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15715:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15726:2:55",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15711:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15711:18:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "15735:4:55"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15741:9:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "15731:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15731:20:55"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15704:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15704:48:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15704:48:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15761:86:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "15833:6:55"
                              },
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "15842:4:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "15769:63:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15769:78:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "15761:4:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15868:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15879:2:55",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15864:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15864:18:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "15888:4:55"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15894:9:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "15884:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15884:20:55"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15857:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15857:48:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15857:48:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15914:86:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "15986:6:55"
                              },
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "15995:4:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "15922:63:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15922:78:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "15914:4:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "16054:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16067:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16078:2:55",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16063:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16063:18:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "16010:43:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16010:72:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16010:72:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value4",
                                "nodeType": "YulIdentifier",
                                "src": "16136:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16149:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16160:3:55",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16145:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16145:19:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_address_to_t_address_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "16092:43:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16092:73:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16092:73:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value5",
                                "nodeType": "YulIdentifier",
                                "src": "16219:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16232:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16243:3:55",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16228:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16228:19:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "16175:43:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16175:73:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16175:73:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16269:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16280:3:55",
                                    "type": "",
                                    "value": "192"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16265:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16265:19:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "16290:4:55"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16296:9:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "16286:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16286:20:55"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16258:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16258:49:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16258:49:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16316:116:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "value6",
                                "nodeType": "YulIdentifier",
                                "src": "16418:6:55"
                              },
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "16427:4:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "16324:93:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16324:108:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "16316:4:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "15502:9:55",
                        "type": ""
                      },
                      {
                        "name": "value6",
                        "nodeType": "YulTypedName",
                        "src": "15514:6:55",
                        "type": ""
                      },
                      {
                        "name": "value5",
                        "nodeType": "YulTypedName",
                        "src": "15522:6:55",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "15530:6:55",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "15538:6:55",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "15546:6:55",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "15554:6:55",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "15562:6:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "15573:4:55",
                        "type": ""
                      }
                    ],
                    "src": "15224:1215:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16571:206:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "16581:26:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16593:9:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16604:2:55",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16589:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16589:18:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "16581:4:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "16661:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16674:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16685:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16670:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16670:17:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "16617:43:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16617:71:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16617:71:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "16742:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16755:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16766:2:55",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16751:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16751:18:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "16698:43:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16698:72:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16698:72:55"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "16535:9:55",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "16547:6:55",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "16555:6:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "16566:4:55",
                        "type": ""
                      }
                    ],
                    "src": "16445:332:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16811:152:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16828:1:55",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16831:77:55",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16821:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16821:88:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16821:88:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16925:1:55",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16928:4:55",
                                "type": "",
                                "value": "0x22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16918:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16918:15:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16918:15:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16949:1:55",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16952:4:55",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "16942:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16942:15:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16942:15:55"
                        }
                      ]
                    },
                    "name": "panic_error_0x22",
                    "nodeType": "YulFunctionDefinition",
                    "src": "16783:180:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17020:269:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "17030:22:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "17044:4:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17050:1:55",
                                "type": "",
                                "value": "2"
                              }
                            ],
                            "functionName": {
                              "name": "div",
                              "nodeType": "YulIdentifier",
                              "src": "17040:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17040:12:55"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "17030:6:55"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "17061:38:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nodeType": "YulIdentifier",
                                "src": "17091:4:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17097:1:55",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "17087:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17087:12:55"
                          },
                          "variables": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nodeType": "YulTypedName",
                              "src": "17065:18:55",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "17138:51:55",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "17152:27:55",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "length",
                                      "nodeType": "YulIdentifier",
                                      "src": "17166:6:55"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "17174:4:55",
                                      "type": "",
                                      "value": "0x7f"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "17162:3:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "17162:17:55"
                                },
                                "variableNames": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "17152:6:55"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "17118:18:55"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "17111:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17111:26:55"
                          },
                          "nodeType": "YulIf",
                          "src": "17108:81:55"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "17241:42:55",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x22",
                                    "nodeType": "YulIdentifier",
                                    "src": "17255:16:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "17255:18:55"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "17255:18:55"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nodeType": "YulIdentifier",
                                "src": "17205:18:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "17228:6:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17236:2:55",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "17225:2:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17225:14:55"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "17202:2:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17202:38:55"
                          },
                          "nodeType": "YulIf",
                          "src": "17199:84:55"
                        }
                      ]
                    },
                    "name": "extract_byte_array_length",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "17004:4:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "17013:6:55",
                        "type": ""
                      }
                    ],
                    "src": "16969:320:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17358:80:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "17368:22:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "17383:6:55"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "17377:5:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17377:13:55"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "17368:5:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "17426:5:55"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_address",
                              "nodeType": "YulIdentifier",
                              "src": "17399:26:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17399:33:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17399:33:55"
                        }
                      ]
                    },
                    "name": "abi_decode_t_address_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "17336:6:55",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "17344:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "17352:5:55",
                        "type": ""
                      }
                    ],
                    "src": "17295:143:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17521:274:55",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "17567:83:55",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nodeType": "YulIdentifier",
                                    "src": "17569:77:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "17569:79:55"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "17569:79:55"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "17542:7:55"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17551:9:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "17538:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17538:23:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17563:2:55",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "17534:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17534:32:55"
                          },
                          "nodeType": "YulIf",
                          "src": "17531:119:55"
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "17660:128:55",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "17675:15:55",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17689:1:55",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "17679:6:55",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "17704:74:55",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "17750:9:55"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "17761:6:55"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "17746:3:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "17746:22:55"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "17770:7:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_address_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "17714:31:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17714:64:55"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "17704:6:55"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "17491:9:55",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "17502:7:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "17514:6:55",
                        "type": ""
                      }
                    ],
                    "src": "17444:351:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18039:537:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "18049:27:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18061:9:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18072:3:55",
                                "type": "",
                                "value": "192"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18057:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18057:19:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "18049:4:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "18130:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18143:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18154:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18139:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18139:17:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "18086:43:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18086:71:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18086:71:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "18211:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18224:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18235:2:55",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18220:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18220:18:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "18167:43:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18167:72:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18167:72:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "18293:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18306:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18317:2:55",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18302:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18302:18:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_address_to_t_address_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "18249:43:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18249:72:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18249:72:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "18375:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18388:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18399:2:55",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18384:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18384:18:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "18331:43:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18331:72:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18331:72:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value4",
                                "nodeType": "YulIdentifier",
                                "src": "18457:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18470:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18481:3:55",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18466:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18466:19:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_address_to_t_address_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "18413:43:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18413:73:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18413:73:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value5",
                                "nodeType": "YulIdentifier",
                                "src": "18540:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18553:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18564:3:55",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18549:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18549:19:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "18496:43:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18496:73:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18496:73:55"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_uint256_t_address_t_uint256_t_address_t_uint256__to_t_uint256_t_uint256_t_address_t_uint256_t_address_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "17971:9:55",
                        "type": ""
                      },
                      {
                        "name": "value5",
                        "nodeType": "YulTypedName",
                        "src": "17983:6:55",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "17991:6:55",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "17999:6:55",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "18007:6:55",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "18015:6:55",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "18023:6:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "18034:4:55",
                        "type": ""
                      }
                    ],
                    "src": "17801:775:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18688:121:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "18710:6:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18718:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18706:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18706:14:55"
                              },
                              {
                                "hexValue": "534254456e756d657261626c653a206f776e657220696e646578206f7574206f",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "18722:34:55",
                                "type": "",
                                "value": "SBTEnumerable: owner index out o"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18699:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18699:58:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18699:58:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "18778:6:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18786:2:55",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18774:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18774:15:55"
                              },
                              {
                                "hexValue": "6620626f756e6473",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "18791:10:55",
                                "type": "",
                                "value": "f bounds"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18767:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18767:35:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18767:35:55"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_4cba4594467bed28c84b2ef8d55aac89acba7e2da5637e413ab41fc240140e6b",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "18680:6:55",
                        "type": ""
                      }
                    ],
                    "src": "18582:227:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18961:220:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "18971:74:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "19037:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19042:2:55",
                                "type": "",
                                "value": "40"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "18978:58:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18978:67:55"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "18971:3:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "19143:3:55"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_4cba4594467bed28c84b2ef8d55aac89acba7e2da5637e413ab41fc240140e6b",
                              "nodeType": "YulIdentifier",
                              "src": "19054:88:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19054:93:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19054:93:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "19156:19:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "19167:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19172:2:55",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19163:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19163:12:55"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "19156:3:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_4cba4594467bed28c84b2ef8d55aac89acba7e2da5637e413ab41fc240140e6b_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "18949:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "18957:3:55",
                        "type": ""
                      }
                    ],
                    "src": "18815:366:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19358:248:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "19368:26:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19380:9:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19391:2:55",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19376:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19376:18:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "19368:4:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19415:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19426:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19411:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19411:17:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "19434:4:55"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19440:9:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "19430:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19430:20:55"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19404:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19404:47:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19404:47:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "19460:139:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "19594:4:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_4cba4594467bed28c84b2ef8d55aac89acba7e2da5637e413ab41fc240140e6b_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "19468:124:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19468:131:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "19460:4:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_4cba4594467bed28c84b2ef8d55aac89acba7e2da5637e413ab41fc240140e6b__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "19338:9:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "19353:4:55",
                        "type": ""
                      }
                    ],
                    "src": "19187:419:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19718:128:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "19740:6:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19748:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19736:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19736:14:55"
                              },
                              {
                                "hexValue": "416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e6365",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "19752:34:55",
                                "type": "",
                                "value": "AccessControl: can only renounce"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19729:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19729:58:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19729:58:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "19808:6:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19816:2:55",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19804:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19804:15:55"
                              },
                              {
                                "hexValue": "20726f6c657320666f722073656c66",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "19821:17:55",
                                "type": "",
                                "value": " roles for self"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19797:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19797:42:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19797:42:55"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "19710:6:55",
                        "type": ""
                      }
                    ],
                    "src": "19612:234:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19998:220:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "20008:74:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "20074:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20079:2:55",
                                "type": "",
                                "value": "47"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "20015:58:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20015:67:55"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "20008:3:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "20180:3:55"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b",
                              "nodeType": "YulIdentifier",
                              "src": "20091:88:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20091:93:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20091:93:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "20193:19:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "20204:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20209:2:55",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20200:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20200:12:55"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "20193:3:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "19986:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "19994:3:55",
                        "type": ""
                      }
                    ],
                    "src": "19852:366:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20395:248:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "20405:26:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20417:9:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20428:2:55",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20413:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20413:18:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "20405:4:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20452:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20463:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20448:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20448:17:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "20471:4:55"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20477:9:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "20467:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20467:20:55"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20441:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20441:47:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20441:47:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "20497:139:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "20631:4:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "20505:124:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20505:131:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "20497:4:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "20375:9:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "20390:4:55",
                        "type": ""
                      }
                    ],
                    "src": "20224:419:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20755:74:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "20777:6:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20785:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20773:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20773:14:55"
                              },
                              {
                                "hexValue": "5342543a2063616c6c6572206973206e6f7420746f6b656e206f776e6572",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "20789:32:55",
                                "type": "",
                                "value": "SBT: caller is not token owner"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20766:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20766:56:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20766:56:55"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_70ad2518d1f7f0f51092b89610563e26421e7b5695bf143c261b724f5156697a",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "20747:6:55",
                        "type": ""
                      }
                    ],
                    "src": "20649:180:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20981:220:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "20991:74:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "21057:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21062:2:55",
                                "type": "",
                                "value": "30"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "20998:58:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20998:67:55"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "20991:3:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "21163:3:55"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_70ad2518d1f7f0f51092b89610563e26421e7b5695bf143c261b724f5156697a",
                              "nodeType": "YulIdentifier",
                              "src": "21074:88:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21074:93:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21074:93:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "21176:19:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "21187:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21192:2:55",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "21183:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21183:12:55"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "21176:3:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_70ad2518d1f7f0f51092b89610563e26421e7b5695bf143c261b724f5156697a_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "20969:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "20977:3:55",
                        "type": ""
                      }
                    ],
                    "src": "20835:366:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21378:248:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "21388:26:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "21400:9:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21411:2:55",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "21396:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21396:18:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "21388:4:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21435:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21446:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21431:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21431:17:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "21454:4:55"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "21460:9:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "21450:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21450:20:55"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21424:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21424:47:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21424:47:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "21480:139:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "21614:4:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_70ad2518d1f7f0f51092b89610563e26421e7b5695bf143c261b724f5156697a_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "21488:124:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21488:131:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "21480:4:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_70ad2518d1f7f0f51092b89610563e26421e7b5695bf143c261b724f5156697a__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "21358:9:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "21373:4:55",
                        "type": ""
                      }
                    ],
                    "src": "21207:419:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21738:122:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "21760:6:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21768:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21756:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21756:14:55"
                              },
                              {
                                "hexValue": "534254456e756d657261626c653a20676c6f62616c20696e646578206f757420",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "21772:34:55",
                                "type": "",
                                "value": "SBTEnumerable: global index out "
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21749:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21749:58:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21749:58:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "21828:6:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21836:2:55",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "21824:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21824:15:55"
                              },
                              {
                                "hexValue": "6f6620626f756e6473",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "21841:11:55",
                                "type": "",
                                "value": "of bounds"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "21817:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21817:36:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "21817:36:55"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_e377e4860fbccf11d3b4fcb4a7f63197010d7ea9cd7cd736dd805d0f46d766f8",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "21730:6:55",
                        "type": ""
                      }
                    ],
                    "src": "21632:228:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "22012:220:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "22022:74:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "22088:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22093:2:55",
                                "type": "",
                                "value": "41"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "22029:58:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22029:67:55"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "22022:3:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "22194:3:55"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_e377e4860fbccf11d3b4fcb4a7f63197010d7ea9cd7cd736dd805d0f46d766f8",
                              "nodeType": "YulIdentifier",
                              "src": "22105:88:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22105:93:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22105:93:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "22207:19:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "22218:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22223:2:55",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "22214:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22214:12:55"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "22207:3:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_e377e4860fbccf11d3b4fcb4a7f63197010d7ea9cd7cd736dd805d0f46d766f8_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "22000:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "22008:3:55",
                        "type": ""
                      }
                    ],
                    "src": "21866:366:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "22409:248:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "22419:26:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "22431:9:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22442:2:55",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "22427:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22427:18:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "22419:4:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22466:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22477:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22462:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22462:17:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "22485:4:55"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "22491:9:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "22481:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22481:20:55"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22455:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22455:47:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22455:47:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "22511:139:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "22645:4:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_e377e4860fbccf11d3b4fcb4a7f63197010d7ea9cd7cd736dd805d0f46d766f8_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "22519:124:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22519:131:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "22511:4:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_e377e4860fbccf11d3b4fcb4a7f63197010d7ea9cd7cd736dd805d0f46d766f8__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "22389:9:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "22404:4:55",
                        "type": ""
                      }
                    ],
                    "src": "22238:419:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "22691:152:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22708:1:55",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22711:77:55",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22701:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22701:88:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22701:88:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22805:1:55",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22808:4:55",
                                "type": "",
                                "value": "0x32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22798:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22798:15:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22798:15:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22829:1:55",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22832:4:55",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "22822:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22822:15:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22822:15:55"
                        }
                      ]
                    },
                    "name": "panic_error_0x32",
                    "nodeType": "YulFunctionDefinition",
                    "src": "22663:180:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "22955:65:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "22977:6:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22985:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "22973:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22973:14:55"
                              },
                              {
                                "hexValue": "5342543a20696e76616c696420746f6b656e204944",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "22989:23:55",
                                "type": "",
                                "value": "SBT: invalid token ID"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22966:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22966:47:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22966:47:55"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_a3c3eedda6c72e2c47160117d4a29d221437504cd467b98f580e08d3d3970883",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "22947:6:55",
                        "type": ""
                      }
                    ],
                    "src": "22849:171:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "23172:220:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "23182:74:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "23248:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23253:2:55",
                                "type": "",
                                "value": "21"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "23189:58:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23189:67:55"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "23182:3:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "23354:3:55"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_a3c3eedda6c72e2c47160117d4a29d221437504cd467b98f580e08d3d3970883",
                              "nodeType": "YulIdentifier",
                              "src": "23265:88:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23265:93:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23265:93:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "23367:19:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "23378:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23383:2:55",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "23374:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23374:12:55"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "23367:3:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_a3c3eedda6c72e2c47160117d4a29d221437504cd467b98f580e08d3d3970883_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "23160:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "23168:3:55",
                        "type": ""
                      }
                    ],
                    "src": "23026:366:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "23569:248:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "23579:26:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "23591:9:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "23602:2:55",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "23587:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23587:18:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "23579:4:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23626:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23637:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23622:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23622:17:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "23645:4:55"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "23651:9:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "23641:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23641:20:55"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23615:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23615:47:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23615:47:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "23671:139:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "23805:4:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_a3c3eedda6c72e2c47160117d4a29d221437504cd467b98f580e08d3d3970883_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "23679:124:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23679:131:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "23671:4:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_a3c3eedda6c72e2c47160117d4a29d221437504cd467b98f580e08d3d3970883__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "23549:9:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "23564:4:55",
                        "type": ""
                      }
                    ],
                    "src": "23398:419:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "23929:119:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "23951:6:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "23959:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "23947:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "23947:14:55"
                              },
                              {
                                "hexValue": "5342543a2061646472657373207a65726f206973206e6f7420612076616c6964",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "23963:34:55",
                                "type": "",
                                "value": "SBT: address zero is not a valid"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "23940:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "23940:58:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "23940:58:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "24019:6:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24027:2:55",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24015:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24015:15:55"
                              },
                              {
                                "hexValue": "206f776e6572",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "24032:8:55",
                                "type": "",
                                "value": " owner"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24008:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24008:33:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24008:33:55"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_608839fd44787057cb3d37d5cc5b64398c23ca3a9c57285ebb020478108fa981",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "23921:6:55",
                        "type": ""
                      }
                    ],
                    "src": "23823:225:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "24200:220:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "24210:74:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "24276:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24281:2:55",
                                "type": "",
                                "value": "38"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "24217:58:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24217:67:55"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "24210:3:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "24382:3:55"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_608839fd44787057cb3d37d5cc5b64398c23ca3a9c57285ebb020478108fa981",
                              "nodeType": "YulIdentifier",
                              "src": "24293:88:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24293:93:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24293:93:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "24395:19:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "24406:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24411:2:55",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "24402:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24402:12:55"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "24395:3:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_608839fd44787057cb3d37d5cc5b64398c23ca3a9c57285ebb020478108fa981_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "24188:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "24196:3:55",
                        "type": ""
                      }
                    ],
                    "src": "24054:366:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "24597:248:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "24607:26:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "24619:9:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "24630:2:55",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "24615:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24615:18:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "24607:4:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24654:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "24665:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "24650:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24650:17:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "24673:4:55"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "24679:9:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "24669:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "24669:20:55"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "24643:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24643:47:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "24643:47:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "24699:139:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "24833:4:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_608839fd44787057cb3d37d5cc5b64398c23ca3a9c57285ebb020478108fa981_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "24707:124:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "24707:131:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "24699:4:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_608839fd44787057cb3d37d5cc5b64398c23ca3a9c57285ebb020478108fa981__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "24577:9:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "24592:4:55",
                        "type": ""
                      }
                    ],
                    "src": "24426:419:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "25089:537:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "25099:27:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "25111:9:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25122:3:55",
                                "type": "",
                                "value": "192"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "25107:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25107:19:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "25099:4:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "25180:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25193:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25204:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25189:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25189:17:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "25136:43:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25136:71:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25136:71:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "25261:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25274:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25285:2:55",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25270:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25270:18:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_address_to_t_address_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "25217:43:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25217:72:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25217:72:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "25343:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25356:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25367:2:55",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25352:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25352:18:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_address_to_t_address_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "25299:43:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25299:72:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25299:72:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "25425:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25438:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25449:2:55",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25434:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25434:18:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "25381:43:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25381:72:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25381:72:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value4",
                                "nodeType": "YulIdentifier",
                                "src": "25507:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25520:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25531:3:55",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25516:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25516:19:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_address_to_t_address_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "25463:43:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25463:73:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25463:73:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value5",
                                "nodeType": "YulIdentifier",
                                "src": "25590:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "25603:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "25614:3:55",
                                    "type": "",
                                    "value": "160"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "25599:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "25599:19:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "25546:43:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25546:73:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25546:73:55"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_address_t_address_t_uint256_t_address_t_uint256__to_t_uint256_t_address_t_address_t_uint256_t_address_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "25021:9:55",
                        "type": ""
                      },
                      {
                        "name": "value5",
                        "nodeType": "YulTypedName",
                        "src": "25033:6:55",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "25041:6:55",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "25049:6:55",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "25057:6:55",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "25065:6:55",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "25073:6:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "25084:4:55",
                        "type": ""
                      }
                    ],
                    "src": "24851:775:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "25660:152:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25677:1:55",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25680:77:55",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25670:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25670:88:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25670:88:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25774:1:55",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25777:4:55",
                                "type": "",
                                "value": "0x41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25767:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25767:15:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25767:15:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25798:1:55",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25801:4:55",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "25791:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25791:15:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25791:15:55"
                        }
                      ]
                    },
                    "name": "panic_error_0x41",
                    "nodeType": "YulFunctionDefinition",
                    "src": "25632:180:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "25846:152:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25863:1:55",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25866:77:55",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25856:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25856:88:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25856:88:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25960:1:55",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25963:4:55",
                                "type": "",
                                "value": "0x11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "25953:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25953:15:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25953:15:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25984:1:55",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "25987:4:55",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "25977:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "25977:15:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "25977:15:55"
                        }
                      ]
                    },
                    "name": "panic_error_0x11",
                    "nodeType": "YulFunctionDefinition",
                    "src": "25818:180:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "26049:146:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "26059:25:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "26082:1:55"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint256",
                              "nodeType": "YulIdentifier",
                              "src": "26064:17:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26064:20:55"
                          },
                          "variableNames": [
                            {
                              "name": "x",
                              "nodeType": "YulIdentifier",
                              "src": "26059:1:55"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "26093:25:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "26116:1:55"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint256",
                              "nodeType": "YulIdentifier",
                              "src": "26098:17:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26098:20:55"
                          },
                          "variableNames": [
                            {
                              "name": "y",
                              "nodeType": "YulIdentifier",
                              "src": "26093:1:55"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "26140:22:55",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "26142:16:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "26142:18:55"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "26142:18:55"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "26134:1:55"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "26137:1:55"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "26131:2:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26131:8:55"
                          },
                          "nodeType": "YulIf",
                          "src": "26128:34:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "26172:17:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "26184:1:55"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "26187:1:55"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "26180:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26180:9:55"
                          },
                          "variableNames": [
                            {
                              "name": "diff",
                              "nodeType": "YulIdentifier",
                              "src": "26172:4:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_sub_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "26035:1:55",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "26038:1:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "diff",
                        "nodeType": "YulTypedName",
                        "src": "26044:4:55",
                        "type": ""
                      }
                    ],
                    "src": "26004:191:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "26229:152:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26246:1:55",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26249:77:55",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26239:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26239:88:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26239:88:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26343:1:55",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26346:4:55",
                                "type": "",
                                "value": "0x31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "26336:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26336:15:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26336:15:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26367:1:55",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26370:4:55",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "26360:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26360:15:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26360:15:55"
                        }
                      ]
                    },
                    "name": "panic_error_0x31",
                    "nodeType": "YulFunctionDefinition",
                    "src": "26201:180:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "26430:190:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "26440:33:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "26467:5:55"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint256",
                              "nodeType": "YulIdentifier",
                              "src": "26449:17:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26449:24:55"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "26440:5:55"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "26563:22:55",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "26565:16:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "26565:18:55"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "26565:18:55"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "26488:5:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26495:66:55",
                                "type": "",
                                "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "26485:2:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26485:77:55"
                          },
                          "nodeType": "YulIf",
                          "src": "26482:103:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "26594:20:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "26605:5:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26612:1:55",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "26601:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26601:13:55"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nodeType": "YulIdentifier",
                              "src": "26594:3:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "increment_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "26416:5:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nodeType": "YulTypedName",
                        "src": "26426:3:55",
                        "type": ""
                      }
                    ],
                    "src": "26387:233:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "26689:80:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "26699:22:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "26714:6:55"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "26708:5:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26708:13:55"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "26699:5:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "26757:5:55"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_uint256",
                              "nodeType": "YulIdentifier",
                              "src": "26730:26:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26730:33:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "26730:33:55"
                        }
                      ]
                    },
                    "name": "abi_decode_t_uint256_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "26667:6:55",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "26675:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "26683:5:55",
                        "type": ""
                      }
                    ],
                    "src": "26626:143:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "26852:274:55",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "26898:83:55",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nodeType": "YulIdentifier",
                                    "src": "26900:77:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "26900:79:55"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "26900:79:55"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "26873:7:55"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "26882:9:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "26869:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "26869:23:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "26894:2:55",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "26865:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "26865:32:55"
                          },
                          "nodeType": "YulIf",
                          "src": "26862:119:55"
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "26991:128:55",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "27006:15:55",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "27020:1:55",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "27010:6:55",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "27035:74:55",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "27081:9:55"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "27092:6:55"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "27077:3:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "27077:22:55"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "27101:7:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_uint256_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "27045:31:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27045:64:55"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "27035:6:55"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "26822:9:55",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "26833:7:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "26845:6:55",
                        "type": ""
                      }
                    ],
                    "src": "26775:351:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "27246:34:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "27256:18:55",
                          "value": {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "27271:3:55"
                          },
                          "variableNames": [
                            {
                              "name": "updated_pos",
                              "nodeType": "YulIdentifier",
                              "src": "27256:11:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "27218:3:55",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "27223:6:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "updated_pos",
                        "nodeType": "YulTypedName",
                        "src": "27234:11:55",
                        "type": ""
                      }
                    ],
                    "src": "27132:148:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "27396:267:55",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "27406:53:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "27453:5:55"
                              }
                            ],
                            "functionName": {
                              "name": "array_length_t_string_memory_ptr",
                              "nodeType": "YulIdentifier",
                              "src": "27420:32:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27420:39:55"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "27410:6:55",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "27468:96:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "27552:3:55"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "27557:6:55"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "27475:76:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27475:89:55"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "27468:3:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "27599:5:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "27606:4:55",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "27595:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27595:16:55"
                              },
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "27613:3:55"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "27618:6:55"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "27573:21:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27573:52:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "27573:52:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "27634:23:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "27645:3:55"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "27650:6:55"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "27641:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27641:16:55"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "27634:3:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "27377:5:55",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "27384:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "27392:3:55",
                        "type": ""
                      }
                    ],
                    "src": "27286:377:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "27775:49:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "27797:6:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "27805:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "27793:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "27793:14:55"
                              },
                              {
                                "hexValue": "2e6a736f6e",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "27809:7:55",
                                "type": "",
                                "value": ".json"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "27786:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "27786:31:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "27786:31:55"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_94311adc0a0cd4e10be11b23bd4316b8cffa4adf693e8f96f5c075aa439a7972",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "27767:6:55",
                        "type": ""
                      }
                    ],
                    "src": "27669:155:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "27994:236:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "28004:91:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "28088:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28093:1:55",
                                "type": "",
                                "value": "5"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "28011:76:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28011:84:55"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "28004:3:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "28193:3:55"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_94311adc0a0cd4e10be11b23bd4316b8cffa4adf693e8f96f5c075aa439a7972",
                              "nodeType": "YulIdentifier",
                              "src": "28104:88:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28104:93:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "28104:93:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "28206:18:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "28217:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "28222:1:55",
                                "type": "",
                                "value": "5"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "28213:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28213:11:55"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "28206:3:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_94311adc0a0cd4e10be11b23bd4316b8cffa4adf693e8f96f5c075aa439a7972_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "27982:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "27990:3:55",
                        "type": ""
                      }
                    ],
                    "src": "27830:400:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "28521:416:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "28532:102:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "28621:6:55"
                              },
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "28630:3:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "28539:81:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28539:95:55"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "28532:3:55"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "28644:102:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "28733:6:55"
                              },
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "28742:3:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "28651:81:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28651:95:55"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "28644:3:55"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "28756:155:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "28907:3:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_94311adc0a0cd4e10be11b23bd4316b8cffa4adf693e8f96f5c075aa439a7972_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "28763:142:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "28763:148:55"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "28756:3:55"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "28921:10:55",
                          "value": {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "28928:3:55"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "28921:3:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr_t_stringliteral_94311adc0a0cd4e10be11b23bd4316b8cffa4adf693e8f96f5c075aa439a7972__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "28492:3:55",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "28498:6:55",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "28506:6:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "28517:3:55",
                        "type": ""
                      }
                    ],
                    "src": "28236:701:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "29049:75:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "29071:6:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29079:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "29067:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29067:14:55"
                              },
                              {
                                "hexValue": "5265656e7472616e637947756172643a207265656e7472616e742063616c6c",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "29083:33:55",
                                "type": "",
                                "value": "ReentrancyGuard: reentrant call"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29060:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29060:57:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29060:57:55"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "29041:6:55",
                        "type": ""
                      }
                    ],
                    "src": "28943:181:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "29276:220:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "29286:74:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "29352:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29357:2:55",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "29293:58:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29293:67:55"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "29286:3:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "29458:3:55"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619",
                              "nodeType": "YulIdentifier",
                              "src": "29369:88:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29369:93:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29369:93:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "29471:19:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "29482:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29487:2:55",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "29478:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29478:12:55"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "29471:3:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "29264:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "29272:3:55",
                        "type": ""
                      }
                    ],
                    "src": "29130:366:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "29673:248:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "29683:26:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "29695:9:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "29706:2:55",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "29691:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29691:18:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "29683:4:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "29730:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "29741:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "29726:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29726:17:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "29749:4:55"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "29755:9:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "29745:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "29745:20:55"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "29719:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29719:47:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "29719:47:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "29775:139:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "29909:4:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "29783:124:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "29783:131:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "29775:4:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "29653:9:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "29668:4:55",
                        "type": ""
                      }
                    ],
                    "src": "29502:419:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "30109:371:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "30119:27:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "30131:9:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "30142:3:55",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "30127:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30127:19:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "30119:4:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "30200:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "30213:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "30224:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "30209:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "30209:17:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "30156:43:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30156:71:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "30156:71:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "30281:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "30294:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "30305:2:55",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "30290:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "30290:18:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "30237:43:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30237:72:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "30237:72:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "30363:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "30376:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "30387:2:55",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "30372:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "30372:18:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_address_to_t_address_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "30319:43:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30319:72:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "30319:72:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "30445:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "30458:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "30469:2:55",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "30454:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "30454:18:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "30401:43:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30401:72:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "30401:72:55"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes32_t_uint256_t_address_t_uint256__to_t_bytes32_t_uint256_t_address_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "30057:9:55",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "30069:6:55",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "30077:6:55",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "30085:6:55",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "30093:6:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "30104:4:55",
                        "type": ""
                      }
                    ],
                    "src": "29927:553:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "30668:371:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "30678:27:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "30690:9:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "30701:3:55",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "30686:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30686:19:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "30678:4:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "30759:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "30772:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "30783:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "30768:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "30768:17:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "30715:43:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30715:71:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "30715:71:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "30840:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "30853:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "30864:2:55",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "30849:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "30849:18:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_address_to_t_address_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "30796:43:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30796:72:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "30796:72:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "30922:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "30935:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "30946:2:55",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "30931:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "30931:18:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_address_to_t_address_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "30878:43:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30878:72:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "30878:72:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "31004:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "31017:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "31028:2:55",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "31013:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "31013:18:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "30960:43:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "30960:72:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "30960:72:55"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256__to_t_bytes32_t_address_t_address_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "30616:9:55",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "30628:6:55",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "30636:6:55",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "30644:6:55",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "30652:6:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "30663:4:55",
                        "type": ""
                      }
                    ],
                    "src": "30486:553:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "31073:152:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "31090:1:55",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "31093:77:55",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "31083:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31083:88:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "31083:88:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "31187:1:55",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "31190:4:55",
                                "type": "",
                                "value": "0x12"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "31180:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31180:15:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "31180:15:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "31211:1:55",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "31214:4:55",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "31204:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31204:15:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "31204:15:55"
                        }
                      ]
                    },
                    "name": "panic_error_0x12",
                    "nodeType": "YulFunctionDefinition",
                    "src": "31045:180:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "31289:40:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "31300:22:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "31316:5:55"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "31310:5:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31310:12:55"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "31300:6:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_length_t_bytes_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "31272:5:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "31282:6:55",
                        "type": ""
                      }
                    ],
                    "src": "31231:98:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "31391:60:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "31401:11:55",
                          "value": {
                            "name": "ptr",
                            "nodeType": "YulIdentifier",
                            "src": "31409:3:55"
                          },
                          "variableNames": [
                            {
                              "name": "data",
                              "nodeType": "YulIdentifier",
                              "src": "31401:4:55"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "31422:22:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "ptr",
                                "nodeType": "YulIdentifier",
                                "src": "31434:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "31439:4:55",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "31430:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31430:14:55"
                          },
                          "variableNames": [
                            {
                              "name": "data",
                              "nodeType": "YulIdentifier",
                              "src": "31422:4:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_dataslot_t_bytes_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "ptr",
                        "nodeType": "YulTypedName",
                        "src": "31378:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "data",
                        "nodeType": "YulTypedName",
                        "src": "31386:4:55",
                        "type": ""
                      }
                    ],
                    "src": "31335:116:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "31512:99:55",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "31523:42:55",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "ptr",
                                    "nodeType": "YulIdentifier",
                                    "src": "31560:3:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "31554:5:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "31554:10:55"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_bytes32",
                              "nodeType": "YulIdentifier",
                              "src": "31536:17:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31536:29:55"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "31527:5:55",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "31575:29:55",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "31599:5:55"
                          },
                          "variableNames": [
                            {
                              "name": "returnValue",
                              "nodeType": "YulIdentifier",
                              "src": "31575:11:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "read_from_memoryt_bytes32",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "ptr",
                        "nodeType": "YulTypedName",
                        "src": "31492:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "returnValue",
                        "nodeType": "YulTypedName",
                        "src": "31500:11:55",
                        "type": ""
                      }
                    ],
                    "src": "31457:154:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "31670:54:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "31680:37:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "bits",
                                "nodeType": "YulIdentifier",
                                "src": "31705:4:55"
                              },
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "31711:5:55"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nodeType": "YulIdentifier",
                              "src": "31701:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31701:16:55"
                          },
                          "variableNames": [
                            {
                              "name": "newValue",
                              "nodeType": "YulIdentifier",
                              "src": "31680:8:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "shift_left_dynamic",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "bits",
                        "nodeType": "YulTypedName",
                        "src": "31645:4:55",
                        "type": ""
                      },
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "31651:5:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "newValue",
                        "nodeType": "YulTypedName",
                        "src": "31661:8:55",
                        "type": ""
                      }
                    ],
                    "src": "31617:107:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "31820:504:55",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "31831:52:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "array",
                                "nodeType": "YulIdentifier",
                                "src": "31877:5:55"
                              }
                            ],
                            "functionName": {
                              "name": "array_length_t_bytes_memory_ptr",
                              "nodeType": "YulIdentifier",
                              "src": "31845:31:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31845:38:55"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "31835:6:55",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "31892:21:55",
                          "value": {
                            "name": "array",
                            "nodeType": "YulIdentifier",
                            "src": "31908:5:55"
                          },
                          "variables": [
                            {
                              "name": "dataArea",
                              "nodeType": "YulTypedName",
                              "src": "31896:8:55",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "31923:52:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "array",
                                "nodeType": "YulIdentifier",
                                "src": "31969:5:55"
                              }
                            ],
                            "functionName": {
                              "name": "array_dataslot_t_bytes_memory_ptr",
                              "nodeType": "YulIdentifier",
                              "src": "31935:33:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31935:40:55"
                          },
                          "variableNames": [
                            {
                              "name": "dataArea",
                              "nodeType": "YulIdentifier",
                              "src": "31923:8:55"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "31985:44:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "dataArea",
                                "nodeType": "YulIdentifier",
                                "src": "32020:8:55"
                              }
                            ],
                            "functionName": {
                              "name": "read_from_memoryt_bytes32",
                              "nodeType": "YulIdentifier",
                              "src": "31994:25:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "31994:35:55"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "31985:5:55"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "32057:260:55",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "32071:236:55",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "value",
                                      "nodeType": "YulIdentifier",
                                      "src": "32101:5:55"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nodeType": "YulLiteral",
                                              "src": "32168:1:55",
                                              "type": "",
                                              "value": "8"
                                            },
                                            {
                                              "arguments": [
                                                {
                                                  "kind": "number",
                                                  "nodeType": "YulLiteral",
                                                  "src": "32175:2:55",
                                                  "type": "",
                                                  "value": "32"
                                                },
                                                {
                                                  "name": "length",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "32179:6:55"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "sub",
                                                "nodeType": "YulIdentifier",
                                                "src": "32171:3:55"
                                              },
                                              "nodeType": "YulFunctionCall",
                                              "src": "32171:15:55"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "mul",
                                            "nodeType": "YulIdentifier",
                                            "src": "32164:3:55"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "32164:23:55"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "32209:66:55",
                                          "type": "",
                                          "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shift_left_dynamic",
                                        "nodeType": "YulIdentifier",
                                        "src": "32124:18:55"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "32124:169:55"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nodeType": "YulIdentifier",
                                    "src": "32080:3:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "32080:227:55"
                                },
                                "variableNames": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "32071:5:55"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "32045:6:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "32053:2:55",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "32042:2:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32042:14:55"
                          },
                          "nodeType": "YulIf",
                          "src": "32039:278:55"
                        }
                      ]
                    },
                    "name": "convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "31804:5:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "31814:5:55",
                        "type": ""
                      }
                    ],
                    "src": "31730:594:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "32436:67:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "32458:6:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "32466:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "32454:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "32454:14:55"
                              },
                              {
                                "hexValue": "416363657373436f6e74726f6c3a206163636f756e7420",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "32470:25:55",
                                "type": "",
                                "value": "AccessControl: account "
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "32447:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32447:49:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "32447:49:55"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "32428:6:55",
                        "type": ""
                      }
                    ],
                    "src": "32330:173:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "32673:238:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "32683:92:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "32767:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "32772:2:55",
                                "type": "",
                                "value": "23"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "32690:76:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32690:85:55"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "32683:3:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "32873:3:55"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874",
                              "nodeType": "YulIdentifier",
                              "src": "32784:88:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32784:93:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "32784:93:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "32886:19:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "32897:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "32902:2:55",
                                "type": "",
                                "value": "23"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "32893:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "32893:12:55"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "32886:3:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "32661:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "32669:3:55",
                        "type": ""
                      }
                    ],
                    "src": "32509:402:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "33023:61:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "33045:6:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "33053:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "33041:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "33041:14:55"
                              },
                              {
                                "hexValue": "206973206d697373696e6720726f6c6520",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "33057:19:55",
                                "type": "",
                                "value": " is missing role "
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "33034:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33034:43:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "33034:43:55"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "33015:6:55",
                        "type": ""
                      }
                    ],
                    "src": "32917:167:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "33254:238:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "33264:92:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "33348:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "33353:2:55",
                                "type": "",
                                "value": "17"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "33271:76:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33271:85:55"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "33264:3:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "33454:3:55"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69",
                              "nodeType": "YulIdentifier",
                              "src": "33365:88:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33365:93:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "33365:93:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "33467:19:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "33478:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "33483:2:55",
                                "type": "",
                                "value": "17"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "33474:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33474:12:55"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "33467:3:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "33242:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "33250:3:55",
                        "type": ""
                      }
                    ],
                    "src": "33090:402:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "33884:581:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "33895:155:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "34046:3:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "33902:142:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "33902:148:55"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "33895:3:55"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "34060:102:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "34149:6:55"
                              },
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "34158:3:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "34067:81:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34067:95:55"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "34060:3:55"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "34172:155:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "34323:3:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "34179:142:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34179:148:55"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "34172:3:55"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "34337:102:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "34426:6:55"
                              },
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "34435:3:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "34344:81:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34344:95:55"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "34337:3:55"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "34449:10:55",
                          "value": {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "34456:3:55"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "34449:3:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "33855:3:55",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "33861:6:55",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "33869:6:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "33880:3:55",
                        "type": ""
                      }
                    ],
                    "src": "33498:967:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "34584:34:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "34594:18:55",
                          "value": {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "34609:3:55"
                          },
                          "variableNames": [
                            {
                              "name": "updated_pos",
                              "nodeType": "YulIdentifier",
                              "src": "34594:11:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "34556:3:55",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "34561:6:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "updated_pos",
                        "nodeType": "YulTypedName",
                        "src": "34572:11:55",
                        "type": ""
                      }
                    ],
                    "src": "34471:147:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "34730:8:55",
                      "statements": []
                    },
                    "name": "store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "34722:6:55",
                        "type": ""
                      }
                    ],
                    "src": "34624:114:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "34907:235:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "34917:90:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "35000:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "35005:1:55",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "34924:75:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "34924:83:55"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "34917:3:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "35105:3:55"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                              "nodeType": "YulIdentifier",
                              "src": "35016:88:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "35016:93:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "35016:93:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "35118:18:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "35129:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "35134:1:55",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "35125:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "35125:11:55"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "35118:3:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "34895:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "34903:3:55",
                        "type": ""
                      }
                    ],
                    "src": "34744:398:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "35336:191:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "35347:154:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "35497:3:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "35354:141:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "35354:147:55"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "35347:3:55"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "35511:10:55",
                          "value": {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "35518:3:55"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "35511:3:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "35323:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "35332:3:55",
                        "type": ""
                      }
                    ],
                    "src": "35148:379:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "35639:73:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "35661:6:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "35669:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "35657:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "35657:14:55"
                              },
                              {
                                "hexValue": "5342543a206d696e7420746f20746865207a65726f2061646472657373",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "35673:31:55",
                                "type": "",
                                "value": "SBT: mint to the zero address"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "35650:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "35650:55:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "35650:55:55"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_1e3f643e26125191cb4d250aea16dfef593e7657e78ad664a187bfc056770dd1",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "35631:6:55",
                        "type": ""
                      }
                    ],
                    "src": "35533:179:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "35864:220:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "35874:74:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "35940:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "35945:2:55",
                                "type": "",
                                "value": "29"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "35881:58:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "35881:67:55"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "35874:3:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "36046:3:55"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_1e3f643e26125191cb4d250aea16dfef593e7657e78ad664a187bfc056770dd1",
                              "nodeType": "YulIdentifier",
                              "src": "35957:88:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "35957:93:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "35957:93:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "36059:19:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "36070:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "36075:2:55",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "36066:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36066:12:55"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "36059:3:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_1e3f643e26125191cb4d250aea16dfef593e7657e78ad664a187bfc056770dd1_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "35852:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "35860:3:55",
                        "type": ""
                      }
                    ],
                    "src": "35718:366:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "36261:248:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "36271:26:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "36283:9:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "36294:2:55",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "36279:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36279:18:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "36271:4:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "36318:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "36329:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "36314:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "36314:17:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "36337:4:55"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "36343:9:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "36333:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "36333:20:55"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "36307:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36307:47:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "36307:47:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "36363:139:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "36497:4:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_1e3f643e26125191cb4d250aea16dfef593e7657e78ad664a187bfc056770dd1_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "36371:124:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36371:131:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "36363:4:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_1e3f643e26125191cb4d250aea16dfef593e7657e78ad664a187bfc056770dd1__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "36241:9:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "36256:4:55",
                        "type": ""
                      }
                    ],
                    "src": "36090:419:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "36621:69:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "36643:6:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "36651:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "36639:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "36639:14:55"
                              },
                              {
                                "hexValue": "5342543a20746f6b656e20616c7265616479206d696e746564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "36655:27:55",
                                "type": "",
                                "value": "SBT: token already minted"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "36632:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36632:51:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "36632:51:55"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_9ef05e702ba0a2951785c140491ca358d7357043a4cde53aea0ddcb0ee904823",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "36613:6:55",
                        "type": ""
                      }
                    ],
                    "src": "36515:175:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "36842:220:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "36852:74:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "36918:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "36923:2:55",
                                "type": "",
                                "value": "25"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "36859:58:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36859:67:55"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "36852:3:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "37024:3:55"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_9ef05e702ba0a2951785c140491ca358d7357043a4cde53aea0ddcb0ee904823",
                              "nodeType": "YulIdentifier",
                              "src": "36935:88:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "36935:93:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "36935:93:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "37037:19:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "37048:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "37053:2:55",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "37044:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37044:12:55"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "37037:3:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_9ef05e702ba0a2951785c140491ca358d7357043a4cde53aea0ddcb0ee904823_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "36830:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "36838:3:55",
                        "type": ""
                      }
                    ],
                    "src": "36696:366:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "37239:248:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "37249:26:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "37261:9:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "37272:2:55",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "37257:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37257:18:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "37249:4:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "37296:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "37307:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "37292:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "37292:17:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "37315:4:55"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "37321:9:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "37311:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "37311:20:55"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "37285:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37285:47:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "37285:47:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "37341:139:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "37475:4:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_9ef05e702ba0a2951785c140491ca358d7357043a4cde53aea0ddcb0ee904823_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "37349:124:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37349:131:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "37341:4:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_9ef05e702ba0a2951785c140491ca358d7357043a4cde53aea0ddcb0ee904823__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "37219:9:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "37234:4:55",
                        "type": ""
                      }
                    ],
                    "src": "37068:419:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "37537:261:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "37547:25:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "37570:1:55"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint256",
                              "nodeType": "YulIdentifier",
                              "src": "37552:17:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37552:20:55"
                          },
                          "variableNames": [
                            {
                              "name": "x",
                              "nodeType": "YulIdentifier",
                              "src": "37547:1:55"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "37581:25:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "37604:1:55"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint256",
                              "nodeType": "YulIdentifier",
                              "src": "37586:17:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37586:20:55"
                          },
                          "variableNames": [
                            {
                              "name": "y",
                              "nodeType": "YulIdentifier",
                              "src": "37581:1:55"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "37744:22:55",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "37746:16:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "37746:18:55"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "37746:18:55"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "37665:1:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "37672:66:55",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                                  },
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "37740:1:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "37668:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "37668:74:55"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "37662:2:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37662:81:55"
                          },
                          "nodeType": "YulIf",
                          "src": "37659:107:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "37776:16:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "37787:1:55"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "37790:1:55"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "37783:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37783:9:55"
                          },
                          "variableNames": [
                            {
                              "name": "sum",
                              "nodeType": "YulIdentifier",
                              "src": "37776:3:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_add_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "37524:1:55",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "37527:1:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "sum",
                        "nodeType": "YulTypedName",
                        "src": "37533:3:55",
                        "type": ""
                      }
                    ],
                    "src": "37493:305:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "37852:300:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "37862:25:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "37885:1:55"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint256",
                              "nodeType": "YulIdentifier",
                              "src": "37867:17:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37867:20:55"
                          },
                          "variableNames": [
                            {
                              "name": "x",
                              "nodeType": "YulIdentifier",
                              "src": "37862:1:55"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "37896:25:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "37919:1:55"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint256",
                              "nodeType": "YulIdentifier",
                              "src": "37901:17:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37901:20:55"
                          },
                          "variableNames": [
                            {
                              "name": "y",
                              "nodeType": "YulIdentifier",
                              "src": "37896:1:55"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "38094:22:55",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "38096:16:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "38096:18:55"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "38096:18:55"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "x",
                                        "nodeType": "YulIdentifier",
                                        "src": "38006:1:55"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "37999:6:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "37999:9:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "37992:6:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "37992:17:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "38014:1:55"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "38021:66:55",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                                      },
                                      {
                                        "name": "x",
                                        "nodeType": "YulIdentifier",
                                        "src": "38089:1:55"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "div",
                                      "nodeType": "YulIdentifier",
                                      "src": "38017:3:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "38017:74:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "38011:2:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "38011:81:55"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "37988:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "37988:105:55"
                          },
                          "nodeType": "YulIf",
                          "src": "37985:131:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "38126:20:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "38141:1:55"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "38144:1:55"
                              }
                            ],
                            "functionName": {
                              "name": "mul",
                              "nodeType": "YulIdentifier",
                              "src": "38137:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "38137:9:55"
                          },
                          "variableNames": [
                            {
                              "name": "product",
                              "nodeType": "YulIdentifier",
                              "src": "38126:7:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_mul_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "37835:1:55",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "37838:1:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "product",
                        "nodeType": "YulTypedName",
                        "src": "37844:7:55",
                        "type": ""
                      }
                    ],
                    "src": "37804:348:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "38200:143:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "38210:25:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "38233:1:55"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint256",
                              "nodeType": "YulIdentifier",
                              "src": "38215:17:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "38215:20:55"
                          },
                          "variableNames": [
                            {
                              "name": "x",
                              "nodeType": "YulIdentifier",
                              "src": "38210:1:55"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "38244:25:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "38267:1:55"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint256",
                              "nodeType": "YulIdentifier",
                              "src": "38249:17:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "38249:20:55"
                          },
                          "variableNames": [
                            {
                              "name": "y",
                              "nodeType": "YulIdentifier",
                              "src": "38244:1:55"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "38291:22:55",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x12",
                                    "nodeType": "YulIdentifier",
                                    "src": "38293:16:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "38293:18:55"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "38293:18:55"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "38288:1:55"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "38281:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "38281:9:55"
                          },
                          "nodeType": "YulIf",
                          "src": "38278:35:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "38323:14:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "38332:1:55"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "38335:1:55"
                              }
                            ],
                            "functionName": {
                              "name": "div",
                              "nodeType": "YulIdentifier",
                              "src": "38328:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "38328:9:55"
                          },
                          "variableNames": [
                            {
                              "name": "r",
                              "nodeType": "YulIdentifier",
                              "src": "38323:1:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_div_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "38189:1:55",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "38192:1:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "r",
                        "nodeType": "YulTypedName",
                        "src": "38198:1:55",
                        "type": ""
                      }
                    ],
                    "src": "38158:185:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "38525:307:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "38535:26:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "38547:9:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "38558:2:55",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "38543:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "38543:18:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "38535:4:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "38615:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "38628:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "38639:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "38624:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "38624:17:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "38571:43:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "38571:71:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "38571:71:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "38663:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "38674:2:55",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "38659:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "38659:18:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "38683:4:55"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "38689:9:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "38679:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "38679:20:55"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "38652:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "38652:48:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "38652:48:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "38709:116:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "38811:6:55"
                              },
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "38820:4:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_array$_t_address_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "38717:93:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "38717:108:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "38709:4:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_array$_t_address_$dyn_memory_ptr__to_t_uint256_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "38489:9:55",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "38501:6:55",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "38509:6:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "38520:4:55",
                        "type": ""
                      }
                    ],
                    "src": "38349:483:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "38881:238:55",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "38891:58:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "38913:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "size",
                                    "nodeType": "YulIdentifier",
                                    "src": "38943:4:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "round_up_to_mul_of_32",
                                  "nodeType": "YulIdentifier",
                                  "src": "38921:21:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "38921:27:55"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "38909:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "38909:40:55"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "38895:10:55",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "39060:22:55",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "39062:16:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "39062:18:55"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "39062:18:55"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "39003:10:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "39015:18:55",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "39000:2:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "39000:34:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "39039:10:55"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "39051:6:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "39036:2:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "39036:22:55"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "38997:2:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "38997:62:55"
                          },
                          "nodeType": "YulIf",
                          "src": "38994:88:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "39098:2:55",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "39102:10:55"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "39091:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "39091:22:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "39091:22:55"
                        }
                      ]
                    },
                    "name": "finalize_allocation",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "38867:6:55",
                        "type": ""
                      },
                      {
                        "name": "size",
                        "nodeType": "YulTypedName",
                        "src": "38875:4:55",
                        "type": ""
                      }
                    ],
                    "src": "38838:281:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "39166:88:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "39176:30:55",
                          "value": {
                            "arguments": [],
                            "functionName": {
                              "name": "allocate_unbounded",
                              "nodeType": "YulIdentifier",
                              "src": "39186:18:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "39186:20:55"
                          },
                          "variableNames": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulIdentifier",
                              "src": "39176:6:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "39235:6:55"
                              },
                              {
                                "name": "size",
                                "nodeType": "YulIdentifier",
                                "src": "39243:4:55"
                              }
                            ],
                            "functionName": {
                              "name": "finalize_allocation",
                              "nodeType": "YulIdentifier",
                              "src": "39215:19:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "39215:33:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "39215:33:55"
                        }
                      ]
                    },
                    "name": "allocate_memory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "size",
                        "nodeType": "YulTypedName",
                        "src": "39150:4:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "39159:6:55",
                        "type": ""
                      }
                    ],
                    "src": "39125:129:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "39342:229:55",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "39447:22:55",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "39449:16:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "39449:18:55"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "39449:18:55"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "39419:6:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "39427:18:55",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "39416:2:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "39416:30:55"
                          },
                          "nodeType": "YulIf",
                          "src": "39413:56:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "39479:25:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "39491:6:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "39499:4:55",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "mul",
                              "nodeType": "YulIdentifier",
                              "src": "39487:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "39487:17:55"
                          },
                          "variableNames": [
                            {
                              "name": "size",
                              "nodeType": "YulIdentifier",
                              "src": "39479:4:55"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "39541:23:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "size",
                                "nodeType": "YulIdentifier",
                                "src": "39553:4:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "39559:4:55",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "39549:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "39549:15:55"
                          },
                          "variableNames": [
                            {
                              "name": "size",
                              "nodeType": "YulIdentifier",
                              "src": "39541:4:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "39326:6:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "size",
                        "nodeType": "YulTypedName",
                        "src": "39337:4:55",
                        "type": ""
                      }
                    ],
                    "src": "39260:311:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "39707:619:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "39717:90:55",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "39799:6:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr",
                                  "nodeType": "YulIdentifier",
                                  "src": "39742:56:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "39742:64:55"
                              }
                            ],
                            "functionName": {
                              "name": "allocate_memory",
                              "nodeType": "YulIdentifier",
                              "src": "39726:15:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "39726:81:55"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "39717:5:55"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "39816:16:55",
                          "value": {
                            "name": "array",
                            "nodeType": "YulIdentifier",
                            "src": "39827:5:55"
                          },
                          "variables": [
                            {
                              "name": "dst",
                              "nodeType": "YulTypedName",
                              "src": "39820:3:55",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "array",
                                "nodeType": "YulIdentifier",
                                "src": "39849:5:55"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "39856:6:55"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "39842:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "39842:21:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "39842:21:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "39872:23:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "array",
                                "nodeType": "YulIdentifier",
                                "src": "39883:5:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "39890:4:55",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "39879:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "39879:16:55"
                          },
                          "variableNames": [
                            {
                              "name": "dst",
                              "nodeType": "YulIdentifier",
                              "src": "39872:3:55"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "39905:44:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "39923:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nodeType": "YulIdentifier",
                                    "src": "39935:6:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "39943:4:55",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "mul",
                                  "nodeType": "YulIdentifier",
                                  "src": "39931:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "39931:17:55"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "39919:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "39919:30:55"
                          },
                          "variables": [
                            {
                              "name": "srcEnd",
                              "nodeType": "YulTypedName",
                              "src": "39909:6:55",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "39977:103:55",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef",
                                    "nodeType": "YulIdentifier",
                                    "src": "39991:77:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "39991:79:55"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "39991:79:55"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "srcEnd",
                                "nodeType": "YulIdentifier",
                                "src": "39964:6:55"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "39972:3:55"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "39961:2:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "39961:15:55"
                          },
                          "nodeType": "YulIf",
                          "src": "39958:122:55"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "40165:155:55",
                            "statements": [
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "40180:21:55",
                                "value": {
                                  "name": "src",
                                  "nodeType": "YulIdentifier",
                                  "src": "40198:3:55"
                                },
                                "variables": [
                                  {
                                    "name": "elementPos",
                                    "nodeType": "YulTypedName",
                                    "src": "40184:10:55",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "40222:3:55"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "elementPos",
                                          "nodeType": "YulIdentifier",
                                          "src": "40259:10:55"
                                        },
                                        {
                                          "name": "end",
                                          "nodeType": "YulIdentifier",
                                          "src": "40271:3:55"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "abi_decode_t_uint256_fromMemory",
                                        "nodeType": "YulIdentifier",
                                        "src": "40227:31:55"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "40227:48:55"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "40215:6:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "40215:61:55"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "40215:61:55"
                              },
                              {
                                "nodeType": "YulAssignment",
                                "src": "40289:21:55",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "dst",
                                      "nodeType": "YulIdentifier",
                                      "src": "40300:3:55"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "40305:4:55",
                                      "type": "",
                                      "value": "0x20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "40296:3:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "40296:14:55"
                                },
                                "variableNames": [
                                  {
                                    "name": "dst",
                                    "nodeType": "YulIdentifier",
                                    "src": "40289:3:55"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "src",
                                "nodeType": "YulIdentifier",
                                "src": "40118:3:55"
                              },
                              {
                                "name": "srcEnd",
                                "nodeType": "YulIdentifier",
                                "src": "40123:6:55"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "40115:2:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "40115:15:55"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "40131:25:55",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "40133:21:55",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "src",
                                      "nodeType": "YulIdentifier",
                                      "src": "40144:3:55"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "40149:4:55",
                                      "type": "",
                                      "value": "0x20"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "40140:3:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "40140:14:55"
                                },
                                "variableNames": [
                                  {
                                    "name": "src",
                                    "nodeType": "YulIdentifier",
                                    "src": "40133:3:55"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "40093:21:55",
                            "statements": [
                              {
                                "nodeType": "YulVariableDeclaration",
                                "src": "40095:17:55",
                                "value": {
                                  "name": "offset",
                                  "nodeType": "YulIdentifier",
                                  "src": "40106:6:55"
                                },
                                "variables": [
                                  {
                                    "name": "src",
                                    "nodeType": "YulTypedName",
                                    "src": "40099:3:55",
                                    "type": ""
                                  }
                                ]
                              }
                            ]
                          },
                          "src": "40089:231:55"
                        }
                      ]
                    },
                    "name": "abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "39677:6:55",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "39685:6:55",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "39693:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "39701:5:55",
                        "type": ""
                      }
                    ],
                    "src": "39594:732:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "40437:297:55",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "40486:83:55",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
                                    "nodeType": "YulIdentifier",
                                    "src": "40488:77:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "40488:79:55"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "40488:79:55"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "40465:6:55"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "40473:4:55",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "40461:3:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "40461:17:55"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "40480:3:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "40457:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "40457:27:55"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "40450:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "40450:35:55"
                          },
                          "nodeType": "YulIf",
                          "src": "40447:122:55"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "40578:27:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "40598:6:55"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "40592:5:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "40592:13:55"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "40582:6:55",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "40614:114:55",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "40701:6:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "40709:4:55",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "40697:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "40697:17:55"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "40716:6:55"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "40724:3:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "40623:73:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "40623:105:55"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nodeType": "YulIdentifier",
                              "src": "40614:5:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_t_array$_t_uint256_$dyn_memory_ptr_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "40415:6:55",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "40423:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nodeType": "YulTypedName",
                        "src": "40431:5:55",
                        "type": ""
                      }
                    ],
                    "src": "40349:385:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "40842:452:55",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "40888:83:55",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nodeType": "YulIdentifier",
                                    "src": "40890:77:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "40890:79:55"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "40890:79:55"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "40863:7:55"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "40872:9:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "40859:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "40859:23:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "40884:2:55",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "40855:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "40855:32:55"
                          },
                          "nodeType": "YulIf",
                          "src": "40852:119:55"
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "40981:306:55",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "40996:38:55",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "41020:9:55"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "41031:1:55",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "41016:3:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "41016:17:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nodeType": "YulIdentifier",
                                  "src": "41010:5:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "41010:24:55"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "41000:6:55",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nodeType": "YulBlock",
                                "src": "41081:83:55",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                                        "nodeType": "YulIdentifier",
                                        "src": "41083:77:55"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "41083:79:55"
                                    },
                                    "nodeType": "YulExpressionStatement",
                                    "src": "41083:79:55"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "41053:6:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "41061:18:55",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "41050:2:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "41050:30:55"
                              },
                              "nodeType": "YulIf",
                              "src": "41047:117:55"
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "41178:99:55",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "41249:9:55"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "41260:6:55"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "41245:3:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "41245:22:55"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "41269:7:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_array$_t_uint256_$dyn_memory_ptr_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "41188:56:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "41188:89:55"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "41178:6:55"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_array$_t_uint256_$dyn_memory_ptr_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "40812:9:55",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "40823:7:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "40835:6:55",
                        "type": ""
                      }
                    ],
                    "src": "40740:554:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "41343:128:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "41353:33:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "41380:5:55"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint256",
                              "nodeType": "YulIdentifier",
                              "src": "41362:17:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "41362:24:55"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "41353:5:55"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "41414:22:55",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "41416:16:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "41416:18:55"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "41416:18:55"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "41401:5:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "41408:4:55",
                                "type": "",
                                "value": "0x00"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "41398:2:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "41398:15:55"
                          },
                          "nodeType": "YulIf",
                          "src": "41395:41:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "41445:20:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "41456:5:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "41463:1:55",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "41452:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "41452:13:55"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nodeType": "YulIdentifier",
                              "src": "41445:3:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "decrement_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "41329:5:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nodeType": "YulTypedName",
                        "src": "41339:3:55",
                        "type": ""
                      }
                    ],
                    "src": "41300:171:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "41583:76:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "41605:6:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "41613:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "41601:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "41601:14:55"
                              },
                              {
                                "hexValue": "537472696e67733a20686578206c656e67746820696e73756666696369656e74",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "41617:34:55",
                                "type": "",
                                "value": "Strings: hex length insufficient"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "41594:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "41594:58:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "41594:58:55"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "41575:6:55",
                        "type": ""
                      }
                    ],
                    "src": "41477:182:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "41811:220:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "41821:74:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "41887:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "41892:2:55",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "41828:58:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "41828:67:55"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "41821:3:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "41993:3:55"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2",
                              "nodeType": "YulIdentifier",
                              "src": "41904:88:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "41904:93:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "41904:93:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "42006:19:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "42017:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "42022:2:55",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "42013:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "42013:12:55"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "42006:3:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "41799:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "41807:3:55",
                        "type": ""
                      }
                    ],
                    "src": "41665:366:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "42208:248:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "42218:26:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "42230:9:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "42241:2:55",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "42226:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "42226:18:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "42218:4:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "42265:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "42276:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "42261:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "42261:17:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "42284:4:55"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "42290:9:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "42280:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "42280:20:55"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "42254:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "42254:47:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "42254:47:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "42310:139:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "42444:4:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "42318:124:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "42318:131:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "42310:4:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "42188:9:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "42203:4:55",
                        "type": ""
                      }
                    ],
                    "src": "42037:419:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "42616:288:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "42626:26:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "42638:9:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "42649:2:55",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "42634:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "42634:18:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "42626:4:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "42706:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "42719:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "42730:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "42715:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "42715:17:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_address_to_t_address_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "42662:43:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "42662:71:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "42662:71:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "42787:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "42800:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "42811:2:55",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "42796:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "42796:18:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_address_to_t_address_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "42743:43:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "42743:72:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "42743:72:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "42869:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "42882:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "42893:2:55",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "42878:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "42878:18:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "42825:43:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "42825:72:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "42825:72:55"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "42572:9:55",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "42584:6:55",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "42592:6:55",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "42600:6:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "42611:4:55",
                        "type": ""
                      }
                    ],
                    "src": "42462:442:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "43120:454:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "43130:27:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "43142:9:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "43153:3:55",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "43138:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "43138:19:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "43130:4:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "43211:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "43224:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "43235:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "43220:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "43220:17:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "43167:43:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "43167:71:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "43167:71:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "43292:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "43305:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "43316:2:55",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "43301:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "43301:18:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "43248:43:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "43248:72:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "43248:72:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "43374:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "43387:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "43398:2:55",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "43383:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "43383:18:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "43330:43:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "43330:72:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "43330:72:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "43456:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "43469:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "43480:2:55",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "43465:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "43465:18:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "43412:43:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "43412:72:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "43412:72:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value4",
                                "nodeType": "YulIdentifier",
                                "src": "43538:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "43551:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "43562:3:55",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "43547:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "43547:19:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_address_to_t_address_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "43494:43:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "43494:73:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "43494:73:55"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "43060:9:55",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "43072:6:55",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "43080:6:55",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "43088:6:55",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "43096:6:55",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "43104:6:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "43115:4:55",
                        "type": ""
                      }
                    ],
                    "src": "42910:664:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "43608:152:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "43625:1:55",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "43628:77:55",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "43618:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "43618:88:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "43618:88:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "43722:1:55",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "43725:4:55",
                                "type": "",
                                "value": "0x21"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "43715:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "43715:15:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "43715:15:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "43746:1:55",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "43749:4:55",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "43739:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "43739:15:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "43739:15:55"
                        }
                      ]
                    },
                    "name": "panic_error_0x21",
                    "nodeType": "YulFunctionDefinition",
                    "src": "43580:180:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "43872:68:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "43894:6:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "43902:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "43890:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "43890:14:55"
                              },
                              {
                                "hexValue": "45434453413a20696e76616c6964207369676e6174757265",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "43906:26:55",
                                "type": "",
                                "value": "ECDSA: invalid signature"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "43883:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "43883:50:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "43883:50:55"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "43864:6:55",
                        "type": ""
                      }
                    ],
                    "src": "43766:174:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "44092:220:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "44102:74:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "44168:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "44173:2:55",
                                "type": "",
                                "value": "24"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "44109:58:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "44109:67:55"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "44102:3:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "44274:3:55"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be",
                              "nodeType": "YulIdentifier",
                              "src": "44185:88:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "44185:93:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "44185:93:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "44287:19:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "44298:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "44303:2:55",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "44294:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "44294:12:55"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "44287:3:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "44080:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "44088:3:55",
                        "type": ""
                      }
                    ],
                    "src": "43946:366:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "44489:248:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "44499:26:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "44511:9:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "44522:2:55",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "44507:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "44507:18:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "44499:4:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "44546:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "44557:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "44542:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "44542:17:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "44565:4:55"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "44571:9:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "44561:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "44561:20:55"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "44535:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "44535:47:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "44535:47:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "44591:139:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "44725:4:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "44599:124:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "44599:131:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "44591:4:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "44469:9:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "44484:4:55",
                        "type": ""
                      }
                    ],
                    "src": "44318:419:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "44849:75:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "44871:6:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "44879:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "44867:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "44867:14:55"
                              },
                              {
                                "hexValue": "45434453413a20696e76616c6964207369676e6174757265206c656e677468",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "44883:33:55",
                                "type": "",
                                "value": "ECDSA: invalid signature length"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "44860:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "44860:57:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "44860:57:55"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "44841:6:55",
                        "type": ""
                      }
                    ],
                    "src": "44743:181:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "45076:220:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "45086:74:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "45152:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "45157:2:55",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "45093:58:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "45093:67:55"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "45086:3:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "45258:3:55"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77",
                              "nodeType": "YulIdentifier",
                              "src": "45169:88:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "45169:93:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "45169:93:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "45271:19:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "45282:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "45287:2:55",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "45278:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "45278:12:55"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "45271:3:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "45064:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "45072:3:55",
                        "type": ""
                      }
                    ],
                    "src": "44930:366:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "45473:248:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "45483:26:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "45495:9:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "45506:2:55",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "45491:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "45491:18:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "45483:4:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "45530:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "45541:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "45526:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "45526:17:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "45549:4:55"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "45555:9:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "45545:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "45545:20:55"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "45519:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "45519:47:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "45519:47:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "45575:139:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "45709:4:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "45583:124:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "45583:131:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "45575:4:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "45453:9:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "45468:4:55",
                        "type": ""
                      }
                    ],
                    "src": "45302:419:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "45833:115:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "45855:6:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "45863:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "45851:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "45851:14:55"
                              },
                              {
                                "hexValue": "45434453413a20696e76616c6964207369676e6174757265202773272076616c",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "45867:34:55",
                                "type": "",
                                "value": "ECDSA: invalid signature 's' val"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "45844:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "45844:58:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "45844:58:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "45923:6:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "45931:2:55",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "45919:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "45919:15:55"
                              },
                              {
                                "hexValue": "7565",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "45936:4:55",
                                "type": "",
                                "value": "ue"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "45912:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "45912:29:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "45912:29:55"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "45825:6:55",
                        "type": ""
                      }
                    ],
                    "src": "45727:221:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "46100:220:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "46110:74:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "46176:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "46181:2:55",
                                "type": "",
                                "value": "34"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "46117:58:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "46117:67:55"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "46110:3:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "46282:3:55"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd",
                              "nodeType": "YulIdentifier",
                              "src": "46193:88:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "46193:93:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "46193:93:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "46295:19:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "46306:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "46311:2:55",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "46302:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "46302:12:55"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "46295:3:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "46088:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "46096:3:55",
                        "type": ""
                      }
                    ],
                    "src": "45954:366:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "46497:248:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "46507:26:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "46519:9:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "46530:2:55",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "46515:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "46515:18:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "46507:4:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "46554:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "46565:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "46550:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "46550:17:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "46573:4:55"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "46579:9:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "46569:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "46569:20:55"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "46543:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "46543:47:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "46543:47:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "46599:139:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "46733:4:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "46607:124:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "46607:131:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "46599:4:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "46477:9:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "46492:4:55",
                        "type": ""
                      }
                    ],
                    "src": "46326:419:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "46791:76:55",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "46845:16:55",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "46854:1:55",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "46857:1:55",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "46847:6:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "46847:12:55"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "46847:12:55"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "46814:5:55"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "46836:5:55"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "cleanup_t_bool",
                                      "nodeType": "YulIdentifier",
                                      "src": "46821:14:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "46821:21:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "46811:2:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "46811:32:55"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "46804:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "46804:40:55"
                          },
                          "nodeType": "YulIf",
                          "src": "46801:60:55"
                        }
                      ]
                    },
                    "name": "validator_revert_t_bool",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "46784:5:55",
                        "type": ""
                      }
                    ],
                    "src": "46751:116:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "46933:77:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "46943:22:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "46958:6:55"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "46952:5:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "46952:13:55"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "46943:5:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "46998:5:55"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_bool",
                              "nodeType": "YulIdentifier",
                              "src": "46974:23:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "46974:30:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "46974:30:55"
                        }
                      ]
                    },
                    "name": "abi_decode_t_bool_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "46911:6:55",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "46919:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "46927:5:55",
                        "type": ""
                      }
                    ],
                    "src": "46873:137:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "47090:271:55",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "47136:83:55",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nodeType": "YulIdentifier",
                                    "src": "47138:77:55"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "47138:79:55"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "47138:79:55"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "47111:7:55"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "47120:9:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "47107:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "47107:23:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "47132:2:55",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "47103:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "47103:32:55"
                          },
                          "nodeType": "YulIf",
                          "src": "47100:119:55"
                        },
                        {
                          "nodeType": "YulBlock",
                          "src": "47229:125:55",
                          "statements": [
                            {
                              "nodeType": "YulVariableDeclaration",
                              "src": "47244:15:55",
                              "value": {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "47258:1:55",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nodeType": "YulTypedName",
                                  "src": "47248:6:55",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nodeType": "YulAssignment",
                              "src": "47273:71:55",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nodeType": "YulIdentifier",
                                        "src": "47316:9:55"
                                      },
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "47327:6:55"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "47312:3:55"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "47312:22:55"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "47336:7:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_bool_fromMemory",
                                  "nodeType": "YulIdentifier",
                                  "src": "47283:28:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "47283:61:55"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "47273:6:55"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bool_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "47060:9:55",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "47071:7:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "47083:6:55",
                        "type": ""
                      }
                    ],
                    "src": "47016:345:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "47473:123:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "47495:6:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "47503:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "47491:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "47491:14:55"
                              },
                              {
                                "hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "47507:34:55",
                                "type": "",
                                "value": "SafeERC20: ERC20 operation did n"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "47484:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "47484:58:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "47484:58:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "47563:6:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "47571:2:55",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "47559:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "47559:15:55"
                              },
                              {
                                "hexValue": "6f742073756363656564",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "47576:12:55",
                                "type": "",
                                "value": "ot succeed"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "47552:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "47552:37:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "47552:37:55"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "47465:6:55",
                        "type": ""
                      }
                    ],
                    "src": "47367:229:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "47748:220:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "47758:74:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "47824:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "47829:2:55",
                                "type": "",
                                "value": "42"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "47765:58:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "47765:67:55"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "47758:3:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "47930:3:55"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
                              "nodeType": "YulIdentifier",
                              "src": "47841:88:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "47841:93:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "47841:93:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "47943:19:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "47954:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "47959:2:55",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "47950:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "47950:12:55"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "47943:3:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "47736:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "47744:3:55",
                        "type": ""
                      }
                    ],
                    "src": "47602:366:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "48145:248:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "48155:26:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "48167:9:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "48178:2:55",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "48163:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "48163:18:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "48155:4:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "48202:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "48213:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "48198:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "48198:17:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "48221:4:55"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "48227:9:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "48217:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "48217:20:55"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "48191:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "48191:47:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "48191:47:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "48247:139:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "48381:4:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "48255:124:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "48255:131:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "48247:4:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "48125:9:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "48140:4:55",
                        "type": ""
                      }
                    ],
                    "src": "47974:419:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "48442:43:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "48452:27:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "48467:5:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "48474:4:55",
                                "type": "",
                                "value": "0xff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "48463:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "48463:16:55"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nodeType": "YulIdentifier",
                              "src": "48452:7:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_uint8",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "48424:5:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nodeType": "YulTypedName",
                        "src": "48434:7:55",
                        "type": ""
                      }
                    ],
                    "src": "48399:86:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "48552:51:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "48569:3:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "48590:5:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "cleanup_t_uint8",
                                  "nodeType": "YulIdentifier",
                                  "src": "48574:15:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "48574:22:55"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "48562:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "48562:35:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "48562:35:55"
                        }
                      ]
                    },
                    "name": "abi_encode_t_uint8_to_t_uint8_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "48540:5:55",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "48547:3:55",
                        "type": ""
                      }
                    ],
                    "src": "48491:112:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "48787:367:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "48797:27:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "48809:9:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "48820:3:55",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "48805:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "48805:19:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "48797:4:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "48878:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "48891:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "48902:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "48887:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "48887:17:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "48834:43:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "48834:71:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "48834:71:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "48955:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "48968:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "48979:2:55",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "48964:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "48964:18:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint8_to_t_uint8_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "48915:39:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "48915:68:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "48915:68:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "49037:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "49050:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "49061:2:55",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "49046:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "49046:18:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "48993:43:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "48993:72:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "48993:72:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "49119:6:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "49132:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "49143:2:55",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "49128:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "49128:18:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_bytes32_to_t_bytes32_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "49075:43:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "49075:72:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "49075:72:55"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "48735:9:55",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "48747:6:55",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "48755:6:55",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "48763:6:55",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "48771:6:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "48782:4:55",
                        "type": ""
                      }
                    ],
                    "src": "48609:545:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "49266:119:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "49288:6:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "49296:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "49284:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "49284:14:55"
                              },
                              {
                                "hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "49300:34:55",
                                "type": "",
                                "value": "Address: insufficient balance fo"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "49277:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "49277:58:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "49277:58:55"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "49356:6:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "49364:2:55",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "49352:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "49352:15:55"
                              },
                              {
                                "hexValue": "722063616c6c",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "49369:8:55",
                                "type": "",
                                "value": "r call"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "49345:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "49345:33:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "49345:33:55"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "49258:6:55",
                        "type": ""
                      }
                    ],
                    "src": "49160:225:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "49537:220:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "49547:74:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "49613:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "49618:2:55",
                                "type": "",
                                "value": "38"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "49554:58:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "49554:67:55"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "49547:3:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "49719:3:55"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
                              "nodeType": "YulIdentifier",
                              "src": "49630:88:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "49630:93:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "49630:93:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "49732:19:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "49743:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "49748:2:55",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "49739:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "49739:12:55"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "49732:3:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "49525:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "49533:3:55",
                        "type": ""
                      }
                    ],
                    "src": "49391:366:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "49934:248:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "49944:26:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "49956:9:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "49967:2:55",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "49952:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "49952:18:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "49944:4:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "49991:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "50002:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "49987:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "49987:17:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "50010:4:55"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "50016:9:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "50006:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "50006:20:55"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "49980:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "49980:47:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "49980:47:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "50036:139:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "50170:4:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "50044:124:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "50044:131:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "50036:4:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "49914:9:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "49929:4:55",
                        "type": ""
                      }
                    ],
                    "src": "49763:419:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "50296:265:55",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "50306:52:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "50352:5:55"
                              }
                            ],
                            "functionName": {
                              "name": "array_length_t_bytes_memory_ptr",
                              "nodeType": "YulIdentifier",
                              "src": "50320:31:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "50320:38:55"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "50310:6:55",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "50367:95:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "50450:3:55"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "50455:6:55"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "50374:75:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "50374:88:55"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "50367:3:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "50497:5:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "50504:4:55",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "50493:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "50493:16:55"
                              },
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "50511:3:55"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "50516:6:55"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "50471:21:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "50471:52:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "50471:52:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "50532:23:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "50543:3:55"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "50548:6:55"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "50539:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "50539:16:55"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "50532:3:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "50277:5:55",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "50284:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "50292:3:55",
                        "type": ""
                      }
                    ],
                    "src": "50188:373:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "50701:137:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "50712:100:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "50799:6:55"
                              },
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "50808:3:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "50719:79:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "50719:93:55"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "50712:3:55"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "50822:10:55",
                          "value": {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "50829:3:55"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "50822:3:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "50680:3:55",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "50686:6:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "50697:3:55",
                        "type": ""
                      }
                    ],
                    "src": "50567:271:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "50950:73:55",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "50972:6:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "50980:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "50968:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "50968:14:55"
                              },
                              {
                                "hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "50984:31:55",
                                "type": "",
                                "value": "Address: call to non-contract"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "50961:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "50961:55:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "50961:55:55"
                        }
                      ]
                    },
                    "name": "store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nodeType": "YulTypedName",
                        "src": "50942:6:55",
                        "type": ""
                      }
                    ],
                    "src": "50844:179:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "51175:220:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "51185:74:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "51251:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "51256:2:55",
                                "type": "",
                                "value": "29"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "51192:58:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "51192:67:55"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nodeType": "YulIdentifier",
                              "src": "51185:3:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "51357:3:55"
                              }
                            ],
                            "functionName": {
                              "name": "store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
                              "nodeType": "YulIdentifier",
                              "src": "51268:88:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "51268:93:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "51268:93:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "51370:19:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "51381:3:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "51386:2:55",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "51377:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "51377:12:55"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "51370:3:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "51163:3:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "51171:3:55",
                        "type": ""
                      }
                    ],
                    "src": "51029:366:55"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "51572:248:55",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "51582:26:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "51594:9:55"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "51605:2:55",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "51590:3:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "51590:18:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "51582:4:55"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "51629:9:55"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "51640:1:55",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "51625:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "51625:17:55"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nodeType": "YulIdentifier",
                                    "src": "51648:4:55"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "51654:9:55"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "51644:3:55"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "51644:20:55"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "51618:6:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "51618:47:55"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "51618:47:55"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "51674:139:55",
                          "value": {
                            "arguments": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "51808:4:55"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack",
                              "nodeType": "YulIdentifier",
                              "src": "51682:124:55"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "51682:131:55"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "51674:4:55"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "51552:9:55",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "51567:4:55",
                        "type": ""
                      }
                    ],
                    "src": "51401:419:55"
                  }
                ]
              },
              "contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length)\n        {\n            // clear end\n            mstore(add(dst, length), 0)\n        }\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function array_length_t_array$_t_address_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_dataslot_t_array$_t_address_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function abi_encode_t_address_to_t_address(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encodeUpdatedPos_t_address_to_t_address(value0, pos) -> updatedPos {\n        abi_encode_t_address_to_t_address(value0, pos)\n        updatedPos := add(pos, 0x20)\n    }\n\n    function array_nextElement_t_array$_t_address_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    // address[] -> address[]\n    function abi_encode_t_array$_t_address_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr_fromStack(value, pos)  -> end  {\n        let length := array_length_t_array$_t_address_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr_fromStack(pos, length)\n        let baseRef := array_dataslot_t_array$_t_address_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_address_to_t_address(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_address_$dyn_memory_ptr(srcPtr)\n        }\n        end := pos\n    }\n\n    function abi_encode_tuple_t_array$_t_address_$dyn_memory_ptr__to_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_address_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() {\n        revert(0, 0)\n    }\n\n    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() {\n        revert(0, 0)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_calldata_ptr(offset, end) -> arrayPos, length {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490() }\n        arrayPos := add(offset, 0x20)\n        if gt(add(arrayPos, mul(length, 0x01)), end) { revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef() }\n    }\n\n    function abi_decode_tuple_t_addresst_uint256t_addresst_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5 {\n        if slt(sub(dataEnd, headStart), 160) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 128))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value4, value5 := abi_decode_t_bytes_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_bytes32(value) {\n        if iszero(eq(value, cleanup_t_bytes32(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes32(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes32(value)\n    }\n\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint160_to_t_uint160(value) -> converted {\n        converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))\n    }\n\n    function convert_t_uint160_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_uint160(value)\n    }\n\n    function convert_t_contract$_ISoulboundIdentity_$10954_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_address(value)\n    }\n\n    function abi_encode_t_contract$_ISoulboundIdentity_$10954_to_t_address_fromStack(value, pos) {\n        mstore(pos, convert_t_contract$_ISoulboundIdentity_$10954_to_t_address(value))\n    }\n\n    function abi_encode_tuple_t_contract$_ISoulboundIdentity_$10954__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_contract$_ISoulboundIdentity_$10954_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_addresst_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5 {\n        if slt(sub(dataEnd, headStart), 160) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 96\n\n            value3 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 128))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value4, value5 := abi_decode_t_bytes_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bytes1(value) -> cleaned {\n        cleaned := and(value, 0xff00000000000000000000000000000000000000000000000000000000000000)\n    }\n\n    function abi_encode_t_bytes1_to_t_bytes1_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes1(value))\n    }\n\n    function array_length_t_array$_t_uint256_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_dataslot_t_array$_t_uint256_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encodeUpdatedPos_t_uint256_to_t_uint256(value0, pos) -> updatedPos {\n        abi_encode_t_uint256_to_t_uint256(value0, pos)\n        updatedPos := add(pos, 0x20)\n    }\n\n    function array_nextElement_t_array$_t_uint256_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    // uint256[] -> uint256[]\n    function abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value, pos)  -> end  {\n        let length := array_length_t_array$_t_uint256_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_uint256_$dyn_memory_ptr_fromStack(pos, length)\n        let baseRef := array_dataslot_t_array$_t_uint256_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_uint256_to_t_uint256(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_uint256_$dyn_memory_ptr(srcPtr)\n        }\n        end := pos\n    }\n\n    function abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart , value6, value5, value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 224)\n\n        abi_encode_t_bytes1_to_t_bytes1_fromStack(value0,  add(headStart, 0))\n\n        mstore(add(headStart, 32), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value1,  tail)\n\n        mstore(add(headStart, 64), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value2,  tail)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_address_to_t_address_fromStack(value4,  add(headStart, 128))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value5,  add(headStart, 160))\n\n        mstore(add(headStart, 192), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_uint256_$dyn_memory_ptr_to_t_array$_t_uint256_$dyn_memory_ptr_fromStack(value6,  tail)\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_uint256_t_address_t_uint256_t_address_t_uint256__to_t_uint256_t_uint256_t_address_t_uint256_t_address_t_uint256__fromStack_reversed(headStart , value5, value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 192)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_address_to_t_address_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_address_to_t_address_fromStack(value4,  add(headStart, 128))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value5,  add(headStart, 160))\n\n    }\n\n    function store_literal_in_memory_4cba4594467bed28c84b2ef8d55aac89acba7e2da5637e413ab41fc240140e6b(memPtr) {\n\n        mstore(add(memPtr, 0), \"SBTEnumerable: owner index out o\")\n\n        mstore(add(memPtr, 32), \"f bounds\")\n\n    }\n\n    function abi_encode_t_stringliteral_4cba4594467bed28c84b2ef8d55aac89acba7e2da5637e413ab41fc240140e6b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 40)\n        store_literal_in_memory_4cba4594467bed28c84b2ef8d55aac89acba7e2da5637e413ab41fc240140e6b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_4cba4594467bed28c84b2ef8d55aac89acba7e2da5637e413ab41fc240140e6b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_4cba4594467bed28c84b2ef8d55aac89acba7e2da5637e413ab41fc240140e6b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b(memPtr) {\n\n        mstore(add(memPtr, 0), \"AccessControl: can only renounce\")\n\n        mstore(add(memPtr, 32), \" roles for self\")\n\n    }\n\n    function abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 47)\n        store_literal_in_memory_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_70ad2518d1f7f0f51092b89610563e26421e7b5695bf143c261b724f5156697a(memPtr) {\n\n        mstore(add(memPtr, 0), \"SBT: caller is not token owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_70ad2518d1f7f0f51092b89610563e26421e7b5695bf143c261b724f5156697a_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 30)\n        store_literal_in_memory_70ad2518d1f7f0f51092b89610563e26421e7b5695bf143c261b724f5156697a(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_70ad2518d1f7f0f51092b89610563e26421e7b5695bf143c261b724f5156697a__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_70ad2518d1f7f0f51092b89610563e26421e7b5695bf143c261b724f5156697a_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_e377e4860fbccf11d3b4fcb4a7f63197010d7ea9cd7cd736dd805d0f46d766f8(memPtr) {\n\n        mstore(add(memPtr, 0), \"SBTEnumerable: global index out \")\n\n        mstore(add(memPtr, 32), \"of bounds\")\n\n    }\n\n    function abi_encode_t_stringliteral_e377e4860fbccf11d3b4fcb4a7f63197010d7ea9cd7cd736dd805d0f46d766f8_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 41)\n        store_literal_in_memory_e377e4860fbccf11d3b4fcb4a7f63197010d7ea9cd7cd736dd805d0f46d766f8(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_e377e4860fbccf11d3b4fcb4a7f63197010d7ea9cd7cd736dd805d0f46d766f8__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_e377e4860fbccf11d3b4fcb4a7f63197010d7ea9cd7cd736dd805d0f46d766f8_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function store_literal_in_memory_a3c3eedda6c72e2c47160117d4a29d221437504cd467b98f580e08d3d3970883(memPtr) {\n\n        mstore(add(memPtr, 0), \"SBT: invalid token ID\")\n\n    }\n\n    function abi_encode_t_stringliteral_a3c3eedda6c72e2c47160117d4a29d221437504cd467b98f580e08d3d3970883_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 21)\n        store_literal_in_memory_a3c3eedda6c72e2c47160117d4a29d221437504cd467b98f580e08d3d3970883(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_a3c3eedda6c72e2c47160117d4a29d221437504cd467b98f580e08d3d3970883__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_a3c3eedda6c72e2c47160117d4a29d221437504cd467b98f580e08d3d3970883_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_608839fd44787057cb3d37d5cc5b64398c23ca3a9c57285ebb020478108fa981(memPtr) {\n\n        mstore(add(memPtr, 0), \"SBT: address zero is not a valid\")\n\n        mstore(add(memPtr, 32), \" owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_608839fd44787057cb3d37d5cc5b64398c23ca3a9c57285ebb020478108fa981_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_608839fd44787057cb3d37d5cc5b64398c23ca3a9c57285ebb020478108fa981(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_608839fd44787057cb3d37d5cc5b64398c23ca3a9c57285ebb020478108fa981__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_608839fd44787057cb3d37d5cc5b64398c23ca3a9c57285ebb020478108fa981_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_uint256_t_address_t_address_t_uint256_t_address_t_uint256__to_t_uint256_t_address_t_address_t_uint256_t_address_t_uint256__fromStack_reversed(headStart , value5, value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 192)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_address_to_t_address_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_address_to_t_address_fromStack(value4,  add(headStart, 128))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value5,  add(headStart, 160))\n\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        if lt(x, y) { panic_error_0x11() }\n\n        diff := sub(x, y)\n    }\n\n    function panic_error_0x31() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x31)\n        revert(0, 0x24)\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function abi_decode_t_uint256_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function store_literal_in_memory_94311adc0a0cd4e10be11b23bd4316b8cffa4adf693e8f96f5c075aa439a7972(memPtr) {\n\n        mstore(add(memPtr, 0), \".json\")\n\n    }\n\n    function abi_encode_t_stringliteral_94311adc0a0cd4e10be11b23bd4316b8cffa4adf693e8f96f5c075aa439a7972_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 5)\n        store_literal_in_memory_94311adc0a0cd4e10be11b23bd4316b8cffa4adf693e8f96f5c075aa439a7972(pos)\n        end := add(pos, 5)\n    }\n\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr_t_stringliteral_94311adc0a0cd4e10be11b23bd4316b8cffa4adf693e8f96f5c075aa439a7972__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        pos := abi_encode_t_stringliteral_94311adc0a0cd4e10be11b23bd4316b8cffa4adf693e8f96f5c075aa439a7972_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619(memPtr) {\n\n        mstore(add(memPtr, 0), \"ReentrancyGuard: reentrant call\")\n\n    }\n\n    function abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)\n        store_literal_in_memory_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_bytes32_t_uint256_t_address_t_uint256__to_t_bytes32_t_uint256_t_address_t_uint256__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_address_to_t_address_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n    }\n\n    function abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256__to_t_bytes32_t_address_t_address_t_uint256__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_address_to_t_address_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_dataslot_t_bytes_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function read_from_memoryt_bytes32(ptr) -> returnValue {\n\n        let value := cleanup_t_bytes32(mload(ptr))\n\n        returnValue :=\n\n        value\n\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32(array) -> value {\n\n        let length := array_length_t_bytes_memory_ptr(array)\n        let dataArea := array\n\n        dataArea := array_dataslot_t_bytes_memory_ptr(array)\n\n        value := read_from_memoryt_bytes32(dataArea)\n\n        if lt(length, 32) {\n            value := and(\n                value,\n                shift_left_dynamic(\n                    mul(8, sub(32, length)),\n                    0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n                )\n            )\n        }\n\n    }\n\n    function store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874(memPtr) {\n\n        mstore(add(memPtr, 0), \"AccessControl: account \")\n\n    }\n\n    function abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 23)\n        store_literal_in_memory_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874(pos)\n        end := add(pos, 23)\n    }\n\n    function store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69(memPtr) {\n\n        mstore(add(memPtr, 0), \" is missing role \")\n\n    }\n\n    function abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, 17)\n        store_literal_in_memory_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69(pos)\n        end := add(pos, 17)\n    }\n\n    function abi_encode_tuple_packed_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_t_string_memory_ptr_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69_to_t_string_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470(memPtr) {\n\n    }\n\n    function abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, 0)\n        store_literal_in_memory_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470(pos)\n        end := add(pos, 0)\n    }\n\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos ) -> end {\n\n        pos := abi_encode_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack( pos)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_1e3f643e26125191cb4d250aea16dfef593e7657e78ad664a187bfc056770dd1(memPtr) {\n\n        mstore(add(memPtr, 0), \"SBT: mint to the zero address\")\n\n    }\n\n    function abi_encode_t_stringliteral_1e3f643e26125191cb4d250aea16dfef593e7657e78ad664a187bfc056770dd1_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_1e3f643e26125191cb4d250aea16dfef593e7657e78ad664a187bfc056770dd1(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_1e3f643e26125191cb4d250aea16dfef593e7657e78ad664a187bfc056770dd1__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_1e3f643e26125191cb4d250aea16dfef593e7657e78ad664a187bfc056770dd1_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_9ef05e702ba0a2951785c140491ca358d7357043a4cde53aea0ddcb0ee904823(memPtr) {\n\n        mstore(add(memPtr, 0), \"SBT: token already minted\")\n\n    }\n\n    function abi_encode_t_stringliteral_9ef05e702ba0a2951785c140491ca358d7357043a4cde53aea0ddcb0ee904823_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 25)\n        store_literal_in_memory_9ef05e702ba0a2951785c140491ca358d7357043a4cde53aea0ddcb0ee904823(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_9ef05e702ba0a2951785c140491ca358d7357043a4cde53aea0ddcb0ee904823__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_9ef05e702ba0a2951785c140491ca358d7357043a4cde53aea0ddcb0ee904823_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x > (maxValue - y)\n        if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }\n\n        sum := add(x, y)\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x != 0 and y > (maxValue / x)\n        if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }\n\n        product := mul(x, y)\n    }\n\n    function checked_div_t_uint256(x, y) -> r {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        if iszero(y) { panic_error_0x12() }\n\n        r := div(x, y)\n    }\n\n    function abi_encode_tuple_t_uint256_t_array$_t_address_$dyn_memory_ptr__to_t_uint256_t_array$_t_address_$dyn_memory_ptr__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n        mstore(add(headStart, 32), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_address_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr_fromStack(value1,  tail)\n\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := mul(length, 0x20)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    // uint256[]\n    function abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr_fromMemory(offset, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_array$_t_uint256_$dyn_memory_ptr(length))\n        let dst := array\n\n        mstore(array, length)\n        dst := add(array, 0x20)\n\n        let srcEnd := add(offset, mul(length, 0x20))\n        if gt(srcEnd, end) {\n            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n        }\n        for { let src := offset } lt(src, srcEnd) { src := add(src, 0x20) }\n        {\n\n            let elementPos := src\n\n            mstore(dst, abi_decode_t_uint256_fromMemory(elementPos, end))\n            dst := add(dst, 0x20)\n        }\n    }\n\n    // uint256[]\n    function abi_decode_t_array$_t_uint256_$dyn_memory_ptr_fromMemory(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := mload(offset)\n        array := abi_decode_available_length_t_array$_t_uint256_$dyn_memory_ptr_fromMemory(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_array$_t_uint256_$dyn_memory_ptr_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := mload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_array$_t_uint256_$dyn_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function decrement_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0x00) { panic_error_0x11() }\n        ret := sub(value, 1)\n    }\n\n    function store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2(memPtr) {\n\n        mstore(add(memPtr, 0), \"Strings: hex length insufficient\")\n\n    }\n\n    function abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart , value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 160)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value3,  add(headStart, 96))\n\n        abi_encode_t_address_to_t_address_fromStack(value4,  add(headStart, 128))\n\n    }\n\n    function panic_error_0x21() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n\n    function store_literal_in_memory_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be(memPtr) {\n\n        mstore(add(memPtr, 0), \"ECDSA: invalid signature\")\n\n    }\n\n    function abi_encode_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77(memPtr) {\n\n        mstore(add(memPtr, 0), \"ECDSA: invalid signature length\")\n\n    }\n\n    function abi_encode_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 31)\n        store_literal_in_memory_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd(memPtr) {\n\n        mstore(add(memPtr, 0), \"ECDSA: invalid signature 's' val\")\n\n        mstore(add(memPtr, 32), \"ue\")\n\n    }\n\n    function abi_encode_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 34)\n        store_literal_in_memory_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd(memPtr) {\n\n        mstore(add(memPtr, 0), \"SafeERC20: ERC20 operation did n\")\n\n        mstore(add(memPtr, 32), \"ot succeed\")\n\n    }\n\n    function abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 42)\n        store_literal_in_memory_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function cleanup_t_uint8(value) -> cleaned {\n        cleaned := and(value, 0xff)\n    }\n\n    function abi_encode_t_uint8_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint8_to_t_uint8_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value3,  add(headStart, 96))\n\n    }\n\n    function store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c(memPtr) {\n\n        mstore(add(memPtr, 0), \"Address: insufficient balance fo\")\n\n        mstore(add(memPtr, 32), \"r call\")\n\n    }\n\n    function abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 38)\n        store_literal_in_memory_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad(memPtr) {\n\n        mstore(add(memPtr, 0), \"Address: call to non-contract\")\n\n    }\n\n    function abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n}\n",
              "id": 55,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "immutableReferences": {
            "4056": [
              {
                "length": 32,
                "start": 11581
              }
            ],
            "4058": [
              {
                "length": 32,
                "start": 11539
              }
            ],
            "4060": [
              {
                "length": 32,
                "start": 11497
              }
            ],
            "4062": [
              {
                "length": 32,
                "start": 12419
              }
            ],
            "4064": [
              {
                "length": 32,
                "start": 12452
              }
            ],
            "4067": [
              {
                "length": 32,
                "start": 5393
              }
            ],
            "4070": [
              {
                "length": 32,
                "start": 5436
              }
            ]
          },
          "linkReferences": {},
          "object": "",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x2C7 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH3 0xBDFDE5 EQ PUSH2 0x2CC JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x2EE JUMPI DUP1 PUSH4 0x513C3E9 EQ PUSH2 0x324 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x351 JUMPI DUP1 PUSH4 0x10200519 EQ PUSH2 0x373 JUMPI DUP1 PUSH4 0x13150B48 EQ PUSH2 0x395 JUMPI DUP1 PUSH4 0x17FCB39B EQ PUSH2 0x3B8 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x3D8 JUMPI DUP1 PUSH4 0x1830E881 EQ PUSH2 0x3ED JUMPI DUP1 PUSH4 0x1F37C124 EQ PUSH2 0x403 JUMPI DUP1 PUSH4 0x20D558AA EQ PUSH2 0x419 JUMPI DUP1 PUSH4 0x217A2C7B EQ PUSH2 0x42C JUMPI DUP1 PUSH4 0x23AF4E17 EQ PUSH2 0x44C JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x46C JUMPI DUP1 PUSH4 0x26DEFA73 EQ PUSH2 0x48C JUMPI DUP1 PUSH4 0x289C686B EQ PUSH2 0x4AC JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x4CC JUMPI DUP1 PUSH4 0x2F745C59 EQ PUSH2 0x4EC JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x50C JUMPI DUP1 PUSH4 0x39A51BE5 EQ PUSH2 0x52C JUMPI DUP1 PUSH4 0x3AD3033E EQ PUSH2 0x54C JUMPI DUP1 PUSH4 0x3C72AE70 EQ PUSH2 0x56C JUMPI DUP1 PUSH4 0x41273657 EQ PUSH2 0x58C JUMPI DUP1 PUSH4 0x41C04D5E EQ PUSH2 0x5AC JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x5CE JUMPI DUP1 PUSH4 0x46877B1A EQ PUSH2 0x5EE JUMPI DUP1 PUSH4 0x4962A158 EQ PUSH2 0x60E JUMPI DUP1 PUSH4 0x4F558E79 EQ PUSH2 0x62E JUMPI DUP1 PUSH4 0x4F6CCCE7 EQ PUSH2 0x64E JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x66E JUMPI DUP1 PUSH4 0x6817C76C EQ PUSH2 0x68E JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x6A4 JUMPI DUP1 PUSH4 0x719D0F2B EQ PUSH2 0x6C4 JUMPI DUP1 PUSH4 0x76AD1997 EQ PUSH2 0x6E4 JUMPI DUP1 PUSH4 0x776D1A54 EQ PUSH2 0x704 JUMPI DUP1 PUSH4 0x77BED5ED EQ PUSH2 0x71A JUMPI DUP1 PUSH4 0x7A0D1646 EQ PUSH2 0x747 JUMPI DUP1 PUSH4 0x7AD09DFF EQ PUSH2 0x777 JUMPI DUP1 PUSH4 0x7DB8CB68 EQ PUSH2 0x78A JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x7AA JUMPI DUP1 PUSH4 0x8D018461 EQ PUSH2 0x7D2 JUMPI DUP1 PUSH4 0x8EC9C93B EQ PUSH2 0x7F2 JUMPI DUP1 PUSH4 0x91223D69 EQ PUSH2 0x808 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x838 JUMPI DUP1 PUSH4 0x94A665E9 EQ PUSH2 0x858 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x878 JUMPI DUP1 PUSH4 0x992642E5 EQ PUSH2 0x88D JUMPI DUP1 PUSH4 0x99B589CB EQ PUSH2 0x8AD JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x8CD JUMPI DUP1 PUSH4 0xA4983421 EQ PUSH2 0x8E2 JUMPI DUP1 PUSH4 0xB97D6B23 EQ PUSH2 0x902 JUMPI DUP1 PUSH4 0xC1177D19 EQ PUSH2 0x918 JUMPI DUP1 PUSH4 0xC31C9C07 EQ PUSH2 0x938 JUMPI DUP1 PUSH4 0xC86AADB6 EQ PUSH2 0x958 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x978 JUMPI DUP1 PUSH4 0xD544E010 EQ PUSH2 0x998 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x9B8 JUMPI DUP1 PUSH4 0xD6E6EB9F EQ PUSH2 0x9D8 JUMPI DUP1 PUSH4 0xDA058AE3 EQ PUSH2 0x9EE JUMPI DUP1 PUSH4 0xEB93E855 EQ PUSH2 0xA0E JUMPI DUP1 PUSH4 0xEBDA4396 EQ PUSH2 0xA3C JUMPI DUP1 PUSH4 0xF4A0A528 EQ PUSH2 0xA5C JUMPI DUP1 PUSH4 0xFD48AC83 EQ PUSH2 0xA7C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH2 0x2E7 CALLDATASIZE PUSH1 0x4 PUSH2 0x365D JUMP JUMPDEST PUSH2 0xA9C JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x30E PUSH2 0x309 CALLDATASIZE PUSH1 0x4 PUSH2 0x3699 JUMP JUMPDEST PUSH2 0xAD0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x31B SWAP2 SWAP1 PUSH2 0x36C4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x330 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x344 PUSH2 0x33F CALLDATASIZE PUSH1 0x4 PUSH2 0x365D JUMP JUMPDEST PUSH2 0xAE1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x31B SWAP2 SWAP1 PUSH2 0x36F2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x35D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x366 PUSH2 0xB0B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x31B SWAP2 SWAP1 PUSH2 0x376A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x37F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x388 PUSH2 0xB9D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x31B SWAP2 SWAP1 PUSH2 0x37D8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3AB PUSH1 0x1A SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x31B SWAP2 SWAP1 PUSH2 0x37EF JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD PUSH2 0x344 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x11 SLOAD PUSH2 0x3AB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3AB PUSH1 0x16 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x40F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3AB PUSH1 0x17 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x3AB PUSH2 0x427 CALLDATASIZE PUSH1 0x4 PUSH2 0x385B JUMP JUMPDEST PUSH2 0xBFE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x438 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3AB PUSH2 0x447 CALLDATASIZE PUSH1 0x4 PUSH2 0x38F0 JUMP JUMPDEST PUSH2 0xD36 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x458 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH2 0x467 CALLDATASIZE PUSH1 0x4 PUSH2 0x392D JUMP JUMPDEST PUSH2 0xD49 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x478 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3AB PUSH2 0x487 CALLDATASIZE PUSH1 0x4 PUSH2 0x365D JUMP JUMPDEST PUSH2 0xDA6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x498 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH2 0x4A7 CALLDATASIZE PUSH1 0x4 PUSH2 0x392D JUMP JUMPDEST PUSH2 0xDBB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH2 0x4C7 CALLDATASIZE PUSH1 0x4 PUSH2 0x365D JUMP JUMPDEST PUSH2 0xE8B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH2 0x4E7 CALLDATASIZE PUSH1 0x4 PUSH2 0x394E JUMP JUMPDEST PUSH2 0xEFE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3AB PUSH2 0x507 CALLDATASIZE PUSH1 0x4 PUSH2 0x38F0 JUMP JUMPDEST PUSH2 0xF1F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x518 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH2 0x527 CALLDATASIZE PUSH1 0x4 PUSH2 0x394E JUMP JUMPDEST PUSH2 0xF71 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x538 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x8 SLOAD PUSH2 0x344 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x558 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH2 0x567 CALLDATASIZE PUSH1 0x4 PUSH2 0x392D JUMP JUMPDEST PUSH2 0xFA7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x578 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH2 0x587 CALLDATASIZE PUSH1 0x4 PUSH2 0x365D JUMP JUMPDEST PUSH2 0x1004 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x598 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH2 0x5A7 CALLDATASIZE PUSH1 0x4 PUSH2 0x392D JUMP JUMPDEST PUSH2 0x1077 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3AB PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x44C2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH2 0x5E9 CALLDATASIZE PUSH1 0x4 PUSH2 0x365D JUMP JUMPDEST PUSH2 0x10D4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH2 0x609 CALLDATASIZE PUSH1 0x4 PUSH2 0x392D JUMP JUMPDEST PUSH2 0x1106 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x61A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH2 0x629 CALLDATASIZE PUSH1 0x4 PUSH2 0x365D JUMP JUMPDEST PUSH2 0x1163 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x63A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x30E PUSH2 0x649 CALLDATASIZE PUSH1 0x4 PUSH2 0x365D JUMP JUMPDEST PUSH2 0x11D6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x65A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3AB PUSH2 0x669 CALLDATASIZE PUSH1 0x4 PUSH2 0x365D JUMP JUMPDEST PUSH2 0x11E1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x67A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x344 PUSH2 0x689 CALLDATASIZE PUSH1 0x4 PUSH2 0x365D JUMP JUMPDEST PUSH2 0x122F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x69A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3AB PUSH1 0x15 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3AB PUSH2 0x6BF CALLDATASIZE PUSH1 0x4 PUSH2 0x392D JUMP JUMPDEST PUSH2 0x1264 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3AB PUSH2 0x6DF CALLDATASIZE PUSH1 0x4 PUSH2 0x392D JUMP JUMPDEST PUSH2 0x12A8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x6F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH2 0x6FF CALLDATASIZE PUSH1 0x4 PUSH2 0x392D JUMP JUMPDEST PUSH2 0x13A8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x710 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3AB PUSH1 0x18 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x726 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x14 SLOAD PUSH2 0x73A SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x31B SWAP2 SWAP1 PUSH2 0x39B6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x753 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x30E PUSH2 0x762 CALLDATASIZE PUSH1 0x4 PUSH2 0x392D JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x3AB PUSH2 0x785 CALLDATASIZE PUSH1 0x4 PUSH2 0x39C4 JUMP JUMPDEST PUSH2 0x1405 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x796 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH2 0x7A5 CALLDATASIZE PUSH1 0x4 PUSH2 0x365D JUMP JUMPDEST PUSH2 0x1490 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x7BF PUSH2 0x1503 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x31B SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3A57 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH2 0x7ED CALLDATASIZE PUSH1 0x4 PUSH2 0x392D JUMP JUMPDEST PUSH2 0x158C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3AB PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x814 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x30E PUSH2 0x823 CALLDATASIZE PUSH1 0x4 PUSH2 0x392D JUMP JUMPDEST PUSH1 0x1E PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x844 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x30E PUSH2 0x853 CALLDATASIZE PUSH1 0x4 PUSH2 0x394E JUMP JUMPDEST PUSH2 0x1628 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x864 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH2 0x873 CALLDATASIZE PUSH1 0x4 PUSH2 0x392D JUMP JUMPDEST PUSH2 0x1651 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x884 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x366 PUSH2 0x17BE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x899 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3 SLOAD PUSH2 0x344 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x7 SLOAD PUSH2 0x344 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3AB PUSH1 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH2 0x8FD CALLDATASIZE PUSH1 0x4 PUSH2 0x365D JUMP JUMPDEST PUSH2 0x17CD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x90E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3AB PUSH1 0x19 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x924 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3AB PUSH2 0x933 CALLDATASIZE PUSH1 0x4 PUSH2 0x365D JUMP JUMPDEST PUSH2 0x1801 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x944 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 SLOAD PUSH2 0x344 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x964 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH2 0x973 CALLDATASIZE PUSH1 0x4 PUSH2 0x392D JUMP JUMPDEST PUSH2 0x18B9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x984 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x366 PUSH2 0x993 CALLDATASIZE PUSH1 0x4 PUSH2 0x365D JUMP JUMPDEST PUSH2 0x1965 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH2 0x9B3 CALLDATASIZE PUSH1 0x4 PUSH2 0x392D JUMP JUMPDEST PUSH2 0x19CB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH2 0x9D3 CALLDATASIZE PUSH1 0x4 PUSH2 0x394E JUMP JUMPDEST PUSH2 0x1A99 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3AB PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH2 0xA09 CALLDATASIZE PUSH1 0x4 PUSH2 0x392D JUMP JUMPDEST PUSH2 0x1AB5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA1A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA2E PUSH2 0xA29 CALLDATASIZE PUSH1 0x4 PUSH2 0x392D JUMP JUMPDEST PUSH2 0x1B12 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x31B SWAP3 SWAP2 SWAP1 PUSH2 0x3AC6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA48 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 SLOAD PUSH2 0x344 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA68 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH2 0xA77 CALLDATASIZE PUSH1 0x4 PUSH2 0x365D JUMP JUMPDEST PUSH2 0x1B34 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2EC PUSH2 0xA97 CALLDATASIZE PUSH1 0x4 PUSH2 0x365D JUMP JUMPDEST PUSH2 0x1BA7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAA7 DUP2 PUSH2 0x1C54 JUMP JUMPDEST PUSH1 0x9 SLOAD DUP3 EQ ISZERO PUSH2 0xACA JUMPI PUSH1 0x40 MLOAD PUSH4 0xC23F6CCB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x9 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0xADB DUP3 PUSH2 0x1C5E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x6 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0xAF1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0xB DUP1 SLOAD PUSH2 0xB1A SWAP1 PUSH2 0x3AF7 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xB46 SWAP1 PUSH2 0x3AF7 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xB93 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xB68 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xB93 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xB76 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x6 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0xB93 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xBD7 JUMPI POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC08 PUSH2 0x1C83 JUMP JUMPDEST PUSH1 0x14 SLOAD PUSH1 0x40 MLOAD PUSH4 0x31A9108F PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x6352211E SWAP1 PUSH2 0xC39 SWAP1 DUP11 SWAP1 PUSH1 0x4 ADD PUSH2 0x37EF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC65 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC89 SWAP2 SWAP1 PUSH2 0x3B2F JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0xCC0 JUMPI CALLER JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x60296C7 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP2 SWAP1 PUSH2 0x36F2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xCDA DUP10 DUP4 PUSH2 0xCD2 DUP12 DUP12 DUP12 PUSH2 0x1CAD JUMP JUMPDEST DUP11 DUP10 DUP10 PUSH2 0x1D0C JUMP JUMPDEST SWAP1 POP PUSH32 0xDC7A913FB88EF84B4EDAAE2C1CCC524475744905088D5C1362BAB12C676F9E97 DUP2 DUP10 DUP10 DUP10 DUP14 PUSH1 0x15 SLOAD PUSH1 0x40 MLOAD PUSH2 0xD17 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3B50 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 SWAP2 POP POP PUSH2 0xD2C PUSH1 0x1 PUSH1 0x1F SSTORE JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD42 DUP4 DUP4 PUSH2 0x1D9D JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD54 DUP2 PUSH2 0x1C54 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0xD83 JUMPI PUSH1 0x40 MLOAD PUSH4 0xC23F6CCB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH1 0x1 ADD SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xDC6 PUSH1 0x0 CALLER PUSH2 0x1628 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0xDE8 JUMPI POP PUSH2 0xDE6 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x44C2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER PUSH2 0x1628 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0xE06 JUMPI PUSH1 0x40 MLOAD PUSH4 0x26F0F481 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xE2D JUMPI PUSH1 0x40 MLOAD PUSH4 0xD92E233D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1E PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xE67 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF411C327 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1E PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xE96 PUSH1 0x0 CALLER PUSH2 0x1628 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0xEB8 JUMPI POP PUSH2 0xEB6 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x44C2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER PUSH2 0x1628 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0xED6 JUMPI PUSH1 0x40 MLOAD PUSH4 0x26F0F481 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x17 SLOAD EQ ISZERO PUSH2 0xEF9 JUMPI PUSH1 0x40 MLOAD PUSH4 0xC23F6CCB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x17 SSTORE JUMP JUMPDEST PUSH2 0xF07 DUP3 PUSH2 0xDA6 JUMP JUMPDEST PUSH2 0xF10 DUP2 PUSH2 0x1C54 JUMP JUMPDEST PUSH2 0xF1A DUP4 DUP4 PUSH2 0x1E0A JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF2A DUP4 PUSH2 0x1264 JUMP JUMPDEST DUP3 LT PUSH2 0xF48 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP1 PUSH2 0x3BE7 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND CALLER EQ PUSH2 0xF99 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP1 PUSH2 0x3C43 JUMP JUMPDEST PUSH2 0xFA3 DUP3 DUP3 PUSH2 0x1E8E JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFB2 DUP2 PUSH2 0x1C54 JUMP JUMPDEST PUSH1 0x14 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0xFE1 JUMPI PUSH1 0x40 MLOAD PUSH4 0xC23F6CCB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x14 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x100F PUSH1 0x0 CALLER PUSH2 0x1628 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x1031 JUMPI POP PUSH2 0x102F PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x44C2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER PUSH2 0x1628 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x104F JUMPI PUSH1 0x40 MLOAD PUSH4 0x26F0F481 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x18 SLOAD EQ ISZERO PUSH2 0x1072 JUMPI PUSH1 0x40 MLOAD PUSH4 0xC23F6CCB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x18 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1082 DUP2 PUSH2 0x1C54 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x10B1 JUMPI PUSH1 0x40 MLOAD PUSH4 0xC23F6CCB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x10DE CALLER DUP3 PUSH2 0x1EF3 JUMP JUMPDEST PUSH2 0x10FA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP1 PUSH2 0x3C8A JUMP JUMPDEST PUSH2 0x1103 DUP2 PUSH2 0x1F16 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1111 DUP2 PUSH2 0x1C54 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x1140 JUMPI PUSH1 0x40 MLOAD PUSH4 0xC23F6CCB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x116E PUSH1 0x0 CALLER PUSH2 0x1628 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x1190 JUMPI POP PUSH2 0x118E PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x44C2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER PUSH2 0x1628 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x11AE JUMPI PUSH1 0x40 MLOAD PUSH4 0x26F0F481 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x16 SLOAD EQ ISZERO PUSH2 0x11D1 JUMPI PUSH1 0x40 MLOAD PUSH4 0xC23F6CCB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x16 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0xADB DUP3 PUSH2 0x1FB0 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11EC PUSH1 0x11 SLOAD SWAP1 JUMP JUMPDEST DUP3 LT PUSH2 0x120A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP1 PUSH2 0x3CE0 JUMP JUMPDEST PUSH1 0x11 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x121D JUMPI PUSH2 0x121D PUSH2 0x3CF0 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0xADB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP1 PUSH2 0x3D32 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x128C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP1 PUSH2 0x3D85 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x15 SLOAD PUSH1 0x0 EQ DUP1 ISZERO PUSH2 0x12BC JUMPI POP PUSH1 0x16 SLOAD ISZERO JUMPDEST ISZERO PUSH2 0x12C9 JUMPI POP PUSH1 0x0 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ DUP1 ISZERO PUSH2 0x12FE JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST DUP1 ISZERO PUSH2 0x130C JUMPI POP PUSH1 0x0 PUSH1 0x16 SLOAD GT JUMPDEST ISZERO PUSH2 0x1319 JUMPI POP POP PUSH1 0x16 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ DUP1 ISZERO PUSH2 0x134E JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST ISZERO PUSH2 0x135B JUMPI POP POP PUSH1 0x15 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1388 JUMPI PUSH2 0xADB DUP3 PUSH1 0x15 SLOAD PUSH2 0x1FCD JUMP JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH4 0xAC29AB7 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP2 SWAP1 PUSH2 0x36F2 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13B3 DUP2 PUSH2 0x1C54 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x13E2 JUMPI PUSH1 0x40 MLOAD PUSH4 0xC23F6CCB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x140F PUSH2 0x1C83 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND CALLER EQ PUSH2 0x1425 JUMPI CALLER PUSH2 0xC9D JUMP JUMPDEST PUSH1 0x0 PUSH2 0x143F DUP9 DUP9 PUSH2 0x1437 DUP11 DUP11 DUP11 PUSH2 0x2160 JUMP JUMPDEST DUP10 DUP9 DUP9 PUSH2 0x1D0C JUMP JUMPDEST SWAP1 POP PUSH32 0x7650948236619E679E44BF502D527EC950D1D58336E6BABF229F483C57D04672 DUP2 DUP9 DUP9 DUP9 DUP13 PUSH1 0x15 SLOAD PUSH1 0x40 MLOAD PUSH2 0x147C SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3D95 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 SWAP1 POP PUSH2 0xD2C PUSH1 0x1 PUSH1 0x1F SSTORE JUMP JUMPDEST PUSH2 0x149B PUSH1 0x0 CALLER PUSH2 0x1628 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x14BD JUMPI POP PUSH2 0x14BB PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x44C2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER PUSH2 0x1628 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x14DB JUMPI PUSH1 0x40 MLOAD PUSH4 0x26F0F481 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1A SLOAD EQ ISZERO PUSH2 0x14FE JUMPI PUSH1 0x40 MLOAD PUSH4 0xC23F6CCB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1A SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 DUP3 DUP1 DUP1 DUP4 PUSH2 0x1537 PUSH32 0x0 PUSH1 0x1B PUSH2 0x219C JUMP JUMPDEST PUSH2 0x1562 PUSH32 0x0 PUSH1 0x1C PUSH2 0x219C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0xF PUSH1 0xF8 SHL SWAP12 SWAP4 SWAP11 POP SWAP2 SWAP9 POP CHAINID SWAP8 POP ADDRESS SWAP7 POP SWAP5 POP SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH2 0x1597 PUSH1 0x0 CALLER PUSH2 0x1628 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x15B9 JUMPI POP PUSH2 0x15B7 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x44C2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER PUSH2 0x1628 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x15D7 JUMPI PUSH1 0x40 MLOAD PUSH4 0x26F0F481 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x1606 JUMPI PUSH1 0x40 MLOAD PUSH4 0xC23F6CCB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x165C DUP2 PUSH2 0x1C54 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1697 JUMPI DUP2 PUSH1 0x40 MLOAD PUSH4 0x18317BD5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP2 SWAP1 PUSH2 0x36F2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMPDEST PUSH1 0x6 SLOAD DUP2 LT ISZERO PUSH2 0xF1A JUMPI DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x6 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x16DF JUMPI PUSH2 0x16DF PUSH2 0x3CF0 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO PUSH2 0x17AC JUMPI PUSH1 0x6 DUP1 SLOAD PUSH2 0x170A SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x3DDC JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x171A JUMPI PUSH2 0x171A PUSH2 0x3CF0 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 DUP4 SWAP1 DUP2 LT PUSH2 0x1746 JUMPI PUSH2 0x1746 PUSH2 0x3CF0 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB MUL NOT AND SWAP1 DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND MUL OR SWAP1 SSTORE POP PUSH1 0x6 DUP1 SLOAD DUP1 PUSH2 0x1785 JUMPI PUSH2 0x1785 PUSH2 0x3DF3 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 DUP2 ADD PUSH1 0x0 NOT SWAP1 DUP2 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE ADD SWAP1 SSTORE POP POP POP JUMP JUMPDEST DUP1 PUSH2 0x17B6 DUP2 PUSH2 0x3E09 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x16B8 JUMP JUMPDEST PUSH1 0x60 PUSH1 0xC DUP1 SLOAD PUSH2 0xB1A SWAP1 PUSH2 0x3AF7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17D8 DUP2 PUSH2 0x1C54 JUMP JUMPDEST PUSH1 0xA SLOAD DUP3 EQ ISZERO PUSH2 0x17FB JUMPI PUSH1 0x40 MLOAD PUSH4 0xC23F6CCB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0xA SSTORE JUMP JUMPDEST PUSH1 0x14 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x182D JUMPI PUSH1 0x40 MLOAD PUSH4 0xD7FE67B PUSH1 0xE4 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1838 DUP4 PUSH2 0x122F JUMP JUMPDEST PUSH1 0x14 SLOAD PUSH1 0x40 MLOAD PUSH4 0x294CDF0D PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x294CDF0D SWAP1 PUSH2 0x1869 SWAP1 DUP5 SWAP1 PUSH1 0x4 ADD PUSH2 0x36F2 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1881 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1895 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD42 SWAP2 SWAP1 PUSH2 0x3E2F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x18C4 DUP2 PUSH2 0x1C54 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x18FE JUMPI PUSH1 0x40 MLOAD PUSH4 0xF411C327 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x6 DUP1 SLOAD SWAP2 DUP3 ADD DUP2 SSTORE SWAP1 SWAP2 MSTORE PUSH32 0xF652222313E28459528D920B65115C16C04F3EFC82AAEDC97BE59F3F377C0D3F ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1970 DUP3 PUSH2 0x2240 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x197A PUSH2 0x2265 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x199A JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0xD42 JUMP JUMPDEST DUP1 PUSH2 0x19A4 DUP5 PUSH2 0x2274 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x19B5 SWAP3 SWAP2 SWAP1 PUSH2 0x3E72 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x19D6 PUSH1 0x0 CALLER PUSH2 0x1628 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x19F8 JUMPI POP PUSH2 0x19F6 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x44C2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER PUSH2 0x1628 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x1A16 JUMPI PUSH1 0x40 MLOAD PUSH4 0x26F0F481 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1A3D JUMPI PUSH1 0x40 MLOAD PUSH4 0xD92E233D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1E PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1A78 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH4 0x24B1F805 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP2 SWAP1 PUSH2 0x36F2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1E PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x1AA2 DUP3 PUSH2 0xDA6 JUMP JUMPDEST PUSH2 0x1AAB DUP2 PUSH2 0x1C54 JUMP JUMPDEST PUSH2 0xF1A DUP4 DUP4 PUSH2 0x1E8E JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AC0 DUP2 PUSH2 0x1C54 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x1AEF JUMPI PUSH1 0x40 MLOAD PUSH4 0xC23F6CCB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x2 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1B1E DUP4 PUSH2 0x12A8 JUMP JUMPDEST SWAP2 POP DUP2 PUSH2 0x1B2B DUP5 DUP5 PUSH2 0x1D9D JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH2 0x1B3F PUSH1 0x0 CALLER PUSH2 0x1628 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x1B61 JUMPI POP PUSH2 0x1B5F PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x44C2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER PUSH2 0x1628 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x1B7F JUMPI PUSH1 0x40 MLOAD PUSH4 0x26F0F481 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x15 SLOAD EQ ISZERO PUSH2 0x1BA2 JUMPI PUSH1 0x40 MLOAD PUSH4 0xC23F6CCB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x15 SSTORE JUMP JUMPDEST PUSH2 0x1BB2 PUSH1 0x0 CALLER PUSH2 0x1628 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x1BD4 JUMPI POP PUSH2 0x1BD2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x44C2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER PUSH2 0x1628 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x1BF2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x26F0F481 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x19 SLOAD EQ ISZERO PUSH2 0x1C15 JUMPI PUSH1 0x40 MLOAD PUSH4 0xC23F6CCB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x19 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP4 MLOAD LT ISZERO PUSH2 0x1C36 JUMPI PUSH2 0x1C2F DUP4 PUSH2 0x2310 JUMP JUMPDEST SWAP1 POP PUSH2 0xADB JUMP JUMPDEST DUP3 DUP3 DUP2 MLOAD PUSH2 0x1C47 SWAP3 PUSH1 0x20 ADD SWAP1 PUSH2 0x35AC JUMP JUMPDEST POP PUSH1 0xFF SWAP1 POP PUSH2 0xADB JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x1103 DUP2 CALLER PUSH2 0x234E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x780E9D63 PUSH1 0xE0 SHL EQ DUP1 PUSH2 0xADB JUMPI POP PUSH2 0xADB DUP3 PUSH2 0x23A7 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1F SLOAD EQ ISZERO PUSH2 0x1CA6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP1 PUSH2 0x3ED4 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1F SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D04 PUSH32 0x94B1435871ABAE349525E55CB9A064AD0EAC0FAB877FEE876ED90F72FCF33CCE DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1CE9 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3EE4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0x23E7 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D50 DUP6 DUP5 DUP5 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP DUP10 SWAP3 POP PUSH2 0x2414 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1D5C DUP10 PUSH2 0x1B12 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x1D6B DUP10 DUP4 DUP4 PUSH2 0x2495 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D76 PUSH1 0x1D SLOAD SWAP1 JUMP JUMPDEST SWAP1 POP PUSH2 0x1D86 PUSH1 0x1D DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x1D90 DUP10 DUP3 PUSH2 0x284C JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x0 SWAP1 DUP2 SWAP1 ISZERO PUSH2 0x1DD8 JUMPI PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 0x1DC9 JUMPI POP PUSH1 0x9 SLOAD PUSH2 0x1DD8 JUMP JUMPDEST PUSH2 0x1DD5 DUP5 PUSH1 0x9 SLOAD PUSH2 0x1FCD JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0xA SLOAD ISZERO PUSH2 0xD42 JUMPI PUSH2 0x1D04 PUSH2 0x1E03 PUSH1 0x64 PUSH2 0x1DFD PUSH1 0xA SLOAD DUP8 PUSH2 0x2928 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 PUSH2 0x2934 JUMP JUMPDEST DUP3 SWAP1 PUSH2 0x2940 JUMP JUMPDEST PUSH2 0x1E14 DUP3 DUP3 PUSH2 0x1628 JUMP JUMPDEST PUSH2 0xFA3 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0x1E4A CALLER SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH2 0x1E98 DUP3 DUP3 PUSH2 0x1628 JUMP JUMPDEST ISZERO PUSH2 0xFA3 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE MLOAD CALLER SWAP3 DUP6 SWAP2 PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP2 SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x1EFF DUP4 PUSH2 0x122F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND SWAP2 AND EQ SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F21 DUP3 PUSH2 0x122F JUMP JUMPDEST SWAP1 POP PUSH2 0x1F2F DUP2 PUSH1 0x0 DUP5 PUSH2 0x294C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x1F58 SWAP1 DUP5 SWAP1 PUSH2 0x3DDC JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE MLOAD DUP4 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP2 PUSH32 0xCC16F5DBB4873280815C1EE09DBD06736CFFCC184412CF7A71A0FDB75D397CA5 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x1FE9 JUMPI POP PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO JUMPDEST ISZERO PUSH2 0x2007 JUMPI PUSH1 0x40 MLOAD PUSH4 0xFCA2174F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x2020 JUMPI POP PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO JUMPDEST ISZERO PUSH2 0x203E JUMPI PUSH1 0x40 MLOAD PUSH4 0xFCA2174F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x2057 JUMPI POP PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO JUMPDEST ISZERO PUSH2 0x2075 JUMPI PUSH1 0x40 MLOAD PUSH4 0xFCA2174F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x208E JUMPI POP PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO JUMPDEST ISZERO PUSH2 0x20AC JUMPI PUSH1 0x40 MLOAD PUSH4 0xFCA2174F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO DUP1 PUSH2 0x20E1 JUMPI POP PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO PUSH2 0x2101 JUMPI DUP4 PUSH1 0x40 MLOAD PUSH4 0x961C9A4F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP2 SWAP1 PUSH2 0x36F2 JUMP JUMPDEST DUP3 PUSH2 0x210F JUMPI PUSH1 0x0 SWAP2 POP PUSH2 0x2159 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x2141 JUMPI PUSH1 0x2 SLOAD PUSH1 0x3 SLOAD PUSH2 0x213A SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND DUP6 PUSH2 0x2957 JUMP JUMPDEST SWAP2 POP PUSH2 0x2159 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH2 0x213A SWAP1 DUP6 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 PUSH2 0x2957 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D04 PUSH32 0x885D61CD569C3C85A110715A0D188C45590CF3F8A77E71714F4F0211EAD7AC8C DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1CE9 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x3F22 JUMP JUMPDEST PUSH1 0x60 PUSH1 0xFF DUP4 EQ PUSH2 0x21AF JUMPI PUSH2 0x1C2F DUP4 PUSH2 0x2A15 JUMP JUMPDEST DUP2 DUP1 SLOAD PUSH2 0x21BB SWAP1 PUSH2 0x3AF7 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x21E7 SWAP1 PUSH2 0x3AF7 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2234 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2209 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2234 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2217 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH2 0xADB JUMP JUMPDEST PUSH2 0x2249 DUP2 PUSH2 0x1FB0 JUMP JUMPDEST PUSH2 0x1103 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP1 PUSH2 0x3D32 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x13 DUP1 SLOAD PUSH2 0xB1A SWAP1 PUSH2 0x3AF7 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x2281 DUP4 PUSH2 0x2A54 JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x22A0 JUMPI PUSH2 0x22A0 PUSH2 0x3DB0 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x22CA JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH1 0x0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0x2303 JUMPI PUSH2 0x2308 JUMP JUMPDEST PUSH2 0x22D4 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 SWAP1 POP PUSH1 0x1F DUP2 MLOAD GT ISZERO PUSH2 0x233B JUMPI DUP3 PUSH1 0x40 MLOAD PUSH4 0x305A27A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP2 SWAP1 PUSH2 0x376A JUMP JUMPDEST DUP1 MLOAD PUSH2 0x2346 DUP3 PUSH2 0x3F5D JUMP JUMPDEST OR SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x2358 DUP3 DUP3 PUSH2 0x1628 JUMP JUMPDEST PUSH2 0xFA3 JUMPI PUSH2 0x2365 DUP2 PUSH2 0x2B2A JUMP JUMPDEST PUSH2 0x2370 DUP4 PUSH1 0x20 PUSH2 0x2B3C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2381 SWAP3 SWAP2 SWAP1 PUSH2 0x3F9C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH2 0xCB7 SWAP2 PUSH1 0x4 ADD PUSH2 0x376A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x13F2A32F PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x23D8 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0xADB JUMPI POP PUSH2 0xADB DUP3 PUSH2 0x2CA7 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xADB PUSH2 0x23F4 PUSH2 0x2CDC JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH2 0x1901 PUSH1 0xF0 SHL DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2420 DUP5 DUP5 PUSH2 0x2D6C JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x2454 JUMPI PUSH1 0x40 MLOAD PUSH4 0x8BAA579F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1E PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x248F JUMPI DUP1 PUSH1 0x40 MLOAD PUSH4 0x4A0BFEC1 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP2 SWAP1 PUSH2 0x36F2 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x249F DUP3 DUP3 PUSH2 0x2940 JUMP JUMPDEST PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x24B8 JUMPI POP PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO JUMPDEST ISZERO PUSH2 0x24D6 JUMPI PUSH1 0x40 MLOAD PUSH4 0xFCA2174F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x24EF JUMPI POP PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO JUMPDEST ISZERO PUSH2 0x250D JUMPI PUSH1 0x40 MLOAD PUSH4 0xFCA2174F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x2526 JUMPI POP PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO JUMPDEST ISZERO PUSH2 0x2544 JUMPI PUSH1 0x40 MLOAD PUSH4 0xFCA2174F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 GT DUP1 ISZERO PUSH2 0x255D JUMPI POP PUSH1 0x7 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO JUMPDEST ISZERO PUSH2 0x257B JUMPI PUSH1 0x40 MLOAD PUSH4 0xFCA2174F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 ISZERO DUP1 ISZERO PUSH2 0x2587 JUMPI POP DUP2 ISZERO JUMPDEST ISZERO PUSH2 0x2591 JUMPI PUSH2 0x248F JUMP JUMPDEST PUSH1 0x0 DUP3 GT DUP1 ISZERO PUSH2 0x25AA JUMPI POP PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO JUMPDEST ISZERO PUSH2 0x25C8 JUMPI PUSH1 0x40 MLOAD PUSH4 0x910AF6F5 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x2603 JUMPI DUP4 PUSH1 0x40 MLOAD PUSH4 0xAC29AB7 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP2 SWAP1 PUSH2 0x36F2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x2808 JUMPI PUSH2 0x261B DUP4 DUP4 PUSH2 0x2940 JUMP JUMPDEST CALLVALUE LT ISZERO PUSH2 0x2646 JUMPI PUSH2 0x262C DUP4 DUP4 PUSH2 0x2940 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x91A6D0F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP2 SWAP1 PUSH2 0x37EF JUMP JUMPDEST DUP3 ISZERO PUSH2 0x26D0 JUMPI PUSH1 0x7 SLOAD PUSH1 0x40 MLOAD PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP6 SWAP1 PUSH2 0x266A SWAP1 PUSH2 0x3FEE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x26A7 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x26AC JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x26CE JUMPI PUSH1 0x40 MLOAD PUSH4 0x12171D83 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMPDEST DUP2 ISZERO PUSH2 0x275A JUMPI PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP5 SWAP1 PUSH2 0x26F4 SWAP1 PUSH2 0x3FEE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2731 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2736 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x2758 JUMPI PUSH1 0x40 MLOAD PUSH4 0x12171D83 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMPDEST PUSH2 0x2764 DUP4 DUP4 PUSH2 0x2940 JUMP JUMPDEST CALLVALUE GT ISZERO PUSH2 0x2803 JUMPI PUSH1 0x0 PUSH2 0x2781 PUSH2 0x277A DUP6 DUP6 PUSH2 0x2940 JUMP JUMPDEST CALLVALUE SWAP1 PUSH2 0x2D88 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 MLOAD PUSH2 0x279C SWAP1 PUSH2 0x3FEE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x27D9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x27DE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x2800 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3C312751 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMPDEST PUSH2 0x248F JUMP JUMPDEST DUP3 ISZERO PUSH2 0x282A JUMPI PUSH1 0x7 SLOAD PUSH2 0x282A SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND SWAP2 CALLER SWAP2 AND DUP7 PUSH2 0x2D94 JUMP JUMPDEST DUP2 ISZERO PUSH2 0x248F JUMPI PUSH1 0x8 SLOAD PUSH2 0x248F SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND SWAP2 CALLER SWAP2 AND DUP6 PUSH2 0x2D94 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x2872 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP1 PUSH2 0x402A JUMP JUMPDEST PUSH2 0x287B DUP2 PUSH2 0x1FB0 JUMP JUMPDEST ISZERO PUSH2 0x2898 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP1 PUSH2 0x406A JUMP JUMPDEST PUSH2 0x28A4 PUSH1 0x0 DUP4 DUP4 PUSH2 0x294C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP3 SWAP1 PUSH2 0x28CD SWAP1 DUP5 SWAP1 PUSH2 0x407A JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD DUP4 SWAP3 PUSH32 0xF6798A560793A54C3BCFE86A93CDE1E73087D944C0EA20544137D4121396885 SWAP2 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD42 DUP3 DUP5 PUSH2 0x4092 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD42 DUP3 DUP5 PUSH2 0x40B1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD42 DUP3 DUP5 PUSH2 0x407A JUMP JUMPDEST PUSH2 0xF1A DUP4 DUP4 DUP4 PUSH2 0x2DEC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP1 PUSH2 0x2966 DUP7 DUP7 PUSH2 0x2EA4 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH4 0x7C0329D PUSH1 0xE2 SHL DUP2 MSTORE SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x1F00CA74 SWAP1 PUSH2 0x2999 SWAP1 DUP8 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x40C5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x29B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x29C5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x29ED SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x41D0 JUMP JUMPDEST SWAP2 POP DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2A02 JUMPI PUSH2 0x2A02 PUSH2 0x3CF0 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x2A22 DUP4 PUSH2 0x3036 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP3 POP PUSH1 0x0 SWAP2 SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP POP POP SWAP2 DUP3 MSTORE POP PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0x2A93 JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH10 0x4EE2D6D415B85ACEF81 PUSH1 0x20 SHL DUP4 LT PUSH2 0x2ABD JUMPI PUSH10 0x4EE2D6D415B85ACEF81 PUSH1 0x20 SHL DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x2ADB JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x2AF3 JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x2B07 JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x2B19 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0xADB JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xADB PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x14 JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x2B4B DUP4 PUSH1 0x2 PUSH2 0x4092 JUMP JUMPDEST PUSH2 0x2B56 SWAP1 PUSH1 0x2 PUSH2 0x407A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x2B6D JUMPI PUSH2 0x2B6D PUSH2 0x3DB0 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x2B97 JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x3 PUSH1 0xFC SHL DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2BB2 JUMPI PUSH2 0x2BB2 PUSH2 0x3CF0 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0xF PUSH1 0xFB SHL DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x2BE1 JUMPI PUSH2 0x2BE1 PUSH2 0x3CF0 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x0 PUSH2 0x2C05 DUP5 PUSH1 0x2 PUSH2 0x4092 JUMP JUMPDEST PUSH2 0x2C10 SWAP1 PUSH1 0x1 PUSH2 0x407A JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x1 DUP2 GT ISZERO PUSH2 0x2C88 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL DUP6 PUSH1 0xF AND PUSH1 0x10 DUP2 LT PUSH2 0x2C44 JUMPI PUSH2 0x2C44 PUSH2 0x3CF0 JUMP JUMPDEST BYTE PUSH1 0xF8 SHL DUP3 DUP3 DUP2 MLOAD DUP2 LT PUSH2 0x2C5A JUMPI PUSH2 0x2C5A PUSH2 0x3CF0 JUMP JUMPDEST PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT AND SWAP1 DUP2 PUSH1 0x0 BYTE SWAP1 MSTORE8 POP PUSH1 0x4 SWAP5 SWAP1 SWAP5 SHR SWAP4 PUSH2 0x2C81 DUP2 PUSH2 0x420A JUMP JUMPDEST SWAP1 POP PUSH2 0x2C13 JUMP JUMPDEST POP DUP4 ISZERO PUSH2 0xD42 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP1 PUSH2 0x4253 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x7965DB0B PUSH1 0xE0 SHL EQ DUP1 PUSH2 0xADB JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ PUSH2 0xADB JUMP JUMPDEST PUSH1 0x0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ DUP1 ISZERO PUSH2 0x2D35 JUMPI POP PUSH32 0x0 CHAINID EQ JUMPDEST ISZERO PUSH2 0x2D5F JUMPI POP PUSH32 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x2D67 PUSH2 0x305E JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x2D7B DUP6 DUP6 PUSH2 0x30F4 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0x2308 DUP2 PUSH2 0x313A JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD42 DUP3 DUP5 PUSH2 0x3DDC JUMP JUMPDEST PUSH2 0x248F DUP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x2DB5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4263 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x31ED JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x2E47 JUMPI PUSH2 0x2E42 DUP2 PUSH1 0x11 DUP1 SLOAD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x12 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP3 SWAP1 SSTORE PUSH1 0x1 DUP3 ADD DUP4 SSTORE SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x31ECC21A745E3968A04E9570E4425BC18FA8019C68028196B546D1669C200C68 ADD SSTORE JUMP JUMPDEST PUSH2 0x2E6A JUMP JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x2E6A JUMPI PUSH2 0x2E6A DUP4 DUP3 PUSH2 0x327F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x2E81 JUMPI PUSH2 0xF1A DUP2 PUSH2 0x331C JUMP JUMPDEST DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xF1A JUMPI PUSH2 0xF1A DUP3 DUP3 PUSH2 0x33CB JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x60 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ DUP1 PUSH2 0x2ED0 JUMPI POP PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO PUSH2 0x2F9A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH1 0x2 DUP1 DUP3 MSTORE PUSH1 0x60 DUP3 ADD DUP4 MSTORE PUSH1 0x0 SWAP3 PUSH1 0x20 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP PUSH1 0x2 SLOAD SWAP1 SWAP2 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND SWAP2 AND EQ PUSH2 0x2F12 JUMPI DUP4 PUSH2 0x2F1F JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2F32 JUMPI PUSH2 0x2F32 PUSH2 0x3CF0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x20 SWAP2 DUP3 MUL SWAP3 SWAP1 SWAP3 ADD ADD MSTORE PUSH1 0x2 SLOAD DUP5 DUP3 AND SWAP2 AND EQ PUSH2 0x2F5B JUMPI DUP3 PUSH2 0x2F68 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST DUP2 PUSH1 0x1 DUP2 MLOAD DUP2 LT PUSH2 0x2F7B JUMPI PUSH2 0x2F7B PUSH2 0x3CF0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x20 SWAP3 DUP4 MUL SWAP2 SWAP1 SWAP2 ADD SWAP1 SWAP2 ADD MSTORE SWAP1 POP PUSH2 0xADB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x3 DUP1 DUP3 MSTORE PUSH1 0x80 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x20 DUP3 ADD PUSH1 0x60 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP DUP4 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x2FD1 JUMPI PUSH2 0x2FD1 PUSH2 0x3CF0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x20 SWAP2 DUP3 MUL SWAP3 SWAP1 SWAP3 ADD ADD MSTORE PUSH1 0x2 SLOAD DUP3 MLOAD SWAP2 AND SWAP1 DUP3 SWAP1 PUSH1 0x1 SWAP1 DUP2 LT PUSH2 0x3002 JUMPI PUSH2 0x3002 PUSH2 0x3CF0 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE POP POP DUP3 DUP2 PUSH1 0x2 DUP2 MLOAD DUP2 LT PUSH2 0x2F7B JUMPI PUSH2 0x2F7B PUSH2 0x3CF0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xFF DUP3 AND PUSH1 0x1F DUP2 GT ISZERO PUSH2 0xADB JUMPI PUSH1 0x40 MLOAD PUSH4 0x2CD44AC3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH32 0x0 PUSH32 0x0 CHAINID ADDRESS PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x30D9 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x428B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD PUSH1 0x41 EQ ISZERO PUSH2 0x312B JUMPI PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x0 BYTE PUSH2 0x311F DUP8 DUP3 DUP6 DUP6 PUSH2 0x340F JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP POP PUSH2 0x3133 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP PUSH1 0x2 JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x314E JUMPI PUSH2 0x314E PUSH2 0x42CD JUMP JUMPDEST EQ ISZERO PUSH2 0x3157 JUMPI POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x316B JUMPI PUSH2 0x316B PUSH2 0x42CD JUMP JUMPDEST EQ ISZERO PUSH2 0x3189 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP1 PUSH2 0x4312 JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x319D JUMPI PUSH2 0x319D PUSH2 0x42CD JUMP JUMPDEST EQ ISZERO PUSH2 0x31BB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP1 PUSH2 0x4356 JUMP JUMPDEST PUSH1 0x3 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x31CF JUMPI PUSH2 0x31CF PUSH2 0x42CD JUMP JUMPDEST EQ ISZERO PUSH2 0x1103 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP1 PUSH2 0x43A5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3242 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x34BC SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 0x0 EQ DUP1 PUSH2 0x3263 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x3263 SWAP2 SWAP1 PUSH2 0x43C8 JUMP JUMPDEST PUSH2 0xF1A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP1 PUSH2 0x4430 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH2 0x328C DUP5 PUSH2 0x1264 JUMP JUMPDEST PUSH2 0x3296 SWAP2 SWAP1 PUSH2 0x3DDC JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 POP DUP1 DUP3 EQ PUSH2 0x32E9 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP6 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 SLOAD DUP5 DUP5 MSTORE DUP2 DUP5 KECCAK256 DUP2 SWAP1 SSTORE DUP4 MSTORE PUSH1 0x10 SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP2 SWAP1 SSTORE JUMPDEST POP PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x10 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 DUP5 SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND DUP4 MSTORE PUSH1 0xF DUP2 MSTORE DUP4 DUP4 KECCAK256 SWAP2 DUP4 MSTORE MSTORE SWAP1 DUP2 KECCAK256 SSTORE JUMP JUMPDEST PUSH1 0x11 SLOAD PUSH1 0x0 SWAP1 PUSH2 0x332E SWAP1 PUSH1 0x1 SWAP1 PUSH2 0x3DDC JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x12 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x11 DUP1 SLOAD SWAP4 SWAP5 POP SWAP1 SWAP3 DUP5 SWAP1 DUP2 LT PUSH2 0x3356 JUMPI PUSH2 0x3356 PUSH2 0x3CF0 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP DUP1 PUSH1 0x11 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x3377 JUMPI PUSH2 0x3377 PUSH2 0x3CF0 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 SWAP1 SWAP2 ADD SWAP3 SWAP1 SWAP3 SSTORE DUP3 DUP2 MSTORE PUSH1 0x12 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP5 SWAP1 SSTORE DUP6 DUP3 MSTORE DUP2 KECCAK256 SSTORE PUSH1 0x11 DUP1 SLOAD DUP1 PUSH2 0x33AF JUMPI PUSH2 0x33AF PUSH2 0x3DF3 JUMP JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x33D6 DUP4 PUSH2 0x1264 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xF PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP6 SWAP1 SSTORE SWAP4 DUP3 MSTORE PUSH1 0x10 SWAP1 MSTORE SWAP2 SWAP1 SWAP2 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH16 0xA2A8918CA85BAFE22016D0B997E4DF60 PUSH1 0x1 PUSH1 0xFF SHL SUB DUP4 GT ISZERO PUSH2 0x343C JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x3 PUSH2 0x34B3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP8 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x3461 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x4449 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3483 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x34AC JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x34B3 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1D04 DUP5 DUP5 PUSH1 0x0 DUP6 DUP6 PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x34E3 SWAP2 SWAP1 PUSH2 0x4471 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x3520 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3525 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x3536 DUP8 DUP4 DUP4 DUP8 PUSH2 0x3541 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x357D JUMPI DUP3 MLOAD PUSH2 0x3576 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x3576 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP1 PUSH2 0x44B1 JUMP JUMPDEST POP DUP2 PUSH2 0x1D04 JUMP JUMPDEST PUSH2 0x1D04 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x3592 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB7 SWAP2 SWAP1 PUSH2 0x376A JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x35B8 SWAP1 PUSH2 0x3AF7 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x35DA JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x3620 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x35F3 JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x3620 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x3620 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x3620 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x3605 JUMP JUMPDEST POP PUSH2 0x362C SWAP3 SWAP2 POP PUSH2 0x3630 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x362C JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x3631 JUMP JUMPDEST DUP1 JUMPDEST DUP2 EQ PUSH2 0x1103 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH2 0xADB DUP2 PUSH2 0x3645 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3672 JUMPI PUSH2 0x3672 PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1D04 DUP5 DUP5 PUSH2 0x3652 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH2 0x3647 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0xADB DUP2 PUSH2 0x367E JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x36AE JUMPI PUSH2 0x36AE PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1D04 DUP5 DUP5 PUSH2 0x368E JUMP JUMPDEST DUP1 ISZERO ISZERO JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0xADB DUP3 DUP5 PUSH2 0x36BA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xADB DUP3 PUSH2 0x36D2 JUMP JUMPDEST PUSH2 0x36BE DUP2 PUSH2 0x36DE JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0xADB DUP3 DUP5 PUSH2 0x36E9 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x371B JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x3703 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x248F JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3740 DUP3 MLOAD SWAP1 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP4 POP PUSH2 0x3757 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x3700 JUMP JUMPDEST PUSH2 0x3760 DUP2 PUSH2 0x372C JUMP JUMPDEST SWAP1 SWAP4 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xD42 DUP2 DUP5 PUSH2 0x3736 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3787 DUP4 DUP4 PUSH2 0x36E9 JUMP JUMPDEST POP POP PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3799 DUP3 MLOAD SWAP1 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 DUP4 ADD DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x37CD JUMPI DUP2 MLOAD PUSH2 0x37BC DUP9 DUP3 PUSH2 0x377B JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP4 ADD SWAP3 POP POP PUSH1 0x1 ADD PUSH2 0x37A8 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xD42 DUP2 DUP5 PUSH2 0x378F JUMP JUMPDEST DUP1 PUSH2 0x36BE JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0xADB DUP3 DUP5 PUSH2 0x37E9 JUMP JUMPDEST PUSH2 0x3647 DUP2 PUSH2 0x36DE JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0xADB DUP2 PUSH2 0x37FD JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x3826 JUMPI PUSH2 0x3826 PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x3840 JUMPI PUSH2 0x3840 PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x1 DUP3 MUL DUP4 ADD GT ISZERO PUSH2 0x3133 JUMPI PUSH2 0x3133 PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x3877 JUMPI PUSH2 0x3877 PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3883 DUP10 DUP10 PUSH2 0x3806 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 PUSH2 0x3894 DUP10 DUP3 DUP11 ADD PUSH2 0x3652 JUMP JUMPDEST SWAP6 POP POP PUSH1 0x40 PUSH2 0x38A5 DUP10 DUP3 DUP11 ADD PUSH2 0x3806 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x60 PUSH2 0x38B6 DUP10 DUP3 DUP11 ADD PUSH2 0x3652 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x38D5 JUMPI PUSH2 0x38D5 PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x38E1 DUP10 DUP3 DUP11 ADD PUSH2 0x3811 JUMP JUMPDEST SWAP3 POP SWAP3 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3906 JUMPI PUSH2 0x3906 PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3912 DUP6 DUP6 PUSH2 0x3806 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3923 DUP6 DUP3 DUP7 ADD PUSH2 0x3652 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3942 JUMPI PUSH2 0x3942 PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1D04 DUP5 DUP5 PUSH2 0x3806 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x3964 JUMPI PUSH2 0x3964 PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x3970 DUP6 DUP6 PUSH2 0x3652 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x3923 DUP6 DUP3 DUP7 ADD PUSH2 0x3806 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xADB PUSH2 0x3992 PUSH2 0x1C51 DUP5 PUSH2 0x36D2 JUMP JUMPDEST PUSH2 0x36D2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xADB DUP3 PUSH2 0x3981 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xADB DUP3 PUSH2 0x3997 JUMP JUMPDEST PUSH2 0x36BE DUP2 PUSH2 0x39A2 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0xADB DUP3 DUP5 PUSH2 0x39AD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x39E0 JUMPI PUSH2 0x39E0 PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x39EC DUP10 DUP10 PUSH2 0x3806 JUMP JUMPDEST SWAP7 POP POP PUSH1 0x20 PUSH2 0x3894 DUP10 DUP3 DUP11 ADD PUSH2 0x3806 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT DUP2 AND PUSH2 0x36BE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3787 DUP4 DUP4 PUSH2 0x37E9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3A23 DUP3 MLOAD SWAP1 JUMP JUMPDEST DUP1 DUP5 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 DUP4 ADD DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x37CD JUMPI DUP2 MLOAD PUSH2 0x3A46 DUP9 DUP3 PUSH2 0x3A0D JUMP JUMPDEST SWAP8 POP PUSH1 0x20 DUP4 ADD SWAP3 POP POP PUSH1 0x1 ADD PUSH2 0x3A32 JUMP JUMPDEST PUSH1 0xE0 DUP2 ADD PUSH2 0x3A65 DUP3 DUP11 PUSH2 0x39FD JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x3A77 DUP2 DUP10 PUSH2 0x3736 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x40 DUP4 ADD MSTORE PUSH2 0x3A8B DUP2 DUP9 PUSH2 0x3736 JUMP JUMPDEST SWAP1 POP PUSH2 0x3A9A PUSH1 0x60 DUP4 ADD DUP8 PUSH2 0x37E9 JUMP JUMPDEST PUSH2 0x3AA7 PUSH1 0x80 DUP4 ADD DUP7 PUSH2 0x36E9 JUMP JUMPDEST PUSH2 0x3AB4 PUSH1 0xA0 DUP4 ADD DUP6 PUSH2 0x37E9 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0x1D90 DUP2 DUP5 PUSH2 0x3A19 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0x3AD4 DUP3 DUP6 PUSH2 0x37E9 JUMP JUMPDEST PUSH2 0xD42 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x37E9 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x2 DUP2 DIV PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x3B0B JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x3B1E JUMPI PUSH2 0x3B1E PUSH2 0x3AE1 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH2 0xADB DUP2 PUSH2 0x37FD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3B44 JUMPI PUSH2 0x3B44 PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1D04 DUP5 DUP5 PUSH2 0x3B24 JUMP JUMPDEST PUSH1 0xC0 DUP2 ADD PUSH2 0x3B5E DUP3 DUP10 PUSH2 0x37E9 JUMP JUMPDEST PUSH2 0x3B6B PUSH1 0x20 DUP4 ADD DUP9 PUSH2 0x37E9 JUMP JUMPDEST PUSH2 0x3B78 PUSH1 0x40 DUP4 ADD DUP8 PUSH2 0x36E9 JUMP JUMPDEST PUSH2 0x3B85 PUSH1 0x60 DUP4 ADD DUP7 PUSH2 0x37E9 JUMP JUMPDEST PUSH2 0x3B92 PUSH1 0x80 DUP4 ADD DUP6 PUSH2 0x36E9 JUMP JUMPDEST PUSH2 0x3536 PUSH1 0xA0 DUP4 ADD DUP5 PUSH2 0x37E9 JUMP JUMPDEST PUSH1 0x28 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD PUSH32 0x534254456E756D657261626C653A206F776E657220696E646578206F7574206F DUP2 MSTORE PUSH8 0x6620626F756E6473 PUSH1 0xC0 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP2 POP JUMPDEST POP PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xADB DUP2 PUSH2 0x3B9F JUMP JUMPDEST PUSH1 0x2F DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 DUP2 MSTORE PUSH15 0x103937B632B9903337B91039B2B633 PUSH1 0x89 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP2 POP PUSH2 0x3BE0 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xADB DUP2 PUSH2 0x3BF7 JUMP JUMPDEST PUSH1 0x1E DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD PUSH32 0x5342543A2063616C6C6572206973206E6F7420746F6B656E206F776E65720000 DUP2 MSTORE SWAP2 POP JUMPDEST POP PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xADB DUP2 PUSH2 0x3C53 JUMP JUMPDEST PUSH1 0x29 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD PUSH32 0x534254456E756D657261626C653A20676C6F62616C20696E646578206F757420 DUP2 MSTORE PUSH9 0x6F6620626F756E6473 PUSH1 0xB8 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP2 POP PUSH2 0x3BE0 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xADB DUP2 PUSH2 0x3C9A JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x15 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD PUSH21 0x14D0950E881A5B9D985B1A59081D1BDAD95B881251 PUSH1 0x5A SHL DUP2 MSTORE SWAP2 POP PUSH2 0x3C83 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xADB DUP2 PUSH2 0x3D06 JUMP JUMPDEST PUSH1 0x26 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD PUSH32 0x5342543A2061646472657373207A65726F206973206E6F7420612076616C6964 DUP2 MSTORE PUSH6 0x1037BBB732B9 PUSH1 0xD1 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP2 POP PUSH2 0x3BE0 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xADB DUP2 PUSH2 0x3D42 JUMP JUMPDEST PUSH1 0xC0 DUP2 ADD PUSH2 0x3DA3 DUP3 DUP10 PUSH2 0x37E9 JUMP JUMPDEST PUSH2 0x3B6B PUSH1 0x20 DUP4 ADD DUP9 PUSH2 0x36E9 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x3DEE JUMPI PUSH2 0x3DEE PUSH2 0x3DC6 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x3E1D JUMPI PUSH2 0x3E1D PUSH2 0x3DC6 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP1 MLOAD PUSH2 0xADB DUP2 PUSH2 0x3645 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3E44 JUMPI PUSH2 0x3E44 PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1D04 DUP5 DUP5 PUSH2 0x3E24 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3E5A DUP3 MLOAD SWAP1 JUMP JUMPDEST PUSH2 0x3E68 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x3700 JUMP JUMPDEST SWAP3 SWAP1 SWAP3 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3E7E DUP3 DUP6 PUSH2 0x3E50 JUMP JUMPDEST SWAP2 POP PUSH2 0x3E8A DUP3 DUP5 PUSH2 0x3E50 JUMP JUMPDEST PUSH5 0x173539B7B7 PUSH1 0xD9 SHL DUP2 MSTORE SWAP2 POP PUSH1 0x5 DUP3 ADD PUSH2 0x1D04 JUMP JUMPDEST PUSH1 0x1F DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 DUP2 MSTORE SWAP2 POP PUSH2 0x3C83 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xADB DUP2 PUSH2 0x3EA0 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD PUSH2 0x3EF2 DUP3 DUP8 PUSH2 0x37E9 JUMP JUMPDEST PUSH2 0x3EFF PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x37E9 JUMP JUMPDEST PUSH2 0x3F0C PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x36E9 JUMP JUMPDEST PUSH2 0x3F19 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x37E9 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x80 DUP2 ADD PUSH2 0x3F30 DUP3 DUP8 PUSH2 0x37E9 JUMP JUMPDEST PUSH2 0x3EFF PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x36E9 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xADB DUP3 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3F67 DUP3 MLOAD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP4 ADD PUSH2 0x3F74 DUP2 PUSH2 0x3F53 JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP3 LT ISZERO PUSH2 0x3F95 JUMPI PUSH2 0x3F90 PUSH1 0x0 NOT DUP4 PUSH1 0x20 SUB PUSH1 0x8 MUL SHL SWAP1 JUMP JUMPDEST DUP4 AND SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH23 0x20B1B1B2B9B9A1B7B73A3937B61D1030B1B1B7BAB73A1 PUSH1 0x4D SHL DUP2 MSTORE PUSH1 0x17 ADD PUSH1 0x0 PUSH2 0x3FC8 DUP3 DUP6 PUSH2 0x3E50 JUMP JUMPDEST PUSH17 0x1034B99036B4B9B9B4B733903937B6329 PUSH1 0x7D SHL DUP2 MSTORE PUSH1 0x11 ADD SWAP2 POP PUSH2 0x1D04 DUP3 DUP5 PUSH2 0x3E50 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0xADB JUMP JUMPDEST PUSH1 0x1D DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD PUSH32 0x5342543A206D696E7420746F20746865207A65726F2061646472657373000000 DUP2 MSTORE SWAP2 POP PUSH2 0x3C83 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xADB DUP2 PUSH2 0x3FF6 JUMP JUMPDEST PUSH1 0x19 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD PUSH25 0x14D0950E881D1BDAD95B88185B1C9958591E481B5A5B9D1959 PUSH1 0x3A SHL DUP2 MSTORE SWAP2 POP PUSH2 0x3C83 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xADB DUP2 PUSH2 0x403A JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x408D JUMPI PUSH2 0x408D PUSH2 0x3DC6 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x40AC JUMPI PUSH2 0x40AC PUSH2 0x3DC6 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x40C0 JUMPI PUSH2 0x40C0 PUSH2 0x3F3D JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP2 ADD PUSH2 0x40D3 DUP3 DUP6 PUSH2 0x37E9 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH2 0x1D04 DUP2 DUP5 PUSH2 0x378F JUMP JUMPDEST PUSH2 0x40EE DUP3 PUSH2 0x372C JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR ISZERO PUSH2 0x410B JUMPI PUSH2 0x410B PUSH2 0x3DB0 JUMP JUMPDEST PUSH1 0x40 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x411D PUSH1 0x40 MLOAD SWAP1 JUMP JUMPDEST SWAP1 POP PUSH2 0x13A3 DUP3 DUP3 PUSH2 0x40E5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT ISZERO PUSH2 0x4142 JUMPI PUSH2 0x4142 PUSH2 0x3DB0 JUMP JUMPDEST POP PUSH1 0x20 SWAP1 DUP2 MUL ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x415F PUSH2 0x415A DUP5 PUSH2 0x4129 JUMP JUMPDEST PUSH2 0x4112 JUMP JUMPDEST DUP4 DUP2 MSTORE SWAP1 POP PUSH1 0x20 DUP1 DUP3 ADD SWAP1 DUP5 MUL DUP4 ADD DUP6 DUP2 GT ISZERO PUSH2 0x417E JUMPI PUSH2 0x417E PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x41A2 JUMPI DUP1 PUSH2 0x4193 DUP9 DUP3 PUSH2 0x3E24 JUMP JUMPDEST DUP5 MSTORE POP PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 ADD PUSH2 0x4180 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x41C0 JUMPI PUSH2 0x41C0 PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x1D04 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x414C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x41E5 JUMPI PUSH2 0x41E5 PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x41FE JUMPI PUSH2 0x41FE PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D04 DUP5 DUP3 DUP6 ADD PUSH2 0x41AC JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x4219 JUMPI PUSH2 0x4219 PUSH2 0x3DC6 JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 SWAP2 ADD SWAP1 DUP2 MSTORE PUSH1 0x0 PUSH2 0x3C83 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xADB DUP2 PUSH2 0x4221 JUMP JUMPDEST PUSH1 0x60 DUP2 ADD PUSH2 0x4271 DUP3 DUP7 PUSH2 0x36E9 JUMP JUMPDEST PUSH2 0x427E PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x36E9 JUMP JUMPDEST PUSH2 0x1D04 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x37E9 JUMP JUMPDEST PUSH1 0xA0 DUP2 ADD PUSH2 0x4299 DUP3 DUP9 PUSH2 0x37E9 JUMP JUMPDEST PUSH2 0x42A6 PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x37E9 JUMP JUMPDEST PUSH2 0x42B3 PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x37E9 JUMP JUMPDEST PUSH2 0x42C0 PUSH1 0x60 DUP4 ADD DUP6 PUSH2 0x37E9 JUMP JUMPDEST PUSH2 0xD2C PUSH1 0x80 DUP4 ADD DUP5 PUSH2 0x36E9 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x18 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD PUSH24 0x45434453413A20696E76616C6964207369676E6174757265 PUSH1 0x40 SHL DUP2 MSTORE SWAP2 POP PUSH2 0x3C83 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xADB DUP2 PUSH2 0x42E3 JUMP JUMPDEST PUSH1 0x1F DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 DUP2 MSTORE SWAP2 POP PUSH2 0x3C83 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xADB DUP2 PUSH2 0x4322 JUMP JUMPDEST PUSH1 0x22 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C DUP2 MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP2 POP PUSH2 0x3BE0 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xADB DUP2 PUSH2 0x4366 JUMP JUMPDEST DUP1 ISZERO ISZERO PUSH2 0x3647 JUMP JUMPDEST DUP1 MLOAD PUSH2 0xADB DUP2 PUSH2 0x43B5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x43DD JUMPI PUSH2 0x43DD PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1D04 DUP5 DUP5 PUSH2 0x43BD JUMP JUMPDEST PUSH1 0x2A DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E DUP2 MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x20 DUP3 ADD MSTORE SWAP2 POP PUSH2 0x3BE0 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xADB DUP2 PUSH2 0x43E9 JUMP JUMPDEST PUSH1 0xFF DUP2 AND PUSH2 0x36BE JUMP JUMPDEST PUSH1 0x80 DUP2 ADD PUSH2 0x4457 DUP3 DUP8 PUSH2 0x37E9 JUMP JUMPDEST PUSH2 0x4464 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x4440 JUMP JUMPDEST PUSH2 0x3F0C PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x37E9 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD42 DUP3 DUP5 PUSH2 0x3E50 JUMP JUMPDEST PUSH1 0x1D DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 DUP2 MSTORE SWAP2 POP PUSH2 0x3C83 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0xADB DUP2 PUSH2 0x447D JUMP INVALID MSTORE 0xEA 0xFC GT 0xF6 0xF8 0x1F DUP7 DUP8 DUP12 SELFDESTRUCT 0xD3 GT MULMOD LOG0 0xD9 0x2F CALLDATACOPY POP PUSH6 0x27754F007888 MSTORE8 SELFDESTRUCT SWAP16 PUSH4 0xB130A264 PUSH10 0x706673582212208396A9 SWAP4 STATICCALL 0x1F 0xEA INVALID 0xAC ORIGIN 0x5E 0xD9 0xCB MLOAD 0x49 0x1F DUP10 PUSH3 0xD6A3C6 0xA9 SSTORE SIGNEXTEND SGT OR DUP16 SWAP13 PUSH6 0xA7EBD164736F PUSH13 0x63430008080033000000000000 ",
          "sourceMap": "426:5697:34:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7432:238:36;;;;;;;;;;-1:-1:-1;7432:238:36;;;;;:::i;:::-;;:::i;:::-;;8439:253:46;;;;;;;;;;-1:-1:-1;8439:253:46;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2053:38:36;;;;;;;;;;-1:-1:-1;2053:38:36;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1989:98:50:-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;8439:150:36:-;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;1355:42:46:-;;;;;;;;;;;;;;;;;;;;;;;:::i;1676:33:36:-;;;;;;;;;;-1:-1:-1;1676:33:36;;;;-1:-1:-1;;;;;1676:33:36;;;1592:111:54;;;;;;;;;;-1:-1:-1;1679:10:54;:17;1592:111;;1106:28:46;;;;;;;;;;;;;;;;1158:36;;;;;;;;;;;;;;;;2197:810:34;;;;;;:::i;:::-;;:::i;8863:179:36:-;;;;;;;;;;-1:-1:-1;8863:179:36;;;;;:::i;:::-;;:::i;4279:196::-;;;;;;;;;;-1:-1:-1;4279:196:36;;;;;:::i;:::-;;:::i;4504:129:0:-;;;;;;;;;;-1:-1:-1;4504:129:0;;;;;:::i;:::-;;:::i;2061:404:48:-;;;;;;;;;;-1:-1:-1;2061:404:48;;;;;:::i;:::-;;:::i;4290:350:46:-;;;;;;;;;;-1:-1:-1;4290:350:46;;;;;:::i;:::-;;:::i;4929:145:0:-;;;;;;;;;;-1:-1:-1;4929:145:0;;;;;:::i;:::-;;:::i;1221:303:54:-;;;;;;;;;;-1:-1:-1;1221:303:54;;;;;:::i;:::-;;:::i;6038:214:0:-;;;;;;;;;;-1:-1:-1;6038:214:0;;;;;:::i;:::-;;:::i;2137:34:36:-;;;;;;;;;;-1:-1:-1;2137:34:36;;;;-1:-1:-1;;;;;2137:34:36;;;3749:279:46;;;;;;;;;;-1:-1:-1;3749:279:46;;;;;:::i;:::-;;:::i;4892:374::-;;;;;;;;;;-1:-1:-1;4892:374:46;;;;;:::i;:::-;;:::i;3440:196:36:-;;;;;;;;;;-1:-1:-1;3440:196:36;;;;;:::i;:::-;;:::i;896:84::-;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;896:84:36;;435:247:53;;;;;;;;;;-1:-1:-1;435:247:53;;;;;:::i;:::-;;:::i;7003:250:36:-;;;;;;;;;;-1:-1:-1;7003:250:36;;;;;:::i;:::-;;:::i;3168:356:46:-;;;;;;;;;;-1:-1:-1;3168:356:46;;;;;:::i;:::-;;:::i;7311:102::-;;;;;;;;;;-1:-1:-1;7311:102:46;;;;;:::i;:::-;;:::i;1772:272:54:-;;;;;;;;;;-1:-1:-1;1772:272:54;;;;;:::i;:::-;;:::i;1701:229:50:-;;;;;;;;;;-1:-1:-1;1701:229:50;;;;;:::i;:::-;;:::i;1052:24:46:-;;;;;;;;;;;;;;;;1432:215:50;;;;;;;;;;-1:-1:-1;1432:215:50;;;;;:::i;:::-;;:::i;8937:858:46:-;;;;;;;;;;-1:-1:-1;8937:858:46;;;;;:::i;:::-;;:::i;4740:190:36:-;;;;;;;;;;-1:-1:-1;4740:190:36;;;;;:::i;:::-;;:::i;1224:40:46:-;;;;;;;;;;;;;;;;1002:43;;;;;;;;;;-1:-1:-1;1002:43:46;;;;-1:-1:-1;;;;;1002:43:46;;;;;;;;;;:::i;1995:52:36:-;;;;;;;;;;-1:-1:-1;1995:52:36;;;;;:::i;:::-;;;;;;;;;;;;;;;;3445:725:34;;;;;;:::i;:::-;;:::i;6134:386:46:-;;;;;;;;;;-1:-1:-1;6134:386:46;;;;;:::i;:::-;;:::i;5021:633:23:-;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;:::i;6436:386:36:-;;;;;;;;;;-1:-1:-1;6436:386:36;;;;;:::i;:::-;;:::i;2177:32::-;;;;;;;;;;;;;;;;852:43:48;;;;;;;;;;-1:-1:-1;852:43:48;;;;;:::i;:::-;;;;;;;;;;;;;;;;3021:145:0;;;;;;;;;;-1:-1:-1;3021:145:0;;;;;:::i;:::-;;:::i;5585:638:36:-;;;;;;;;;;-1:-1:-1;5585:638:36;;;;;:::i;:::-;;:::i;2148:102:50:-;;;;;;;;;;;;;:::i;1716:25:36:-;;;;;;;;;;-1:-1:-1;1716:25:36;;;;-1:-1:-1;;;;;1716:25:36;;;2098:33;;;;;;;;;;-1:-1:-1;2098:33:36;;;;-1:-1:-1;;;;;2098:33:36;;;2153:49:0;;;;;;;;;;-1:-1:-1;2153:49:0;2198:4;2153:49;;7852:244:36;;;;;;;;;;-1:-1:-1;7852:244:36;;;;;:::i;:::-;;:::i;1287:38:46:-;;;;;;;;;;;;;;;;6828:294;;;;;;;;;;-1:-1:-1;6828:294:46;;;;;:::i;:::-;;:::i;1645:25:36:-;;;;;;;;;;-1:-1:-1;1645:25:36;;;;-1:-1:-1;;;;;1645:25:36;;;5113:291;;;;;;;;;;-1:-1:-1;5113:291:36;;;;;:::i;:::-;;:::i;7762:343:46:-;;;;;;;;;;-1:-1:-1;7762:343:46;;;;;:::i;:::-;;:::i;2671:425:48:-;;;;;;;;;;-1:-1:-1;2671:425:48;;;;;:::i;:::-;;:::i;5354:147:0:-;;;;;;;;;;-1:-1:-1;5354:147:0;;;;;:::i;:::-;;:::i;2215:33:36:-;;;;;;;;;;;;;;;;3835:244;;;;;;;;;;-1:-1:-1;3835:244:36;;;;;:::i;:::-;;:::i;10165:246:46:-;;;;;;;;;;-1:-1:-1;10165:246:46;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;1829:24:36:-;;;;;;;;;;-1:-1:-1;1829:24:36;;;;-1:-1:-1;;;;;1829:24:36;;;2633:332:46;;;;;;;;;;-1:-1:-1;2633:332:46;;;;;:::i;:::-;;:::i;5524:362::-;;;;;;;;;;-1:-1:-1;5524:362:46;;;;;:::i;:::-;;:::i;7432:238:36:-;2198:4:0;2631:16;2198:4;2631:10;:16::i;:::-;7578:17:36::1;;7556:18;:39;7552:63;;;7604:11;;-1:-1:-1::0;;;7604:11:36::1;;;;;;;;;;;7552:63;-1:-1:-1::0;7625:17:36::1;:38:::0;7432:238::o;8439:253:46:-;8622:4;8649:36;8673:11;8649:23;:36::i;:::-;8642:43;8439:253;-1:-1:-1;;8439:253:46:o;2053:38:36:-;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2053:38:36;;-1:-1:-1;2053:38:36;:::o;1989:98:50:-;2043:13;2075:5;2068:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1989:98;:::o;8439:150:36:-;8522:16;8561:21;8554:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;8554:28:36;;;;;;;;;;;;;;;;;;;;;;8439:150;:::o;2197:810:34:-;2414:7;2261:21:5;:19;:21::i;:::-;2446:17:34::1;::::0;:37:::1;::::0;-1:-1:-1;;;2446:37:34;;2433:10:::1;::::0;-1:-1:-1;;;;;2446:17:34::1;::::0;:25:::1;::::0;:37:::1;::::0;2472:10;;2446:37:::1;;;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2433:50:::0;-1:-1:-1;;;;;;2497:18:34;::::1;719:10:17::0;2497:18:34::1;2493:59;;719:10:17::0;2539:12:34::1;2524:28;;-1:-1:-1::0;;;2524:28:34::1;;;;;;;;:::i;:::-;;;;;;;;2493:59;2563:15;2581:186;2611:13;2638:2;2654:50;2660:10;2672:16;2690:13;2654:5;:50::i;:::-;2718:16;2748:9;;2581:16;:186::i;:::-;2563:204;;2783:192;2827:7;2848:10;2872:16;2902:13;2929;2956:9;;2783:192;;;;;;;;;;;:::i;:::-;;;;;;;;2993:7:::0;-1:-1:-1;;2303:20:5;1716:1;2809:7;:22;2629:209;2303:20;2197:810:34;;;;;;;;:::o;8863:179:36:-;8971:7;8997:38;9013:13;9028:6;8997:15;:38::i;:::-;8990:45;8863:179;-1:-1:-1;;;8863:179:36:o;4279:196::-;2198:4:0;2631:16;2198:4;2631:10;:16::i;:::-;4389:10:36::1;::::0;-1:-1:-1;;;;;4389:25:36;;::::1;:10:::0;::::1;:25;4385:49;;;4423:11;;-1:-1:-1::0;;;4423:11:36::1;;;;;;;;;;;4385:49;-1:-1:-1::0;4444:10:36::1;:24:::0;;-1:-1:-1;;;;;;4444:24:36::1;-1:-1:-1::0;;;;;4444:24:36;;;::::1;::::0;;;::::1;::::0;;4279:196::o;4504:129:0:-;4578:7;4604:12;;;;;;;;;;:22;;;;4504:129::o;2061:404:48:-;2140:41;2198:4:0;719:10:17;3021:145:0;:::i;2140:41:48:-;2139:42;:100;;;;-1:-1:-1;2198:41:48;-1:-1:-1;;;;;;;;;;;719:10:17;3021:145:0;:::i;2198:41:48:-;2197:42;2139:100;2122:175;;;2257:40;;-1:-1:-1;;;2257:40:48;;;;;;;;;;;2122:175;-1:-1:-1;;;;;2311:24:48;;2307:50;;2344:13;;-1:-1:-1;;;2344:13:48;;;;;;;;;;;2307:50;-1:-1:-1;;;;;2371:23:48;;;;;;:11;:23;;;;;;;;2367:50;;;2403:14;;-1:-1:-1;;;2403:14:48;;;;;;;;;;;2367:50;-1:-1:-1;;;;;2428:23:48;;;;;:11;:23;;;;;:30;;-1:-1:-1;;2428:30:48;2454:4;2428:30;;;2061:404::o;4290:350:46:-;4375:41;2198:4:0;719:10:17;3021:145:0;:::i;4375:41:46:-;4374:42;:100;;;;-1:-1:-1;4433:41:46;-1:-1:-1;;;;;;;;;;;719:10:17;3021:145:0;:::i;4433:41:46:-;4432:42;4374:100;4357:175;;;4492:40;;-1:-1:-1;;;4492:40:46;;;;;;;;;;;4357:175;4562:13;4546:12;;:29;4542:53;;;4584:11;;-1:-1:-1;;;4584:11:46;;;;;;;;;;;4542:53;4605:12;:28;4290:350::o;4929:145:0:-;5012:18;5025:4;5012:12;:18::i;:::-;2631:16;2642:4;2631:10;:16::i;:::-;5042:25:::1;5053:4;5059:7;5042:10;:25::i;:::-;4929:145:::0;;;:::o;1221:303:54:-;1340:7;1388:20;1402:5;1388:13;:20::i;:::-;1380:5;:28;1359:115;;;;-1:-1:-1;;;1359:115:54;;;;;;;:::i;:::-;-1:-1:-1;;;;;;1491:19:54;;;;;;;;:12;:19;;;;;;;;:26;;;;;;;;;1221:303::o;6038:214:0:-;-1:-1:-1;;;;;6133:23:0;;719:10:17;6133:23:0;6125:83;;;;-1:-1:-1;;;6125:83:0;;;;;;;:::i;:::-;6219:26;6231:4;6237:7;6219:11;:26::i;:::-;6038:214;;:::o;3749:279:46:-;2198:4:0;2631:16;2198:4;2631:10;:16::i;:::-;3881:17:46::1;::::0;-1:-1:-1;;;;;3873:48:46;;::::1;3881:17:::0;::::1;3873:48;3869:84;;;3942:11;;-1:-1:-1::0;;;3942:11:46::1;;;;;;;;;;;3869:84;-1:-1:-1::0;3963:17:46::1;:58:::0;;-1:-1:-1;;;;;;3963:58:46::1;-1:-1:-1::0;;;;;3963:58:46;;;::::1;::::0;;;::::1;::::0;;3749:279::o;4892:374::-;4985:41;2198:4:0;719:10:17;3021:145:0;:::i;4985:41:46:-;4984:42;:100;;;;-1:-1:-1;5043:41:46;-1:-1:-1;;;;;;;;;;;719:10:17;3021:145:0;:::i;5043:41:46:-;5042:42;4984:100;4967:175;;;5102:40;;-1:-1:-1;;;5102:40:46;;;;;;;;;;;4967:175;5176:17;5156:16;;:37;5152:61;;;5202:11;;-1:-1:-1;;;5202:11:46;;;;;;;;;;;5152:61;5223:16;:36;4892:374::o;3440:196:36:-;2198:4:0;2631:16;2198:4;2631:10;:16::i;:::-;3550:10:36::1;::::0;-1:-1:-1;;;;;3550:25:36;;::::1;:10:::0;::::1;:25;3546:49;;;3584:11;;-1:-1:-1::0;;;3584:11:36::1;;;;;;;;;;;3546:49;-1:-1:-1::0;3605:10:36::1;:24:::0;;-1:-1:-1;;;;;;3605:24:36::1;-1:-1:-1::0;;;;;3605:24:36;;;::::1;::::0;;;::::1;::::0;;3440:196::o;435:247:53:-;564:31;719:10:17;587:7:53;564:8;:31::i;:::-;543:108;;;;-1:-1:-1;;;543:108:53;;;;;;;:::i;:::-;661:14;667:7;661:5;:14::i;:::-;435:247;:::o;7003:250:36:-;2198:4:0;2631:16;2198:4;2631:10;:16::i;:::-;7155:19:36::1;::::0;-1:-1:-1;;;;;7131:43:36;;::::1;7155:19:::0;::::1;7131:43;7127:67;;;7183:11;;-1:-1:-1::0;;;7183:11:36::1;;;;;;;;;;;7127:67;-1:-1:-1::0;7204:19:36::1;:42:::0;;-1:-1:-1;;;;;;7204:42:36::1;-1:-1:-1::0;;;;;7204:42:36;;;::::1;::::0;;;::::1;::::0;;7003:250::o;3168:356:46:-;3255:41;2198:4:0;719:10:17;3021:145:0;:::i;3255:41:46:-;3254:42;:100;;;;-1:-1:-1;3313:41:46;-1:-1:-1;;;;;;;;;;;719:10:17;3021:145:0;:::i;3313:41:46:-;3312:42;3254:100;3237:175;;;3372:40;;-1:-1:-1;;;3372:40:46;;;;;;;;;;;3237:175;3443:14;3426:13;;:31;3422:55;;;3466:11;;-1:-1:-1;;;3466:11:46;;;;;;;;;;;3422:55;3487:13;:30;3168:356::o;7311:102::-;7367:4;7390:16;7398:7;7390;:16::i;1772:272:54:-;1861:7;1909:27;1679:10;:17;;1592:111;1909:27;1901:5;:35;1880:123;;;;-1:-1:-1;;;1880:123:54;;;;;;;:::i;:::-;2020:10;2031:5;2020:17;;;;;;;;:::i;:::-;;;;;;;;;2013:24;;1772:272;;;:::o;1701:229:50:-;1787:7;1822:16;;;:7;:16;;;;;;-1:-1:-1;;;;;1822:16:50;1856:19;1848:53;;;;-1:-1:-1;;;1848:53:50;;;;;;;:::i;1432:215::-;1518:7;-1:-1:-1;;;;;1545:19:50;;1537:70;;;;-1:-1:-1;;;1537:70:50;;;;;;;:::i;:::-;-1:-1:-1;;;;;;1624:16:50;;;;;:9;:16;;;;;;;1432:215::o;8937:858:46:-;9017:13;9046:9;;9059:1;9046:14;:36;;;;-1:-1:-1;9064:13:46;;:18;9046:36;9042:725;;;-1:-1:-1;9106:1:46;8937:858;;;:::o;9042:725::-;9158:9;;-1:-1:-1;;;;;9141:26:46;;;9158:9;;9141:26;:77;;;;-1:-1:-1;;;;;;9183:35:46;;;;;;:20;:35;;;;;;;;9141:77;:110;;;;;9250:1;9234:13;;:17;9141:110;9124:643;;;-1:-1:-1;;9337:13:46;;;8937:858::o;9124:643::-;9401:10;;-1:-1:-1;;;;;9384:27:46;;;9401:10;;9384:27;:66;;;;-1:-1:-1;;;;;;9415:35:46;;;;;;:20;:35;;;;;;;;9384:66;9367:400;;;-1:-1:-1;;9510:9:46;;;8937:858::o;9367:400::-;-1:-1:-1;;;;;9540:35:46;;;;;;:20;:35;;;;;;;;9536:231;;;9635:48;9658:13;9673:9;;9635:22;:48::i;9536:231::-;9742:13;9721:35;;-1:-1:-1;;;9721:35:46;;;;;;;;:::i;9536:231::-;8937:858;;;:::o;4740:190:36:-;2198:4:0;2631:16;2198:4;2631:10;:16::i;:::-;4848:9:36::1;::::0;-1:-1:-1;;;;;4848:23:36;;::::1;:9:::0;::::1;:23;4844:47;;;4880:11;;-1:-1:-1::0;;;4880:11:36::1;;;;;;;;;;;4844:47;-1:-1:-1::0;4901:9:36::1;:22:::0;;-1:-1:-1;;;;;;4901:22:36::1;-1:-1:-1::0;;;;;4901:22:36;;;::::1;::::0;;;::::1;::::0;;4740:190::o;3445:725:34:-;3654:7;2261:21:5;:19;:21::i;:::-;-1:-1:-1;;;;;3677:18:34;::::1;719:10:17::0;3677:18:34::1;3673:59;;719:10:17::0;3719:12:34::1;640:96:17::0;3673:59:34::1;3743:15;3761:178;3791:13;3818:2;3834:42;3840:2;3844:16;3862:13;3834:5;:42::i;:::-;3890:16;3920:9;;3761:16;:178::i;:::-;3743:196;;3955:183;3998:7;4019:2;4035:16;4065:13;4092;4119:9;;3955:183;;;;;;;;;;;:::i;:::-;;;;;;;;4156:7:::0;-1:-1:-1;2303:20:5;1716:1;2809:7;:22;2629:209;6134:386:46;6231:41;2198:4:0;719:10:17;3021:145:0;:::i;6231:41:46:-;6230:42;:100;;;;-1:-1:-1;6289:41:46;-1:-1:-1;;;;;;;;;;;719:10:17;3021:145:0;:::i;6289:41:46:-;6288:42;6230:100;6213:175;;;6348:40;;-1:-1:-1;;;6348:40:46;;;;;;;;;;;6213:175;6424:19;6402:18;;:41;6398:65;;;6452:11;;-1:-1:-1;;;6452:11:46;;;;;;;;;;;6398:65;6473:18;:40;6134:386::o;5021:633:23:-;5136:13;5163:18;;5136:13;;;5163:18;5427:41;:5;5454:13;5427:26;:41::i;:::-;5482:47;:8;5512:16;5482:29;:47::i;:::-;5621:16;;;5605:1;5621:16;;;;;;;;;-1:-1:-1;;;5376:271:23;;;-1:-1:-1;5376:271:23;;-1:-1:-1;5543:13:23;;-1:-1:-1;5578:4:23;;-1:-1:-1;5605:1:23;-1:-1:-1;5621:16:23;-1:-1:-1;5376:271:23;-1:-1:-1;5021:633:23:o;6436:386:36:-;6533:41;2198:4:0;719:10:17;3021:145:0;:::i;6533:41:36:-;6532:42;:100;;;;-1:-1:-1;6591:41:36;-1:-1:-1;;;;;;;;;;;719:10:17;3021:145:0;:::i;6591:41:36:-;6590:42;6532:100;6515:175;;;6650:40;;-1:-1:-1;;;6650:40:36;;;;;;;;;;;6515:175;6727:18;;-1:-1:-1;;;;;6704:41:36;;;6727:18;;6704:41;6700:65;;;6754:11;;-1:-1:-1;;;6754:11:36;;;;;;;;;;;6700:65;6775:18;:40;;-1:-1:-1;;;;;;6775:40:36;-1:-1:-1;;;;;6775:40:36;;;;;;;;;;6436:386::o;3021:145:0:-;3107:4;3130:12;;;;;;;;;;;-1:-1:-1;;;;;3130:29:0;;;;;;;;;;;;;;;3021:145::o;5585:638:36:-;2198:4:0;2631:16;2198:4;2631:10;:16::i;:::-;-1:-1:-1;;;;;5706:36:36;::::1;;::::0;;;:20:::1;:36;::::0;;;;;::::1;;5701:99;;5785:14;5763:37;;-1:-1:-1::0;;;5763:37:36::1;;;;;;;;:::i;5701:99::-;-1:-1:-1::0;;;;;5811:36:36;::::1;5850:5;5811:36:::0;;;:20:::1;:36;::::0;;;;:44;;-1:-1:-1;;5811:44:36::1;::::0;;5865:352:::1;5889:21;:28:::0;5885:32;::::1;5865:352;;;5970:14;-1:-1:-1::0;;;;;5942:42:36::1;:21;5964:1;5942:24;;;;;;;;:::i;:::-;;::::0;;;::::1;::::0;;;::::1;::::0;-1:-1:-1;;;;;5942:24:36::1;:42;5938:269;;;6031:21;6074:28:::0;;:32:::1;::::0;6105:1:::1;::::0;6074:32:::1;:::i;:::-;6031:93;;;;;;;;:::i;:::-;;::::0;;;::::1;::::0;;;::::1;::::0;6004:21:::1;:24:::0;;-1:-1:-1;;;;;6031:93:36;;::::1;::::0;6026:1;;6004:24;::::1;;;;;:::i;:::-;;;;;;;;;:120;;;;;-1:-1:-1::0;;;;;6004:120:36::1;;;;;-1:-1:-1::0;;;;;6004:120:36::1;;;;;;6142:21;:27;;;;;;;:::i;:::-;;::::0;;;::::1;::::0;;;;-1:-1:-1;;6142:27:36;;;;;-1:-1:-1;;;;;;6142:27:36::1;::::0;;;;;4929:145:0;;;:::o;5938:269:36:-:1;5919:3:::0;::::1;::::0;::::1;:::i;:::-;;;;5865:352;;2148:102:50::0;2204:13;2236:7;2229:14;;;;;:::i;7852:244:36:-;2198:4:0;2631:16;2198:4;2631:10;:16::i;:::-;8001:18:36::1;;7978:19;:41;7974:65;;;8028:11;;-1:-1:-1::0;;;8028:11:36::1;;;;;;;;;;;7974:65;-1:-1:-1::0;8049:18:36::1;:40:::0;7852:244::o;6828:294:46:-;6914:17;;6891:7;;-1:-1:-1;;;;;6914:17:46;6910:102;;6986:26;;-1:-1:-1;;;6986:26:46;;;;;;;;;;;6910:102;7023:13;7039:22;7053:7;7039:13;:22::i;:::-;7078:17;;:37;;-1:-1:-1;;;7078:37:46;;7023:38;;-1:-1:-1;;;;;;7078:17:46;;:30;;:37;;7023:38;;7078:37;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;5113:291:36:-;2198:4:0;2631:16;2198:4;2631:10;:16::i;:::-;-1:-1:-1;;;;;5232:36:36;::::1;;::::0;;;:20:::1;:36;::::0;;;;;::::1;;5228:63;;;5277:14;;-1:-1:-1::0;;;5277:14:36::1;;;;;;;;;;;5228:63;-1:-1:-1::0;;;;;;5302:36:36::1;;::::0;;;:20:::1;:36;::::0;;;;:43;;-1:-1:-1;;5302:43:36::1;5341:4;5302:43:::0;;::::1;::::0;;;5355:21:::1;:42:::0;;;;::::1;::::0;;;;;;::::1;::::0;;-1:-1:-1;;;;;;5355:42:36::1;::::0;;::::1;::::0;;5113:291::o;7762:343:46:-;7849:13;7874:23;7889:7;7874:14;:23::i;:::-;7908:21;7932:10;:8;:10::i;:::-;7908:34;;7995:1;7977:7;7971:21;:25;:127;;;;;;;;;;;;;;;;;8039:7;8048:18;:7;:16;:18::i;:::-;8022:54;;;;;;;;;:::i;:::-;;;;;;;;;;;;;7952:146;7762:343;-1:-1:-1;;;7762:343:46:o;2671:425:48:-;2753:41;2198:4:0;719:10:17;3021:145:0;:::i;2753:41:48:-;2752:42;:100;;;;-1:-1:-1;2811:41:48;-1:-1:-1;;;;;;;;;;;719:10:17;3021:145:0;:::i;2811:41:48:-;2810:42;2752:100;2735:175;;;2870:40;;-1:-1:-1;;;2870:40:48;;;;;;;;;;;2735:175;-1:-1:-1;;;;;2924:24:48;;2920:50;;2957:13;;-1:-1:-1;;;2957:13:48;;;;;;;;;;;2920:50;-1:-1:-1;;;;;2985:23:48;;;;;;:11;:23;;;;;;;;2980:67;;3036:10;3017:30;;-1:-1:-1;;;3017:30:48;;;;;;;;:::i;2980:67::-;-1:-1:-1;;;;;3058:23:48;3084:5;3058:23;;;:11;:23;;;;;:31;;-1:-1:-1;;3058:31:48;;;2671:425::o;5354:147:0:-;5438:18;5451:4;5438:12;:18::i;:::-;2631:16;2642:4;2631:10;:16::i;:::-;5468:26:::1;5480:4;5486:7;5468:11;:26::i;3835:244:36:-:0;2198:4:0;2631:16;2198:4;2631:10;:16::i;:::-;3961:18:36::1;::::0;-1:-1:-1;;;;;3961:41:36;;::::1;:18:::0;::::1;:41;3957:65;;;4011:11;;-1:-1:-1::0;;;4011:11:36::1;;;;;;;;;;;3957:65;-1:-1:-1::0;4032:18:36::1;:40:::0;;-1:-1:-1;;;;;;4032:40:36::1;-1:-1:-1::0;;;;;4032:40:36;;;::::1;::::0;;;::::1;::::0;;3835:244::o;10165:246:46:-;10260:13;10275:19;10314:27;10327:13;10314:12;:27::i;:::-;10306:35;;10359:5;10366:37;10382:13;10397:5;10366:15;:37::i;:::-;10351:53;;;;10165:246;;;:::o;2633:332::-;2712:41;2198:4:0;719:10:17;3021:145:0;:::i;2712:41:46:-;2711:42;:100;;;;-1:-1:-1;2770:41:46;-1:-1:-1;;;;;;;;;;;719:10:17;3021:145:0;:::i;2770:41:46:-;2769:42;2711:100;2694:175;;;2829:40;;-1:-1:-1;;;2829:40:46;;;;;;;;;;;2694:175;2896:10;2883:9;;:23;2879:47;;;2915:11;;-1:-1:-1;;;2915:11:46;;;;;;;;;;;2879:47;2936:9;:22;2633:332::o;5524:362::-;5613:41;2198:4:0;719:10:17;3021:145:0;:::i;5613:41:46:-;5612:42;:100;;;;-1:-1:-1;5671:41:46;-1:-1:-1;;;;;;;;;;;719:10:17;3021:145:0;:::i;5671:41:46:-;5670:42;5612:100;5595:175;;;5730:40;;-1:-1:-1;;;5730:40:46;;;;;;;;;;;5595:175;5802:15;5784:14;;:33;5780:57;;;5826:11;;-1:-1:-1;;;5826:11:46;;;;;;;;;;;5780:57;5847:14;:32;5524:362::o;2895:341:19:-;2991:11;3040:2;3024:5;3018:19;:24;3014:216;;;3065:20;3079:5;3065:13;:20::i;:::-;3058:27;;;;3014:216;3157:5;3142;3116:46;;;;;;;;:::i;:::-;-1:-1:-1;1371:66:19;;-1:-1:-1;3176:43:19;;3310:202:20;3486:10;3310:202::o;3460:103:0:-;3526:30;3537:4;719:10:17;3526::0;:30::i;891:254:54:-;1004:4;-1:-1:-1;;;;;;1039:47:54;;-1:-1:-1;;;1039:47:54;;:99;;;1102:36;1126:11;1102:23;:36::i;2336:287:5:-;1759:1;2468:7;;:19;;2460:63;;;;-1:-1:-1;;;2460:63:5;;;;;;;:::i;:::-;1759:1;2598:7;:18;2336:287::o;4340:597:34:-;4477:7;4515:415;4616:143;4785:10;4821:16;4863:13;4580:318;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4549:367;;;;;;4515:16;:415::i;:::-;4496:434;4340:597;-1:-1:-1;;;;4340:597:34:o;3661:578:48:-;3862:7;3881:44;3889:6;3897:9;;3881:44;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;3908:16:48;;-1:-1:-1;3881:7:48;;-1:-1:-1;;3881:44:48:i;:::-;3937:13;3952:19;3975:64;4016:13;3975:27;:64::i;:::-;3936:103;;;;4049:39;4054:13;4069:5;4076:11;4049:4;:39::i;:::-;4099:15;4117:25;:15;918:14:18;;827:112;4117:25:48;4099:43;;4152:27;:15;1032:19:18;;1050:1;1032:19;;;945:123;4152:27:48;4189:18;4195:2;4199:7;4189:5;:18::i;:::-;4225:7;3661:578;-1:-1:-1;;;;;;;;;3661:578:48:o;10373:672:36:-;10538:17;;10482:7;;;;10538:21;10534:315;;10596:10;;-1:-1:-1;;;;;10579:27:36;;;10596:10;;10579:27;10575:264;;;-1:-1:-1;10640:17:36;;10575:264;;;10710:114;10754:13;10789:17;;10710:22;:114::i;:::-;10696:128;;10575:264;10862:18;;:22;10858:153;;10914:86;10947:39;10982:3;10947:30;10958:18;;10947:6;:10;;:30;;;;:::i;:::-;:34;;:39::i;:::-;10914:11;;:15;:86::i;7587:233:0:-;7670:22;7678:4;7684:7;7670;:22::i;:::-;7665:149;;7708:6;:12;;;;;;;;;;;-1:-1:-1;;;;;7708:29:0;;;;;;;;;:36;;-1:-1:-1;;7708:36:0;7740:4;7708:36;;;7790:12;719:10:17;;640:96;7790:12:0;-1:-1:-1;;;;;7763:40:0;7781:7;-1:-1:-1;;;;;7763:40:0;7775:4;7763:40;;;;;;;;;;7587:233;;:::o;7991:234::-;8074:22;8082:4;8088:7;8074;:22::i;:::-;8070:149;;;8144:5;8112:12;;;;;;;;;;;-1:-1:-1;;;;;8112:29:0;;;;;;;;;;:37;;-1:-1:-1;;8112:37:0;;;8168:40;719:10:17;;8112:12:0;;8168:40;;8144:5;8168:40;7991:234;;:::o;3139:199:50:-;3244:4;3260:13;3276:20;3288:7;3276:11;:20::i;:::-;-1:-1:-1;;;;;3314:16:50;;;;;;;-1:-1:-1;;3139:199:50;;;;:::o;4580:320::-;4639:13;4655:20;4667:7;4655:11;:20::i;:::-;4639:36;;4686:48;4707:5;4722:1;4726:7;4686:20;:48::i;:::-;-1:-1:-1;;;;;4745:16:50;;;;;;:9;:16;;;;;:21;;4765:1;;4745:16;:21;;4765:1;;4745:21;:::i;:::-;;;;-1:-1:-1;;4783:16:50;;;;:7;:16;;;;;;4776:23;;-1:-1:-1;;;;;;4776:23:50;;;4815:20;4791:7;;-1:-1:-1;;;;;4815:20:50;;;;;4783:16;4815:20;6038:214:0;;:::o;3583:125:50:-;3648:4;3671:16;;;:7;:16;;;;;;-1:-1:-1;;;;;3671:16:50;:30;;;3583:125::o;9544:555:36:-;9692:7;9675:6;14743:1;14734:6;:10;:38;;;;-1:-1:-1;14748:10:36;;-1:-1:-1;;;;;14748:10:36;:24;14734:38;14730:84;;;14793:21;;-1:-1:-1;;;14793:21:36;;;;;;;;;;;14730:84;14837:1;14828:6;:10;:46;;;;-1:-1:-1;14842:18:36;;-1:-1:-1;;;;;14842:18:36;:32;14828:46;14824:92;;;14895:21;;-1:-1:-1;;;14895:21:36;;;;;;;;;;;14824:92;14939:1;14930:6;:10;:38;;;;-1:-1:-1;14944:10:36;;-1:-1:-1;;;;;14944:10:36;:24;14930:38;14926:84;;;14989:21;;-1:-1:-1;;;14989:21:36;;;;;;;;;;;14926:84;15033:1;15024:6;:10;:46;;;;-1:-1:-1;15038:18:36;;-1:-1:-1;;;;;15038:18:36;:32;15024:46;15020:92;;;15091:21;;-1:-1:-1;;;15091:21:36;;;;;;;;;;;15020:92;-1:-1:-1;;;;;9716:35:36;::::1;;::::0;;;:20:::1;:35;::::0;;;;;::::1;;9715:36;::::0;:67:::1;;-1:-1:-1::0;9772:10:36::1;::::0;-1:-1:-1;;;;;9755:27:36;;::::1;9772:10:::0;::::1;9755:27;9715:67;9711:119;;;9816:13;9803:27;;-1:-1:-1::0;;;9803:27:36::1;;;;;;;;:::i;9711:119::-;9845:11:::0;9841:25:::1;;9865:1;9858:8;;;;9841:25;-1:-1:-1::0;;;;;9881:27:36;::::1;9877:216;;9951:18;::::0;9971:10:::1;::::0;9931:59:::1;::::0;-1:-1:-1;;;;;9951:18:36;;::::1;::::0;9971:10:::1;9983:6:::0;9931:19:::1;:59::i;:::-;9924:66;;;;9877:216;10063:10;::::0;10028:54:::1;::::0;10048:13;;-1:-1:-1;;;;;10063:10:36::1;10075:6:::0;10028:19:::1;:54::i;9877:216::-;9544:555:::0;;;;;:::o;4943:573:34:-;5072:7;5110:399;5211:135;5372:2;5400:16;5442:13;5175:302;;;;;;;;;;;:::i;3367:268:19:-;3461:13;1371:66;3490:47;;3486:143;;3560:15;3569:5;3560:8;:15::i;3486:143::-;3613:5;3606:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4984:130:50;5065:16;5073:7;5065;:16::i;:::-;5057:50;;;;-1:-1:-1;;;5057:50:50;;;;;;;:::i;10499:112:46:-;10559:13;10591;10584:20;;;;;:::i;447:696:21:-;503:13;552:14;569:17;580:5;569:10;:17::i;:::-;589:1;569:21;552:38;;604:20;638:6;-1:-1:-1;;;;;627:18:21;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;627:18:21;-1:-1:-1;604:41:21;-1:-1:-1;765:28:21;;;781:2;765:28;820:280;-1:-1:-1;;851:5:21;-1:-1:-1;;;985:2:21;974:14;;969:30;851:5;956:44;1044:2;1035:11;;;-1:-1:-1;1068:10:21;1064:21;;1080:5;;1064:21;820:280;;;-1:-1:-1;1120:6:21;447:696;-1:-1:-1;;;447:696:21:o;1689:286:19:-;1754:11;1777:17;1803:3;1777:30;;1835:2;1821:4;:11;:16;1817:72;;;1874:3;1860:18;;-1:-1:-1;;;1860:18:19;;;;;;;;:::i;1817:72::-;1955:11;;1938:13;1955:4;1938:13;:::i;:::-;1930:36;;1689:286;-1:-1:-1;;;1689:286:19:o;3844:479:0:-;3932:22;3940:4;3946:7;3932;:22::i;:::-;3927:390;;4115:28;4135:7;4115:19;:28::i;:::-;4214:38;4242:4;4249:2;4214:19;:38::i;:::-;4022:252;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;4022:252:0;;;;;;;;;;-1:-1:-1;;;3970:336:0;;;;;;;:::i;1068:308:50:-;1184:4;-1:-1:-1;;;;;;1219:37:50;;-1:-1:-1;;;1219:37:50;;:98;;-1:-1:-1;;;;;;;1272:45:50;;-1:-1:-1;;;1272:45:50;1219:98;:150;;;;1333:36;1357:11;1333:23;:36::i;4768:165:23:-;4845:7;4871:55;4893:20;:18;:20::i;:::-;4915:10;8536:4:22;8530:11;-1:-1:-1;;;8554:23:22;;8606:4;8597:14;;8590:39;;;;8658:4;8649:14;;8642:34;8712:4;8697:20;;;8336:397;3348:307:48;3474:15;3492:32;3506:6;3514:9;3492:13;:32::i;:::-;3474:50;;3549:6;-1:-1:-1;;;;;3538:17:48;:7;-1:-1:-1;;;;;3538:17:48;;3534:48;;3564:18;;-1:-1:-1;;;3564:18:48;;;;;;;;;;;3534:48;-1:-1:-1;;;;;3597:20:48;;;;;;:11;:20;;;;;;;;3592:56;;3640:7;3626:22;;-1:-1:-1;;;3626:22:48;;;;;;;;:::i;3592:56::-;3464:191;3348:307;;;:::o;11516:1922:36:-;11653:23;:6;11664:11;11653:10;:23::i;:::-;14743:1;14734:6;:10;:38;;;;-1:-1:-1;14748:10:36;;-1:-1:-1;;;;;14748:10:36;:24;14734:38;14730:84;;;14793:21;;-1:-1:-1;;;14793:21:36;;;;;;;;;;;14730:84;14837:1;14828:6;:10;:46;;;;-1:-1:-1;14842:18:36;;-1:-1:-1;;;;;14842:18:36;:32;14828:46;14824:92;;;14895:21;;-1:-1:-1;;;14895:21:36;;;;;;;;;;;14824:92;14939:1;14930:6;:10;:38;;;;-1:-1:-1;14944:10:36;;-1:-1:-1;;;;;14944:10:36;:24;14930:38;14926:84;;;14989:21;;-1:-1:-1;;;14989:21:36;;;;;;;;;;;14926:84;15033:1;15024:6;:10;:46;;;;-1:-1:-1;15038:18:36;;-1:-1:-1;;;;;15038:18:36;:32;15024:46;15020:92;;;15091:21;;-1:-1:-1;;;15091:21:36;;;;;;;;;;;15020:92;11692:11;;:31;::::1;;;-1:-1:-1::0;11707:16:36;;11692:31:::1;11688:44;;;11725:7;;11688:44;11759:1;11745:11;:15;:52;;;;-1:-1:-1::0;11764:19:36::1;::::0;-1:-1:-1;;;;;11764:19:36::1;:33:::0;11745:52:::1;11741:104;;;11818:27;;-1:-1:-1::0;;;11818:27:36::1;;;;;;;;;;;11741:104;-1:-1:-1::0;;;;;11861:35:36;::::1;;::::0;;;:20:::1;:35;::::0;;;;;::::1;;11856:96;;11938:13;11917:35;;-1:-1:-1::0;;;11917:35:36::1;;;;;;;;:::i;11856:96::-;-1:-1:-1::0;;;;;11966:27:36;::::1;11962:1470;;12044:23;:6:::0;12055:11;12044:10:::1;:23::i;:::-;12032:9;:35;12028:110;;;12114:23;:6:::0;12125:11;12114:10:::1;:23::i;:::-;12092:46;;-1:-1:-1::0;;;12092:46:36::1;;;;;;;;:::i;12028:110::-;12156:10:::0;;12152:212:::1;;12213:18;::::0;12205:89:::1;::::0;12187:12:::1;::::0;-1:-1:-1;;;;;12213:18:36::1;::::0;12266:6;;12205:89:::1;::::0;::::1;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12186:108;;;12317:7;12312:37;;12333:16;;-1:-1:-1::0;;;12333:16:36::1;;;;;;;;;;;12312:37;12168:196;12152:212;12381:15:::0;;12377:223:::1;;12443:19;::::0;12435:95:::1;::::0;12417:12:::1;::::0;-1:-1:-1;;;;;12443:19:36::1;::::0;12497:11;;12435:95:::1;::::0;::::1;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12416:114;;;12553:7;12548:37;;12569:16;;-1:-1:-1::0;;;12569:16:36::1;;;;;;;;;;;12548:37;12398:202;12377:223;12629:23;:6:::0;12640:11;12629:10:::1;:23::i;:::-;12617:9;:35;12613:293;;;12703:14;12720:38;12734:23;:6:::0;12745:11;12734:10:::1;:23::i;:::-;12720:9;::::0;:13:::1;:38::i;:::-;12703:55;;12777:12;12803:10;-1:-1:-1::0;;;;;12795:24:36::1;12827:6;12795:43;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12776:62;;;12861:7;12856:35;;12877:14;;-1:-1:-1::0;;;12877:14:36::1;;;;;;;;;;;12856:35;12654:252;;12613:293;11962:1470;;;12992:10:::0;;12988:205:::1;;13114:18;::::0;13022:156:::1;::::0;-1:-1:-1;;;;;13022:38:36;;::::1;::::0;13082:10:::1;::::0;13114:18:::1;13154:6:::0;13022:38:::1;:156::i;:::-;13210:15:::0;;13206:216:::1;;13337:19;::::0;13245:162:::1;::::0;-1:-1:-1;;;;;13245:38:36;;::::1;::::0;13305:10:::1;::::0;13337:19:::1;13378:11:::0;13245:38:::1;:162::i;4026:405:50:-:0;-1:-1:-1;;;;;4105:16:50;;4097:58;;;;-1:-1:-1;;;4097:58:50;;;;;;;:::i;:::-;4174:16;4182:7;4174;:16::i;:::-;4173:17;4165:55;;;;-1:-1:-1;;;4165:55:50;;;;;;;:::i;:::-;4231:45;4260:1;4264:2;4268:7;4231:20;:45::i;:::-;-1:-1:-1;;;;;4287:13:50;;;;;;:9;:13;;;;;:18;;4304:1;;4287:13;:18;;4304:1;;4287:18;:::i;:::-;;;;-1:-1:-1;;4315:16:50;;;;:7;:16;;;;;;:21;;-1:-1:-1;;;;;;4315:21:50;-1:-1:-1;;;;;4315:21:50;;;;;;;;4352:17;;4315:16;;4352:17;;;6038:214:0;;:::o;3465:96:28:-;3523:7;3549:5;3553:1;3549;:5;:::i;3850:96::-;3908:7;3934:5;3938:1;3934;:5;:::i;2755:96::-;2813:7;2839:5;2843:1;2839;:5;:::i;10617:211:46:-;10776:45;10803:4;10809:2;10813:7;10776:26;:45::i;13444:387:36:-;13583:7;13602:24;13636:21;13674:46;13699:10;13711:8;13674:24;:46::i;:::-;13755:10;;13740:57;;-1:-1:-1;;;13740:57:36;;13667:53;;-1:-1:-1;;;;;;13755:10:36;;13740:39;;:57;;13780:10;;13667:53;;13740:57;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;13740:57:36;;;;;;;;;;;;:::i;:::-;13730:67;;13814:7;13822:1;13814:10;;;;;;;;:::i;:::-;;;;;;;13807:17;;;;13444:387;;;;;:::o;2059:405:19:-;2118:13;2143:11;2157:16;2168:4;2157:10;:16::i;:::-;2281:14;;;2292:2;2281:14;;;;;;;;;2143:30;;-1:-1:-1;2261:17:19;;2281:14;;;;;;;;;-1:-1:-1;;;2371:16:19;;;-1:-1:-1;2416:4:19;2407:14;;2400:28;;;;-1:-1:-1;2371:16:19;2059:405::o;10139:916:27:-;10192:7;;-1:-1:-1;;;10267:17:27;;10263:103;;-1:-1:-1;;;10304:17:27;;;-1:-1:-1;10349:2:27;10339:12;10263:103;-1:-1:-1;;;10383:5:27;:17;10379:103;;-1:-1:-1;;;10420:17:27;;;-1:-1:-1;10465:2:27;10455:12;10379:103;10508:8;10499:5;:17;10495:103;;10545:8;10536:17;;;-1:-1:-1;10581:2:27;10571:12;10495:103;10624:7;10615:5;:16;10611:100;;10660:7;10651:16;;;-1:-1:-1;10695:1:27;10685:11;10611:100;10737:7;10728:5;:16;10724:100;;10773:7;10764:16;;;-1:-1:-1;10808:1:27;10798:11;10724:100;10850:7;10841:5;:16;10837:100;;10886:7;10877:16;;;-1:-1:-1;10921:1:27;10911:11;10837:100;10963:7;10954:5;:16;10950:66;;11000:1;10990:11;11042:6;10139:916;-1:-1:-1;;10139:916:27:o;2407:149:21:-;2465:13;2497:52;-1:-1:-1;;;;;2509:22:21;;343:2;1818:437;1893:13;1918:19;1950:10;1954:6;1950:1;:10;:::i;:::-;:14;;1963:1;1950:14;:::i;:::-;-1:-1:-1;;;;;1940:25:21;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1940:25:21;;1918:47;;-1:-1:-1;;;1975:6:21;1982:1;1975:9;;;;;;;;:::i;:::-;;;;:15;-1:-1:-1;;;;;1975:15:21;;;;;;;;;-1:-1:-1;;;2000:6:21;2007:1;2000:9;;;;;;;;:::i;:::-;;;;:15;-1:-1:-1;;;;;2000:15:21;;;;;;;;-1:-1:-1;2030:9:21;2042:10;2046:6;2042:1;:10;:::i;:::-;:14;;2055:1;2042:14;:::i;:::-;2030:26;;2025:128;2062:1;2058;:5;2025:128;;;-1:-1:-1;;;2105:5:21;2113:3;2105:11;2096:21;;;;;;;:::i;:::-;;;;2084:6;2091:1;2084:9;;;;;;;;:::i;:::-;;;;:33;-1:-1:-1;;;;;2084:33:21;;;;;;;;-1:-1:-1;2141:1:21;2131:11;;;;;2065:3;;;:::i;:::-;;;2025:128;;;-1:-1:-1;2170:10:21;;2162:55;;;;-1:-1:-1;;;2162:55:21;;;;;;;:::i;2732:202:0:-;2817:4;-1:-1:-1;;;;;;2840:47:0;;-1:-1:-1;;;2840:47:0;;:87;;-1:-1:-1;;;;;;;;;;937:40:25;;;2891:36:0;829:155:25;3695:262:23;3748:7;3779:4;-1:-1:-1;;;;;3788:11:23;3771:28;;:63;;;;;3820:14;3803:13;:31;3771:63;3767:184;;;-1:-1:-1;3857:22:23;;3695:262::o;3767:184::-;3917:23;:21;:23::i;:::-;3910:30;;3695:262;:::o;3661:227:22:-;3739:7;3759:17;3778:18;3800:27;3811:4;3817:9;3800:10;:27::i;:::-;3758:69;;;;3837:18;3849:5;3837:11;:18::i;3122:96:28:-;3180:7;3206:5;3210:1;3206;:5;:::i;1355:203:8:-;1455:96;1475:5;1505:27;;;1534:4;1540:2;1544:5;1482:68;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;1482:68:8;;;;;;;;;;;;;;-1:-1:-1;;;;;1482:68:8;-1:-1:-1;;;;;;1482:68:8;;;;;;;;;;1455:19;:96::i;2640:572:54:-;-1:-1:-1;;;;;2839:18:54;;2835:183;;2873:40;2905:7;4018:10;:17;;3991:24;;;;:15;:24;;;;;:44;;;4045:24;;;;;;;;;;;;3915:161;2873:40;2835:183;;;2942:2;-1:-1:-1;;;;;2934:10:54;:4;-1:-1:-1;;;;;2934:10:54;;2930:88;;2960:47;2993:4;2999:7;2960:32;:47::i;:::-;-1:-1:-1;;;;;3031:16:54;;3027:179;;3063:45;3100:7;3063:36;:45::i;3027:179::-;3135:4;-1:-1:-1;;;;;3129:10:54;:2;-1:-1:-1;;;;;3129:10:54;;3125:81;;3155:40;3183:2;3187:7;3155:27;:40::i;13837:746:36:-;13996:18;;13951:16;;-1:-1:-1;;;;;13983:31:36;;;13996:18;;13983:31;;:64;;-1:-1:-1;14029:18:36;;-1:-1:-1;;;;;14018:29:36;;;14029:18;;14018:29;13983:64;13979:598;;;14087:16;;;14101:1;14087:16;;;;;;;;14063:21;;14087:16;;;;;;;;;;-1:-1:-1;;14140:18:36;;14063:40;;-1:-1:-1;;;;;;14127:31:36;;;14140:18;;14127:31;:96;;14214:9;14127:96;;;14177:18;;-1:-1:-1;;;;;14177:18:36;14127:96;14117:4;14122:1;14117:7;;;;;;;;:::i;:::-;-1:-1:-1;;;;;14117:106:36;;;:7;;;;;;;;;:106;14258:18;;14247:29;;;14258:18;;14247:29;:92;;14332:7;14247:92;;;14295:18;;-1:-1:-1;;;;;14295:18:36;14247:92;14237:4;14242:1;14237:7;;;;;;;;:::i;:::-;-1:-1:-1;;;;;14237:102:36;;;:7;;;;;;;;;;;:102;14360:4;-1:-1:-1;14353:11:36;;13979:598;14419:16;;;14433:1;14419:16;;;;;;;;;14395:21;;14419:16;;;;;;;;;;-1:-1:-1;14419:16:36;14395:40;;14459:9;14449:4;14454:1;14449:7;;;;;;;;:::i;:::-;-1:-1:-1;;;;;14449:19:36;;;:7;;;;;;;;;:19;14492:18;;14482:7;;14492:18;;;14482:4;;14492:18;;14482:7;;;;;;:::i;:::-;;;;;;:28;-1:-1:-1;;;;;14482:28:36;;;-1:-1:-1;;;;;14482:28:36;;;;;14534:7;14524:4;14529:1;14524:7;;;;;;;;:::i;2536:245:19:-;2597:7;2669:4;2633:40;;2696:2;2687:11;;2683:69;;;2721:20;;-1:-1:-1;;;2721:20:19;;;;;;;;;;;3963:180:23;4018:7;1929:95;4077:11;4090:14;4106:13;4129:4;4054:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;4044:92;;;;;;4037:99;;3963:180;:::o;2145:730:22:-;2226:7;2235:12;2263:9;:16;2283:2;2263:22;2259:610;;;2599:4;2584:20;;2578:27;2648:4;2633:20;;2627:27;2705:4;2690:20;;2684:27;2301:9;2676:36;2746:25;2757:4;2676:36;2578:27;2627;2746:10;:25::i;:::-;2739:32;;;;;;;;;2259:610;-1:-1:-1;2818:1:22;;-1:-1:-1;2822:35:22;2259:610;2145:730;;;;;:::o;570:511::-;647:20;638:5;:29;;;;;;;;:::i;:::-;;634:441;;;570:511;:::o;634:441::-;743:29;734:5;:38;;;;;;;;:::i;:::-;;730:345;;;788:34;;-1:-1:-1;;;788:34:22;;;;;;;:::i;730:345::-;852:35;843:5;:44;;;;;;;;:::i;:::-;;839:236;;;903:41;;-1:-1:-1;;;903:41:22;;;;;;;:::i;839:236::-;974:30;965:5;:39;;;;;;;;:::i;:::-;;961:114;;;1020:44;;-1:-1:-1;;;1020:44:22;;;;;;;:::i;5173:642:8:-;5592:23;5618:69;5646:4;5618:69;;;;;;;;;;;;;;;;;5626:5;-1:-1:-1;;;;;5618:27:8;;;:69;;;;;:::i;:::-;5592:95;;5705:10;:17;5726:1;5705:22;:56;;;;5742:10;5731:30;;;;;;;;;;;;:::i;:::-;5697:111;;;;-1:-1:-1;;;5697:111:8;;;;;;;:::i;4693:989:54:-;4977:22;5024:1;5002:19;5016:4;5002:13;:19::i;:::-;:23;;;;:::i;:::-;5035:18;5056:26;;;:17;:26;;;;;;4977:48;;-1:-1:-1;5186:28:54;;;5182:323;;-1:-1:-1;;;;;5252:18:54;;5230:19;5252:18;;;:12;:18;;;;;;;;:34;;;;;;;;;5301:30;;;;;;:44;;;5417:30;;:17;:30;;;;;:43;;;5182:323;-1:-1:-1;5598:26:54;;;;:17;:26;;;;;;;;5591:33;;;-1:-1:-1;;;;;5641:18:54;;;;;:12;:18;;;;;:34;;;;;;;5634:41;4693:989::o;5970:1061::-;6244:10;:17;6219:22;;6244:21;;6264:1;;6244:21;:::i;:::-;6275:18;6296:24;;;:15;:24;;;;;;6664:10;:26;;6219:46;;-1:-1:-1;6296:24:54;;6219:46;;6664:26;;;;;;:::i;:::-;;;;;;;;;6642:48;;6726:11;6701:10;6712;6701:22;;;;;;;;:::i;:::-;;;;;;;;;;;;:36;;;;6805:28;;;:15;:28;;;;;;;:41;;;6974:24;;;;;6967:31;7008:10;:16;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;6041:990;;;5970:1061;:::o;3506:214::-;3590:14;3607:17;3621:2;3607:13;:17::i;:::-;-1:-1:-1;;;;;3634:16:54;;;;;;;:12;:16;;;;;;;;:24;;;;;;;;:34;;;3678:26;;;:17;:26;;;;;;:35;;;;-1:-1:-1;3506:214:54:o;5009:1456:22:-;5097:7;;-1:-1:-1;;;;;6008:79:22;;6004:161;;;-1:-1:-1;6119:1:22;;-1:-1:-1;6123:30:22;6103:51;;6004:161;6259:14;6276:24;6286:4;6292:1;6295;6298;6276:24;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6276:24:22;;-1:-1:-1;;6276:24:22;;;-1:-1:-1;;;;;;;6314:20:22;;6310:101;;6366:1;6370:29;6350:50;;;;;;;6310:101;6429:6;-1:-1:-1;6437:20:22;;-1:-1:-1;5009:1456:22;;;;;;;;:::o;4108:223:16:-;4241:12;4272:52;4294:6;4302:4;4308:1;4311:12;4241;5446;5460:23;5487:6;-1:-1:-1;;;;;5487:11:16;5506:5;5513:4;5487:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5445:73;;;;5535:69;5562:6;5570:7;5579:10;5591:12;5535:26;:69::i;:::-;5528:76;5165:446;-1:-1:-1;;;;;;;5165:446:16:o;7671:628::-;7851:12;7879:7;7875:418;;;7906:17;;7902:286;;-1:-1:-1;;;;;1702:19:16;;;8113:60;;;;-1:-1:-1;;;8113:60:16;;;;;;;:::i;:::-;-1:-1:-1;8208:10:16;8201:17;;7875:418;8249:33;8257:10;8269:12;8980:17;;:21;8976:379;;9208:10;9202:17;9264:15;9251:10;9247:2;9243:19;9236:44;8976:379;9331:12;9324:20;;-1:-1:-1;;;9324:20:16;;;;;;;;:::i;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;417:122:55;508:5;490:24;483:5;480:35;470:63;;529:1;526;519:12;545:139;616:20;;645:33;616:20;645:33;:::i;690:329::-;749:6;798:2;786:9;777:7;773:23;769:32;766:119;;;804:79;426:5697:34;;;804:79:55;924:1;949:53;994:7;974:9;949:53;:::i;1180:120::-;-1:-1:-1;;;;;;1090:78:55;;1252:23;1025:149;1306:137;1376:20;;1405:32;1376:20;1405:32;:::i;1449:327::-;1507:6;1556:2;1544:9;1535:7;1531:23;1527:32;1524:119;;;1562:79;426:5697:34;;;1562:79:55;1682:1;1707:52;1751:7;1731:9;1707:52;:::i;1878:109::-;1852:13;;1845:21;1959;1954:3;1947:34;1878:109;;:::o;1993:210::-;2118:2;2103:18;;2131:65;2107:9;2169:6;2131:65;:::i;2209:126::-;-1:-1:-1;;;;;2275:54:55;;2209:126::o;2341:96::-;2378:7;2407:24;2425:5;2407:24;:::i;2443:118::-;2530:24;2548:5;2530:24;:::i;2567:222::-;2698:2;2683:18;;2711:71;2687:9;2755:6;2711:71;:::i;3075:307::-;3143:1;3153:113;3167:6;3164:1;3161:13;3153:113;;;3243:11;;;3237:18;3224:11;;;3217:39;3189:2;3182:10;3153:113;;;3284:6;3281:1;3278:13;3275:101;;;-1:-1:-1;;3364:1:55;3346:16;;3339:27;3075:307::o;3388:102::-;3480:2;3460:14;-1:-1:-1;;3456:28:55;;3388:102::o;3496:364::-;3584:3;3612:39;3645:5;2875:12;;2795:99;3612:39;3006:19;;;3058:4;3049:14;;3660:78;;3747:52;3792:6;3787:3;3780:4;3773:5;3769:16;3747:52;:::i;:::-;3824:29;3846:6;3824:29;:::i;:::-;3815:39;;;;3496:364;-1:-1:-1;;;3496:364:55:o;3866:313::-;4017:2;4030:47;;;4002:18;;4094:78;4002:18;4158:6;4094:78;:::i;4747:179::-;4816:10;4837:46;4879:3;4871:6;4837:46;:::i;:::-;-1:-1:-1;;4915:4:55;4906:14;;4747:179::o;5081:732::-;5200:3;5229:54;5277:5;2875:12;;2795:99;5229:54;3006:19;;;3058:4;3049:14;;;;4606;;;5519:1;5504:284;5529:6;5526:1;5523:13;5504:284;;;5605:6;5599:13;5632:63;5691:3;5676:13;5632:63;:::i;:::-;5625:70;-1:-1:-1;5034:4:55;5025:14;;5708:70;-1:-1:-1;;5551:1:55;5544:9;5504:284;;;-1:-1:-1;5804:3:55;;5081:732;-1:-1:-1;;;;;5081:732:55:o;5819:373::-;6000:2;6013:47;;;5985:18;;6077:108;5985:18;6171:6;6077:108;:::i;6198:118::-;6303:5;6285:24;3310:202:20;6322:222:55;6453:2;6438:18;;6466:71;6442:9;6510:6;6466:71;:::i;6550:122::-;6623:24;6641:5;6623:24;:::i;6678:139::-;6749:20;;6778:33;6749:20;6778:33;:::i;7205:552::-;7262:8;7272:6;7322:3;7315:4;7307:6;7303:17;7299:27;7289:122;;7330:79;426:5697:34;;;7330:79:55;-1:-1:-1;7430:20:55;;-1:-1:-1;;;;;7462:30:55;;7459:117;;;7495:79;426:5697:34;;;7495:79:55;7609:4;7601:6;7597:17;7585:29;;7663:3;7655:4;7647:6;7643:17;7633:8;7629:32;7626:41;7623:128;;;7670:79;426:5697:34;;;7763:1109:55;7869:6;7877;7885;7893;7901;7909;7958:3;7946:9;7937:7;7933:23;7929:33;7926:120;;;7965:79;426:5697:34;;;7965:79:55;8085:1;8110:53;8155:7;8135:9;8110:53;:::i;:::-;8100:63;;8056:117;8212:2;8238:53;8283:7;8274:6;8263:9;8259:22;8238:53;:::i;:::-;8228:63;;8183:118;8340:2;8366:53;8411:7;8402:6;8391:9;8387:22;8366:53;:::i;:::-;8356:63;;8311:118;8468:2;8494:53;8539:7;8530:6;8519:9;8515:22;8494:53;:::i;:::-;8484:63;;8439:118;8624:3;8613:9;8609:19;8596:33;-1:-1:-1;;;;;8648:6:55;8645:30;8642:117;;;8678:79;426:5697:34;;;8678:79:55;8791:64;8847:7;8838:6;8827:9;8823:22;8791:64;:::i;:::-;8773:82;;;;8567:298;7763:1109;;;;;;;;:::o;8878:474::-;8946:6;8954;9003:2;8991:9;8982:7;8978:23;8974:32;8971:119;;;9009:79;426:5697:34;;;9009:79:55;9129:1;9154:53;9199:7;9179:9;9154:53;:::i;:::-;9144:63;;9100:117;9256:2;9282:53;9327:7;9318:6;9307:9;9303:22;9282:53;:::i;:::-;9272:63;;9227:118;8878:474;;;;;:::o;9358:329::-;9417:6;9466:2;9454:9;9445:7;9441:23;9437:32;9434:119;;;9472:79;426:5697:34;;;9472:79:55;9592:1;9617:53;9662:7;9642:9;9617:53;:::i;10736:474::-;10804:6;10812;10861:2;10849:9;10840:7;10836:23;10832:32;10829:119;;;10867:79;426:5697:34;;;10867:79:55;10987:1;11012:53;11057:7;11037:9;11012:53;:::i;:::-;11002:63;;10958:117;11114:2;11140:53;11185:7;11176:6;11165:9;11161:22;11140:53;:::i;11282:142::-;11332:9;11365:53;11383:34;11392:24;11410:5;11392:24;:::i;11383:34::-;11365:53;:::i;11430:126::-;11480:9;11513:37;11544:5;11513:37;:::i;11562:154::-;11640:9;11673:37;11704:5;11673:37;:::i;11722:187::-;11837:65;11896:5;11837:65;:::i;11915:278::-;12074:2;12059:18;;12087:99;12063:9;12159:6;12087:99;:::i;12199:1109::-;12305:6;12313;12321;12329;12337;12345;12394:3;12382:9;12373:7;12369:23;12365:33;12362:120;;;12401:79;426:5697:34;;;12401:79:55;12521:1;12546:53;12591:7;12571:9;12546:53;:::i;:::-;12536:63;;12492:117;12648:2;12674:53;12719:7;12710:6;12699:9;12695:22;12674:53;:::i;13469:115::-;-1:-1:-1;;;;;;13379:78:55;;13554:23;13314:149;14152:179;14221:10;14242:46;14284:3;14276:6;14242:46;:::i;14486:732::-;14605:3;14634:54;14682:5;2875:12;;2795:99;14634:54;3006:19;;;3058:4;3049:14;;;;4606;;;14924:1;14909:284;14934:6;14931:1;14928:13;14909:284;;;15010:6;15004:13;15037:63;15096:3;15081:13;15037:63;:::i;:::-;15030:70;-1:-1:-1;5034:4:55;5025:14;;15113:70;-1:-1:-1;;14956:1:55;14949:9;14909:284;;15224:1215;15611:3;15596:19;;15625:69;15600:9;15667:6;15625:69;:::i;:::-;15741:9;15735:4;15731:20;15726:2;15715:9;15711:18;15704:48;15769:78;15842:4;15833:6;15769:78;:::i;:::-;15761:86;;15894:9;15888:4;15884:20;15879:2;15868:9;15864:18;15857:48;15922:78;15995:4;15986:6;15922:78;:::i;:::-;15914:86;;16010:72;16078:2;16067:9;16063:18;16054:6;16010:72;:::i;:::-;16092:73;16160:3;16149:9;16145:19;16136:6;16092:73;:::i;:::-;16175;16243:3;16232:9;16228:19;16219:6;16175:73;:::i;:::-;16296:9;16290:4;16286:20;16280:3;16269:9;16265:19;16258:49;16324:108;16427:4;16418:6;16324:108;:::i;16445:332::-;16604:2;16589:18;;16617:71;16593:9;16661:6;16617:71;:::i;:::-;16698:72;16766:2;16755:9;16751:18;16742:6;16698:72;:::i;16783:180::-;-1:-1:-1;;;16828:1:55;16821:88;16928:4;16925:1;16918:15;16952:4;16949:1;16942:15;16969:320;17050:1;17040:12;;17097:1;17087:12;;;17108:81;;17174:4;17166:6;17162:17;17152:27;;17108:81;17236:2;17228:6;17225:14;17205:18;17202:38;17199:84;;;17255:18;;:::i;:::-;17020:269;16969:320;;;:::o;17295:143::-;17377:13;;17399:33;17377:13;17399:33;:::i;17444:351::-;17514:6;17563:2;17551:9;17542:7;17538:23;17534:32;17531:119;;;17569:79;426:5697:34;;;17569:79:55;17689:1;17714:64;17770:7;17750:9;17714:64;:::i;17801:775::-;18072:3;18057:19;;18086:71;18061:9;18130:6;18086:71;:::i;:::-;18167:72;18235:2;18224:9;18220:18;18211:6;18167:72;:::i;:::-;18249;18317:2;18306:9;18302:18;18293:6;18249:72;:::i;:::-;18331;18399:2;18388:9;18384:18;18375:6;18331:72;:::i;:::-;18413:73;18481:3;18470:9;18466:19;18457:6;18413:73;:::i;:::-;18496;18564:3;18553:9;18549:19;18540:6;18496:73;:::i;18815:366::-;19042:2;3006:19;;18957:3;3058:4;3049:14;;18722:34;18699:58;;-1:-1:-1;;;18786:2:55;18774:15;;18767:35;18971:74;-1:-1:-1;19054:93:55;-1:-1:-1;19172:2:55;19163:12;;18815:366::o;19187:419::-;19391:2;19404:47;;;19376:18;;19468:131;19376:18;19468:131;:::i;19852:366::-;20079:2;3006:19;;19994:3;3058:4;3049:14;;19752:34;19729:58;;-1:-1:-1;;;19816:2:55;19804:15;;19797:42;20008:74;-1:-1:-1;20091:93:55;19612:234;20224:419;20428:2;20441:47;;;20413:18;;20505:131;20413:18;20505:131;:::i;20835:366::-;21062:2;3006:19;;20977:3;3058:4;3049:14;;20789:32;20766:56;;20991:74;-1:-1:-1;21074:93:55;-1:-1:-1;21192:2:55;21183:12;;20835:366::o;21207:419::-;21411:2;21424:47;;;21396:18;;21488:131;21396:18;21488:131;:::i;21866:366::-;22093:2;3006:19;;22008:3;3058:4;3049:14;;21772:34;21749:58;;-1:-1:-1;;;21836:2:55;21824:15;;21817:36;22022:74;-1:-1:-1;22105:93:55;21632:228;22238:419;22442:2;22455:47;;;22427:18;;22519:131;22427:18;22519:131;:::i;22663:180::-;-1:-1:-1;;;22708:1:55;22701:88;22808:4;22805:1;22798:15;22832:4;22829:1;22822:15;23026:366;23253:2;3006:19;;23168:3;3058:4;3049:14;;-1:-1:-1;;;22966:47:55;;23182:74;-1:-1:-1;23265:93:55;22849:171;23398:419;23602:2;23615:47;;;23587:18;;23679:131;23587:18;23679:131;:::i;24054:366::-;24281:2;3006:19;;24196:3;3058:4;3049:14;;23963:34;23940:58;;-1:-1:-1;;;24027:2:55;24015:15;;24008:33;24210:74;-1:-1:-1;24293:93:55;23823:225;24426:419;24630:2;24643:47;;;24615:18;;24707:131;24615:18;24707:131;:::i;24851:775::-;25122:3;25107:19;;25136:71;25111:9;25180:6;25136:71;:::i;:::-;25217:72;25285:2;25274:9;25270:18;25261:6;25217:72;:::i;25632:180::-;-1:-1:-1;;;25677:1:55;25670:88;25777:4;25774:1;25767:15;25801:4;25798:1;25791:15;25818:180;-1:-1:-1;;;25863:1:55;25856:88;25963:4;25960:1;25953:15;25987:4;25984:1;25977:15;26004:191;26044:4;26137:1;26134;26131:8;26128:34;;;26142:18;;:::i;:::-;-1:-1:-1;26180:9:55;;26004:191::o;26201:180::-;-1:-1:-1;;;26246:1:55;26239:88;26346:4;26343:1;26336:15;26370:4;26367:1;26360:15;26387:233;26426:3;-1:-1:-1;;26488:5:55;26485:77;26482:103;;;26565:18;;:::i;:::-;-1:-1:-1;26612:1:55;26601:13;;26387:233::o;26626:143::-;26708:13;;26730:33;26708:13;26730:33;:::i;26775:351::-;26845:6;26894:2;26882:9;26873:7;26869:23;26865:32;26862:119;;;26900:79;426:5697:34;;;26900:79:55;27020:1;27045:64;27101:7;27081:9;27045:64;:::i;27286:377::-;27392:3;27420:39;27453:5;2875:12;;2795:99;27420:39;27573:52;27618:6;27613:3;27606:4;27599:5;27595:16;27573:52;:::i;:::-;27641:16;;;;;27286:377;-1:-1:-1;;27286:377:55:o;28236:701::-;28517:3;28539:95;28630:3;28621:6;28539:95;:::i;:::-;28532:102;;28651:95;28742:3;28733:6;28651:95;:::i;:::-;-1:-1:-1;;;27786:31:55;;28644:102;-1:-1:-1;28222:1:55;28213:11;;28763:148;27830:400;29130:366;29357:2;3006:19;;29272:3;3058:4;3049:14;;29083:33;29060:57;;29286:74;-1:-1:-1;29369:93:55;28943:181;29502:419;29706:2;29719:47;;;29691:18;;29783:131;29691:18;29783:131;:::i;29927:553::-;30142:3;30127:19;;30156:71;30131:9;30200:6;30156:71;:::i;:::-;30237:72;30305:2;30294:9;30290:18;30281:6;30237:72;:::i;:::-;30319;30387:2;30376:9;30372:18;30363:6;30319:72;:::i;:::-;30401;30469:2;30458:9;30454:18;30445:6;30401:72;:::i;:::-;29927:553;;;;;;;:::o;30486:::-;30701:3;30686:19;;30715:71;30690:9;30759:6;30715:71;:::i;:::-;30796:72;30864:2;30853:9;30849:18;30840:6;30796:72;:::i;31045:180::-;-1:-1:-1;;;31090:1:55;31083:88;31190:4;31187:1;31180:15;31214:4;31211:1;31204:15;31457:154;31500:11;31536:29;31560:3;31554:10;3486::20;3310:202;31730:594:55;31814:5;31845:38;31877:5;2875:12;;2795:99;31845:38;4615:4;4606:14;;31994:35;4606:14;31994:35;:::i;:::-;31985:44;;32053:2;32045:6;32042:14;32039:278;;;32124:169;-1:-1:-1;;32179:6:55;32175:2;32171:15;32168:1;32164:23;31701:16;;31617:107;32124:169;32101:5;32080:227;32071:236;;32039:278;31820:504;;31730:594;;;:::o;33498:967::-;-1:-1:-1;;;32447:49:55;;32902:2;32893:12;33880:3;34067:95;32893:12;34149:6;34067:95;:::i;:::-;-1:-1:-1;;;33034:43:55;;33483:2;33474:12;;-1:-1:-1;34344:95:55;33474:12;34426:6;34344:95;:::i;35148:379::-;35332:3;35497;35354:147;3310:202:20;35718:366:55;35945:2;3006:19;;35860:3;3058:4;3049:14;;35673:31;35650:55;;35874:74;-1:-1:-1;35957:93:55;35533:179;36090:419;36294:2;36307:47;;;36279:18;;36371:131;36279:18;36371:131;:::i;36696:366::-;36923:2;3006:19;;36838:3;3058:4;3049:14;;-1:-1:-1;;;36632:51:55;;36852:74;-1:-1:-1;36935:93:55;36515:175;37068:419;37272:2;37285:47;;;37257:18;;37349:131;37257:18;37349:131;:::i;37493:305::-;37533:3;37668:74;;37662:81;;37659:107;;;37746:18;;:::i;:::-;-1:-1:-1;37783:9:55;;37493:305::o;37804:348::-;37844:7;38089:1;-1:-1:-1;;38017:74:55;38014:1;38011:81;38006:1;37999:9;37992:17;37988:105;37985:131;;;38096:18;;:::i;:::-;-1:-1:-1;38137:9:55;;37804:348::o;38158:185::-;38198:1;38288;38278:35;;38293:18;;:::i;:::-;-1:-1:-1;38328:9:55;;38158:185::o;38349:483::-;38558:2;38543:18;;38571:71;38547:9;38615:6;38571:71;:::i;:::-;38689:9;38683:4;38679:20;38674:2;38663:9;38659:18;38652:48;38717:108;38820:4;38811:6;38717:108;:::i;38838:281::-;38921:27;38943:4;38921:27;:::i;:::-;38913:6;38909:40;39051:6;39039:10;39036:22;-1:-1:-1;;;;;39003:10:55;39000:34;38997:62;38994:88;;;39062:18;;:::i;:::-;39098:2;39091:22;-1:-1:-1;;38838:281:55:o;39125:129::-;39159:6;39186:20;73:2;67:9;;7:75;39186:20;39176:30;;39215:33;39243:4;39235:6;39215:33;:::i;39260:311::-;39337:4;-1:-1:-1;;;;;39419:6:55;39416:30;39413:56;;;39449:18;;:::i;:::-;-1:-1:-1;39499:4:55;39487:17;;;39549:15;;39260:311::o;39594:732::-;39701:5;39726:81;39742:64;39799:6;39742:64;:::i;:::-;39726:81;:::i;:::-;39842:21;;;39717:90;-1:-1:-1;39890:4:55;39879:16;;;;39931:17;;39919:30;;39961:15;;;39958:122;;;39991:79;426:5697:34;;;39991:79:55;40106:6;40089:231;40123:6;40118:3;40115:15;40089:231;;;40198:3;40227:48;40271:3;40259:10;40227:48;:::i;:::-;40215:61;;-1:-1:-1;40305:4:55;40296:14;;;;40140;40089:231;;;40093:21;39707:619;;39594:732;;;;;:::o;40349:385::-;40431:5;40480:3;40473:4;40465:6;40461:17;40457:27;40447:122;;40488:79;426:5697:34;;;40488:79:55;40598:6;40592:13;40623:105;40724:3;40716:6;40709:4;40701:6;40697:17;40623:105;:::i;40740:554::-;40835:6;40884:2;40872:9;40863:7;40859:23;40855:32;40852:119;;;40890:79;426:5697:34;;;40890:79:55;41010:24;;-1:-1:-1;;;;;41050:30:55;;41047:117;;;41083:79;426:5697:34;;;41083:79:55;41188:89;41269:7;41260:6;41249:9;41245:22;41188:89;:::i;41300:171::-;41339:3;41398:15;41395:41;;41416:18;;:::i;:::-;-1:-1:-1;;;41452:13:55;;41300:171::o;41665:366::-;41892:2;3006:19;;;41617:34;3049:14;;41594:58;;;41807:3;41904:93;41477:182;42037:419;42241:2;42254:47;;;42226:18;;42318:131;42226:18;42318:131;:::i;42462:442::-;42649:2;42634:18;;42662:71;42638:9;42706:6;42662:71;:::i;:::-;42743:72;42811:2;42800:9;42796:18;42787:6;42743:72;:::i;:::-;42825;42893:2;42882:9;42878:18;42869:6;42825:72;:::i;42910:664::-;43153:3;43138:19;;43167:71;43142:9;43211:6;43167:71;:::i;:::-;43248:72;43316:2;43305:9;43301:18;43292:6;43248:72;:::i;:::-;43330;43398:2;43387:9;43383:18;43374:6;43330:72;:::i;:::-;43412;43480:2;43469:9;43465:18;43456:6;43412:72;:::i;:::-;43494:73;43562:3;43551:9;43547:19;43538:6;43494:73;:::i;43580:180::-;-1:-1:-1;;;43625:1:55;43618:88;43725:4;43722:1;43715:15;43749:4;43746:1;43739:15;43946:366;44173:2;3006:19;;44088:3;3058:4;3049:14;;-1:-1:-1;;;43883:50:55;;44102:74;-1:-1:-1;44185:93:55;43766:174;44318:419;44522:2;44535:47;;;44507:18;;44599:131;44507:18;44599:131;:::i;44930:366::-;45157:2;3006:19;;45072:3;3058:4;3049:14;;44883:33;44860:57;;45086:74;-1:-1:-1;45169:93:55;44743:181;45302:419;45506:2;45519:47;;;45491:18;;45583:131;45491:18;45583:131;:::i;45954:366::-;46181:2;3006:19;;46096:3;3058:4;3049:14;;45867:34;45844:58;;-1:-1:-1;;;45931:2:55;45919:15;;45912:29;46110:74;-1:-1:-1;46193:93:55;45727:221;46326:419;46530:2;46543:47;;;46515:18;;46607:131;46515:18;46607:131;:::i;46751:116::-;1852:13;;1845:21;46821;1782:90;46873:137;46952:13;;46974:30;46952:13;46974:30;:::i;47016:345::-;47083:6;47132:2;47120:9;47111:7;47107:23;47103:32;47100:119;;;47138:79;426:5697:34;;;47138:79:55;47258:1;47283:61;47336:7;47316:9;47283:61;:::i;47602:366::-;47829:2;3006:19;;47744:3;3058:4;3049:14;;47507:34;47484:58;;-1:-1:-1;;;47571:2:55;47559:15;;47552:37;47758:74;-1:-1:-1;47841:93:55;47367:229;47974:419;48178:2;48191:47;;;48163:18;;48255:131;48163:18;48255:131;:::i;48491:112::-;48474:4;48463:16;;48574:22;48399:86;48609:545;48820:3;48805:19;;48834:71;48809:9;48878:6;48834:71;:::i;:::-;48915:68;48979:2;48968:9;48964:18;48955:6;48915:68;:::i;:::-;48993:72;49061:2;49050:9;49046:18;49037:6;48993:72;:::i;50567:271::-;50697:3;50719:93;50808:3;50799:6;50719:93;:::i;51029:366::-;51256:2;3006:19;;51171:3;3058:4;3049:14;;50984:31;50961:55;;51185:74;-1:-1:-1;51268:93:55;50844:179;51401:419;51605:2;51618:47;;;51590:18;;51682:131;51590:18;51682:131;:::i"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "3537400",
            "executionCost": "infinite",
            "totalCost": "infinite"
          },
          "external": {
            "DEFAULT_ADMIN_ROLE()": "1306",
            "PROJECT_ADMIN_ROLE()": "infinite",
            "addAuthority(address)": "infinite",
            "addLinkPrice()": "2548",
            "addLinkPriceMASA()": "3098",
            "authorities(address)": "infinite",
            "balanceOf(address)": "infinite",
            "burn(uint256)": "infinite",
            "disablePaymentMethod(address)": "infinite",
            "eip712Domain()": "infinite",
            "enablePaymentMethod(address)": "infinite",
            "enabledPaymentMethod(address)": "infinite",
            "enabledPaymentMethods(uint256)": "infinite",
            "exists(uint256)": "infinite",
            "getEnabledPaymentMethods()": "infinite",
            "getIdentityId(uint256)": "infinite",
            "getMintPrice(address)": "infinite",
            "getMintPriceWithProtocolFee(address)": "infinite",
            "getProtocolFee(address,uint256)": "infinite",
            "getRoleAdmin(bytes32)": "infinite",
            "grantRole(bytes32,address)": "infinite",
            "hasRole(bytes32,address)": "infinite",
            "masaToken()": "infinite",
            "mint(address,address,address,uint256,bytes)": "infinite",
            "mint(address,uint256,address,uint256,bytes)": "infinite",
            "mintPrice()": "3010",
            "mintPriceMASA()": "2526",
            "name()": "infinite",
            "ownerOf(uint256)": "infinite",
            "projectFeeReceiver()": "infinite",
            "protocolFeeAmount()": "3252",
            "protocolFeePercent()": "3604",
            "protocolFeeReceiver()": "infinite",
            "queryLinkPrice()": "3450",
            "queryLinkPriceMASA()": "2460",
            "removeAuthority(address)": "infinite",
            "renounceRole(bytes32,address)": "infinite",
            "revokeRole(bytes32,address)": "infinite",
            "setAddLinkPrice(uint256)": "infinite",
            "setAddLinkPriceMASA(uint256)": "infinite",
            "setMasaToken(address)": "infinite",
            "setMintPrice(uint256)": "infinite",
            "setMintPriceMASA(uint256)": "infinite",
            "setProjectFeeReceiver(address)": "infinite",
            "setProtocolFeeAmount(uint256)": "infinite",
            "setProtocolFeePercent(uint256)": "infinite",
            "setProtocolFeeReceiver(address)": "infinite",
            "setQueryLinkPrice(uint256)": "infinite",
            "setQueryLinkPriceMASA(uint256)": "infinite",
            "setSoulboundIdentity(address)": "infinite",
            "setStableCoin(address)": "infinite",
            "setSwapRouter(address)": "infinite",
            "setWrappedNativeToken(address)": "infinite",
            "soulboundIdentity()": "infinite",
            "stableCoin()": "infinite",
            "supportsInterface(bytes4)": "infinite",
            "swapRouter()": "infinite",
            "symbol()": "infinite",
            "tokenByIndex(uint256)": "infinite",
            "tokenOfOwnerByIndex(address,uint256)": "infinite",
            "tokenURI(uint256)": "infinite",
            "totalSupply()": "2501",
            "wrappedNativeToken()": "infinite"
          },
          "internal": {
            "_hash(address,address,uint256)": "infinite",
            "_hash(uint256,address,uint256)": "infinite"
          }
        },
        "methodIdentifiers": {
          "DEFAULT_ADMIN_ROLE()": "a217fddf",
          "PROJECT_ADMIN_ROLE()": "41c04d5e",
          "addAuthority(address)": "26defa73",
          "addLinkPrice()": "1f37c124",
          "addLinkPriceMASA()": "776d1a54",
          "authorities(address)": "91223d69",
          "balanceOf(address)": "70a08231",
          "burn(uint256)": "42966c68",
          "disablePaymentMethod(address)": "94a665e9",
          "eip712Domain()": "84b0196e",
          "enablePaymentMethod(address)": "c86aadb6",
          "enabledPaymentMethod(address)": "7a0d1646",
          "enabledPaymentMethods(uint256)": "0513c3e9",
          "exists(uint256)": "4f558e79",
          "getEnabledPaymentMethods()": "10200519",
          "getIdentityId(uint256)": "c1177d19",
          "getMintPrice(address)": "719d0f2b",
          "getMintPriceWithProtocolFee(address)": "eb93e855",
          "getProtocolFee(address,uint256)": "217a2c7b",
          "getRoleAdmin(bytes32)": "248a9ca3",
          "grantRole(bytes32,address)": "2f2ff15d",
          "hasRole(bytes32,address)": "91d14854",
          "masaToken()": "ebda4396",
          "mint(address,address,address,uint256,bytes)": "7ad09dff",
          "mint(address,uint256,address,uint256,bytes)": "20d558aa",
          "mintPrice()": "6817c76c",
          "mintPriceMASA()": "1830e881",
          "name()": "06fdde03",
          "ownerOf(uint256)": "6352211e",
          "projectFeeReceiver()": "99b589cb",
          "protocolFeeAmount()": "8ec9c93b",
          "protocolFeePercent()": "d6e6eb9f",
          "protocolFeeReceiver()": "39a51be5",
          "queryLinkPrice()": "b97d6b23",
          "queryLinkPriceMASA()": "13150b48",
          "removeAuthority(address)": "d544e010",
          "renounceRole(bytes32,address)": "36568abe",
          "revokeRole(bytes32,address)": "d547741f",
          "setAddLinkPrice(uint256)": "289c686b",
          "setAddLinkPriceMASA(uint256)": "3c72ae70",
          "setMasaToken(address)": "76ad1997",
          "setMintPrice(uint256)": "f4a0a528",
          "setMintPriceMASA(uint256)": "4962a158",
          "setProjectFeeReceiver(address)": "8d018461",
          "setProtocolFeeAmount(uint256)": "00bdfde5",
          "setProtocolFeePercent(uint256)": "a4983421",
          "setProtocolFeeReceiver(address)": "46877b1a",
          "setQueryLinkPrice(uint256)": "fd48ac83",
          "setQueryLinkPriceMASA(uint256)": "7db8cb68",
          "setSoulboundIdentity(address)": "3ad3033e",
          "setStableCoin(address)": "23af4e17",
          "setSwapRouter(address)": "41273657",
          "setWrappedNativeToken(address)": "da058ae3",
          "soulboundIdentity()": "77bed5ed",
          "stableCoin()": "992642e5",
          "supportsInterface(bytes4)": "01ffc9a7",
          "swapRouter()": "c31c9c07",
          "symbol()": "95d89b41",
          "tokenByIndex(uint256)": "4f6ccce7",
          "tokenOfOwnerByIndex(address,uint256)": "2f745c59",
          "tokenURI(uint256)": "c87b56dd",
          "totalSupply()": "18160ddd",
          "wrappedNativeToken()": "17fcb39b"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseTokenURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"soulboundIdentity\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wrappedNativeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableCoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"masaToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"projectFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"protocolFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"protocolFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFeePercent\",\"type\":\"uint256\"}],\"internalType\":\"struct PaymentGateway.PaymentParams\",\"name\":\"paymentParams\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyAdded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityNotExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"CallerNotOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InsufficientEthAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentMethod\",\"type\":\"address\"}],\"name\":\"InvalidPaymentMethod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20token\",\"type\":\"address\"}],\"name\":\"NonExistingErc20Token\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"NotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotLinkedToAnIdentitySBT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PaymentParamsNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProtocolFeeReceiverNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RefundFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SameValue\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UserMustHaveProtocolOrProjectAdminRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"authorityAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"signatureDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentMethod\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintPrice\",\"type\":\"uint256\"}],\"name\":\"SoulboundGreenMintedToAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"identityId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"authorityAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"signatureDate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymentMethod\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintPrice\",\"type\":\"uint256\"}],\"name\":\"SoulboundGreenMintedToIdentity\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROJECT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authority\",\"type\":\"address\"}],\"name\":\"addAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLinkPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLinkPriceMASA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorities\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentMethod\",\"type\":\"address\"}],\"name\":\"disablePaymentMethod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentMethod\",\"type\":\"address\"}],\"name\":\"enablePaymentMethod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enabledPaymentMethod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"enabledPaymentMethods\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEnabledPaymentMethods\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getIdentityId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentMethod\",\"type\":\"address\"}],\"name\":\"getMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentMethod\",\"type\":\"address\"}],\"name\":\"getMintPriceWithProtocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentMethod\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getProtocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masaToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentMethod\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"identityId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"authorityAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"signatureDate\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentMethod\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"authorityAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"signatureDate\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPriceMASA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queryLinkPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queryLinkPriceMASA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authority\",\"type\":\"address\"}],\"name\":\"removeAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_addLinkPrice\",\"type\":\"uint256\"}],\"name\":\"setAddLinkPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_addLinkPriceMASA\",\"type\":\"uint256\"}],\"name\":\"setAddLinkPriceMASA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masaToken\",\"type\":\"address\"}],\"name\":\"setMasaToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintPrice\",\"type\":\"uint256\"}],\"name\":\"setMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintPriceMASA\",\"type\":\"uint256\"}],\"name\":\"setMintPriceMASA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_projectFeeReceiver\",\"type\":\"address\"}],\"name\":\"setProjectFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolFeeAmount\",\"type\":\"uint256\"}],\"name\":\"setProtocolFeeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolFeePercent\",\"type\":\"uint256\"}],\"name\":\"setProtocolFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocolFeeReceiver\",\"type\":\"address\"}],\"name\":\"setProtocolFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_queryLinkPrice\",\"type\":\"uint256\"}],\"name\":\"setQueryLinkPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_queryLinkPriceMASA\",\"type\":\"uint256\"}],\"name\":\"setQueryLinkPriceMASA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_soulboundIdentity\",\"type\":\"address\"}],\"name\":\"setSoulboundIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stableCoin\",\"type\":\"address\"}],\"name\":\"setStableCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"}],\"name\":\"setSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wrappedNativeToken\",\"type\":\"address\"}],\"name\":\"setWrappedNativeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soulboundIdentity\",\"outputs\":[{\"internalType\":\"contract ISoulboundIdentity\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableCoin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedNativeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Masa Finance\",\"details\":\"Soulbound Green, that inherits from the SBT contract.\",\"kind\":\"dev\",\"methods\":{\"addAuthority(address)\":{\"details\":\"The caller must have the admin or project admin role to call this function\",\"params\":{\"_authority\":\"New authority to add\"}},\"balanceOf(address)\":{\"details\":\"See {ISBT-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Burns `tokenId`. See {SBT-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator.\"},\"constructor\":{\"details\":\"Creates a new soulbound Green, inheriting from the SBT contract.\",\"params\":{\"admin\":\"Administrator of the smart contract\",\"baseTokenURI\":\"Base URI of the token\",\"name\":\"Name of the token\",\"paymentParams\":\"Payment gateway params\",\"soulboundIdentity\":\"Address of the SoulboundIdentity contract\",\"symbol\":\"Symbol of the token\"}},\"disablePaymentMethod(address)\":{\"details\":\"The caller must have the admin role to call this function\",\"params\":{\"_paymentMethod\":\"Token to remove\"}},\"eip712Domain()\":{\"details\":\"See {EIP-5267}. _Available since v4.9._\"},\"enablePaymentMethod(address)\":{\"details\":\"The caller must have the admin role to call this function\",\"params\":{\"_paymentMethod\":\"New token to add\"}},\"exists(uint256)\":{\"details\":\"Returns true if the token has been minted\",\"params\":{\"tokenId\":\"Token to check\"},\"returns\":{\"_0\":\"True if the token exists\"}},\"getEnabledPaymentMethods()\":{\"details\":\"Returns the address of all available payment methods\",\"returns\":{\"_0\":\"Array of all enabled payment methods\"}},\"getIdentityId(uint256)\":{\"params\":{\"tokenId\":\"Id of the token\"},\"returns\":{\"_0\":\"Id of the identity\"}},\"getMintPrice(address)\":{\"details\":\"Returns current pricing for minting\",\"params\":{\"paymentMethod\":\"Address of token that user want to pay\"},\"returns\":{\"price\":\"Current price for minting in the given payment method\"}},\"getMintPriceWithProtocolFee(address)\":{\"details\":\"Returns current pricing for minting with protocol fee\",\"params\":{\"paymentMethod\":\"Address of token that user want to pay\"},\"returns\":{\"price\":\"Current price for minting in the given payment method\",\"protocolFee\":\"Current protocol fee for minting in the given payment method\"}},\"getProtocolFee(address,uint256)\":{\"details\":\"This method will calculate the protocol fee based on the payment method\",\"params\":{\"amount\":\"Price to be paid in the specified payment method\",\"paymentMethod\":\"Address of token that user want to pay\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"mint(address,address,address,uint256,bytes)\":{\"details\":\"The caller must have the MINTER role\",\"params\":{\"authorityAddress\":\"Address of the authority that signed the message\",\"paymentMethod\":\"Address of token that user want to pay\",\"signature\":\"Signature of the message\",\"signatureDate\":\"Date of the signature\",\"to\":\"The address to mint the SBT to\"},\"returns\":{\"_0\":\"The SBT ID of the newly minted SBT\"}},\"mint(address,uint256,address,uint256,bytes)\":{\"details\":\"The caller must have the MINTER role\",\"params\":{\"authorityAddress\":\"Address of the authority that signed the message\",\"identityId\":\"TokenId of the identity to mint the NFT to\",\"paymentMethod\":\"Address of token that user want to pay\",\"signature\":\"Signature of the message\",\"signatureDate\":\"Date of the signature\"},\"returns\":{\"_0\":\"The NFT ID of the newly minted SBT\"}},\"name()\":{\"details\":\"See {ISBTMetadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {ISBT-ownerOf}.\"},\"removeAuthority(address)\":{\"details\":\"The caller must have the admin or project admin role to call this function\",\"params\":{\"_authority\":\"Authority to remove\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setAddLinkPrice(uint256)\":{\"details\":\"The caller must have the admin or project admin role to call this function\",\"params\":{\"_addLinkPrice\":\"New price for adding the link in SoulLinker in stable coin\"}},\"setAddLinkPriceMASA(uint256)\":{\"details\":\"The caller must have the admin or project admin role to call this function\",\"params\":{\"_addLinkPriceMASA\":\"New price for adding the link in SoulLinker in MASA\"}},\"setMasaToken(address)\":{\"details\":\"The caller must have the admin role to call this function It can be set to address(0) to disable paying in MASA\",\"params\":{\"_masaToken\":\"New utility token to pay the fee in\"}},\"setMintPrice(uint256)\":{\"details\":\"The caller must have the admin or project admin role to call this function\",\"params\":{\"_mintPrice\":\"New price of minting in stable coin\"}},\"setMintPriceMASA(uint256)\":{\"details\":\"The caller must have the admin or project admin role to call this function\",\"params\":{\"_mintPriceMASA\":\"New price of minting in MASA\"}},\"setProjectFeeReceiver(address)\":{\"details\":\"The caller must have the admin or project admin role to call this function\",\"params\":{\"_projectFeeReceiver\":\"New project fee receiver wallet\"}},\"setProtocolFeeAmount(uint256)\":{\"details\":\"The caller must have the admin role to call this function\",\"params\":{\"_protocolFeeAmount\":\"New protocol fee amount\"}},\"setProtocolFeePercent(uint256)\":{\"details\":\"The caller must have the admin role to call this function\",\"params\":{\"_protocolFeePercent\":\"New protocol fee percent\"}},\"setProtocolFeeReceiver(address)\":{\"details\":\"The caller must have the admin role to call this function\",\"params\":{\"_protocolFeeReceiver\":\"New protocol fee wallet\"}},\"setQueryLinkPrice(uint256)\":{\"details\":\"The caller must have the admin or project admin role to call this function\",\"params\":{\"_queryLinkPrice\":\"New price for reading data in SoulLinker in stable coin\"}},\"setQueryLinkPriceMASA(uint256)\":{\"details\":\"The caller must have the admin or project admin role to call this function\",\"params\":{\"_queryLinkPriceMASA\":\"New price for reading data in SoulLinker in MASA\"}},\"setSoulboundIdentity(address)\":{\"details\":\"The caller must be the admin to call this function\",\"params\":{\"_soulboundIdentity\":\"Address of the SoulboundIdentity contract\"}},\"setStableCoin(address)\":{\"details\":\"The caller must have the admin role to call this function\",\"params\":{\"_stableCoin\":\"New stable coin to pay the fee in\"}},\"setSwapRouter(address)\":{\"details\":\"The caller must have the admin role to call this function\",\"params\":{\"_swapRouter\":\"New swap router address\"}},\"setWrappedNativeToken(address)\":{\"details\":\"The caller must have the admin role to call this function\",\"params\":{\"_wrappedNativeToken\":\"New wrapped native token address\"}},\"supportsInterface(bytes4)\":{\"details\":\"Interface identification is specified in ERC-165.\",\"params\":{\"interfaceId\":\"The interface identifier, as specified in ERC-165\"},\"returns\":{\"_0\":\"`true` if the contract implements `interfaceId` and  `interfaceId` is not 0xffffffff, `false` otherwise\"}},\"symbol()\":{\"details\":\"See {ISBTMetadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {ISBTEnumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {ISBTEnumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"Throws if `_tokenId` is not a valid SBT. URIs are defined in RFC  3986. The URI may point to a JSON file that conforms to the \\\"ERC721  Metadata JSON Schema\\\".\",\"params\":{\"tokenId\":\"SBT to get the URI of\"},\"returns\":{\"_0\":\"URI of the SBT\"}},\"totalSupply()\":{\"details\":\"See {ISBTEnumerable-totalSupply}.\"}},\"title\":\"Soulbound Two-factor authentication (Green - 2FA)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addAuthority(address)\":{\"notice\":\"Adds a new authority to the list of authorities\"},\"constructor\":{\"notice\":\"Creates a new soulbound Two-factor authentication (Green - 2FA)\"},\"disablePaymentMethod(address)\":{\"notice\":\"Removes a token as a valid payment method\"},\"enablePaymentMethod(address)\":{\"notice\":\"Adds a new token as a valid payment method\"},\"exists(uint256)\":{\"notice\":\"Returns true if the token exists\"},\"getEnabledPaymentMethods()\":{\"notice\":\"Returns all available payment methods\"},\"getIdentityId(uint256)\":{\"notice\":\"Returns the identityId owned by the given token\"},\"getMintPrice(address)\":{\"notice\":\"Returns the price for minting\"},\"getMintPriceWithProtocolFee(address)\":{\"notice\":\"Returns the price for minting with protocol fee\"},\"getProtocolFee(address,uint256)\":{\"notice\":\"Calculates the protocol fee\"},\"mint(address,address,address,uint256,bytes)\":{\"notice\":\"Mints a new SBT\"},\"mint(address,uint256,address,uint256,bytes)\":{\"notice\":\"Mints a new SBT\"},\"removeAuthority(address)\":{\"notice\":\"Removes an authority from the list of authorities\"},\"setAddLinkPrice(uint256)\":{\"notice\":\"Sets the price for adding the link in SoulLinker in stable coin\"},\"setAddLinkPriceMASA(uint256)\":{\"notice\":\"Sets the price for adding the link in SoulLinker in MASA\"},\"setMasaToken(address)\":{\"notice\":\"Sets the utility token to pay the fee in (MASA)\"},\"setMintPrice(uint256)\":{\"notice\":\"Sets the price of minting in stable coin\"},\"setMintPriceMASA(uint256)\":{\"notice\":\"Sets the price of minting in MASA\"},\"setProjectFeeReceiver(address)\":{\"notice\":\"Set the project fee receiver wallet\"},\"setProtocolFeeAmount(uint256)\":{\"notice\":\"Set the protocol fee amount\"},\"setProtocolFeePercent(uint256)\":{\"notice\":\"Set the protocol fee percent\"},\"setProtocolFeeReceiver(address)\":{\"notice\":\"Set the protocol fee wallet\"},\"setQueryLinkPrice(uint256)\":{\"notice\":\"Sets the price for reading data in SoulLinker in stable coin\"},\"setQueryLinkPriceMASA(uint256)\":{\"notice\":\"Sets the price for reading data in SoulLinker in MASA\"},\"setSoulboundIdentity(address)\":{\"notice\":\"Sets the SoulboundIdentity contract address linked to this SBT\"},\"setStableCoin(address)\":{\"notice\":\"Sets the stable coin to pay the fee in (USDC)\"},\"setSwapRouter(address)\":{\"notice\":\"Sets the swap router address\"},\"setWrappedNativeToken(address)\":{\"notice\":\"Sets the wrapped native token address\"},\"supportsInterface(bytes4)\":{\"notice\":\"Query if a contract implements an interface\"},\"tokenURI(uint256)\":{\"notice\":\"A distinct Uniform Resource Identifier (URI) for a given asset.\"}},\"notice\":\"Soulbound token that represents a Two-factor authentication (2FA)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SoulboundGreen.sol\":\"SoulboundGreen\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0xac6c2efc64baccbde4904ae18ed45139c9aa8cff96d6888344d1e4d2eb8b659f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant _FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(_FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc0e310c163edf15db45d4ff938113ab357f94fa86e61ea8e790853c4d2e13256\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../ShortStrings.sol\\\";\\nimport \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     *\\n     * _Available since v4.9._\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _name.toStringWithFallback(_nameFallback),\\n            _version.toStringWithFallback(_versionFallback),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x8432884527a7ad91e6eed1cfc5a0811ae2073e5bca107bd0ca442e9236b03dbd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// EIP-712 is Final as of 2022-08-11. This file is deprecated.\\n\\nimport \\\"./EIP712.sol\\\";\\n\",\"keccak256\":\"0xea30c402170bc240354b74e6c6f6a8e5bdb1935d90d168cc58c0654461c6a72b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/SoulboundGreen.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./libraries/Errors.sol\\\";\\nimport \\\"./tokens/MasaSBTSelfSovereign.sol\\\";\\n\\n/// @title Soulbound Two-factor authentication (Green - 2FA)\\n/// @author Masa Finance\\n/// @notice Soulbound token that represents a Two-factor authentication (2FA)\\n/// @dev Soulbound Green, that inherits from the SBT contract.\\ncontract SoulboundGreen is MasaSBTSelfSovereign, ReentrancyGuard {\\n    /* ========== STATE VARIABLES =========================================== */\\n\\n    /* ========== INITIALIZE ================================================ */\\n\\n    /// @notice Creates a new soulbound Two-factor authentication (Green - 2FA)\\n    /// @dev Creates a new soulbound Green, inheriting from the SBT contract.\\n    /// @param admin Administrator of the smart contract\\n    /// @param name Name of the token\\n    /// @param symbol Symbol of the token\\n    /// @param baseTokenURI Base URI of the token\\n    /// @param soulboundIdentity Address of the SoulboundIdentity contract\\n    /// @param paymentParams Payment gateway params\\n    constructor(\\n        address admin,\\n        string memory name,\\n        string memory symbol,\\n        string memory baseTokenURI,\\n        address soulboundIdentity,\\n        PaymentParams memory paymentParams\\n    )\\n        MasaSBTSelfSovereign(\\n            admin,\\n            name,\\n            symbol,\\n            baseTokenURI,\\n            soulboundIdentity,\\n            paymentParams\\n        )\\n        EIP712(\\\"SoulboundGreen\\\", \\\"1.0.0\\\")\\n    {}\\n\\n    /* ========== RESTRICTED FUNCTIONS ====================================== */\\n\\n    /* ========== MUTATIVE FUNCTIONS ======================================== */\\n\\n    /// @notice Mints a new SBT\\n    /// @dev The caller must have the MINTER role\\n    /// @param paymentMethod Address of token that user want to pay\\n    /// @param identityId TokenId of the identity to mint the NFT to\\n    /// @param authorityAddress Address of the authority that signed the message\\n    /// @param signatureDate Date of the signature\\n    /// @param signature Signature of the message\\n    /// @return The NFT ID of the newly minted SBT\\n    function mint(\\n        address paymentMethod,\\n        uint256 identityId,\\n        address authorityAddress,\\n        uint256 signatureDate,\\n        bytes calldata signature\\n    ) external payable nonReentrant returns (uint256) {\\n        address to = soulboundIdentity.ownerOf(identityId);\\n        if (to != _msgSender()) revert CallerNotOwner(_msgSender());\\n\\n        uint256 tokenId = _mintWithCounter(\\n            paymentMethod,\\n            to,\\n            _hash(identityId, authorityAddress, signatureDate),\\n            authorityAddress,\\n            signature\\n        );\\n\\n        emit SoulboundGreenMintedToIdentity(\\n            tokenId,\\n            identityId,\\n            authorityAddress,\\n            signatureDate,\\n            paymentMethod,\\n            mintPrice\\n        );\\n\\n        return tokenId;\\n    }\\n\\n    /// @notice Mints a new SBT\\n    /// @dev The caller must have the MINTER role\\n    /// @param paymentMethod Address of token that user want to pay\\n    /// @param to The address to mint the SBT to\\n    /// @param authorityAddress Address of the authority that signed the message\\n    /// @param signatureDate Date of the signature\\n    /// @param signature Signature of the message\\n    /// @return The SBT ID of the newly minted SBT\\n    function mint(\\n        address paymentMethod,\\n        address to,\\n        address authorityAddress,\\n        uint256 signatureDate,\\n        bytes calldata signature\\n    ) external payable nonReentrant returns (uint256) {\\n        if (to != _msgSender()) revert CallerNotOwner(_msgSender());\\n\\n        uint256 tokenId = _mintWithCounter(\\n            paymentMethod,\\n            to,\\n            _hash(to, authorityAddress, signatureDate),\\n            authorityAddress,\\n            signature\\n        );\\n\\n        emit SoulboundGreenMintedToAddress(\\n            tokenId,\\n            to,\\n            authorityAddress,\\n            signatureDate,\\n            paymentMethod,\\n            mintPrice\\n        );\\n\\n        return tokenId;\\n    }\\n\\n    /* ========== VIEWS ===================================================== */\\n\\n    /* ========== PRIVATE FUNCTIONS ========================================= */\\n\\n    function _hash(\\n        uint256 identityId,\\n        address authorityAddress,\\n        uint256 signatureDate\\n    ) internal view returns (bytes32) {\\n        return\\n            _hashTypedDataV4(\\n                keccak256(\\n                    abi.encode(\\n                        keccak256(\\n                            \\\"MintGreen(uint256 identityId,address authorityAddress,uint256 signatureDate)\\\"\\n                        ),\\n                        identityId,\\n                        authorityAddress,\\n                        signatureDate\\n                    )\\n                )\\n            );\\n    }\\n\\n    function _hash(\\n        address to,\\n        address authorityAddress,\\n        uint256 signatureDate\\n    ) internal view returns (bytes32) {\\n        return\\n            _hashTypedDataV4(\\n                keccak256(\\n                    abi.encode(\\n                        keccak256(\\n                            \\\"MintGreen(address to,address authorityAddress,uint256 signatureDate)\\\"\\n                        ),\\n                        to,\\n                        authorityAddress,\\n                        signatureDate\\n                    )\\n                )\\n            );\\n    }\\n\\n    /* ========== MODIFIERS ================================================= */\\n\\n    /* ========== EVENTS ==================================================== */\\n\\n    event SoulboundGreenMintedToIdentity(\\n        uint256 tokenId,\\n        uint256 identityId,\\n        address authorityAddress,\\n        uint256 signatureDate,\\n        address paymentMethod,\\n        uint256 mintPrice\\n    );\\n\\n    event SoulboundGreenMintedToAddress(\\n        uint256 tokenId,\\n        address to,\\n        address authorityAddress,\\n        uint256 signatureDate,\\n        address paymentMethod,\\n        uint256 mintPrice\\n    );\\n}\\n\",\"keccak256\":\"0x0131235a51f9ead95ae14452ec514db2e40c0380d40e8fd137b27addfdb0adab\",\"license\":\"MIT\"},\"contracts/dex/PaymentGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"../libraries/Errors.sol\\\";\\nimport \\\"../interfaces/dex/IUniswapRouter.sol\\\";\\n\\n/// @title Pay using a Decentralized automated market maker (AMM) when needed\\n/// @author Masa Finance\\n/// @notice Smart contract to call a Dex AMM smart contract to pay to a project fee receiver\\n/// wallet recipient\\n/// @dev This smart contract will call the Uniswap Router interface, based on\\n/// https://github.com/Uniswap/v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router01.sol\\nabstract contract PaymentGateway is AccessControl {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    bytes32 public constant PROJECT_ADMIN_ROLE =\\n        keccak256(\\\"PROJECT_ADMIN_ROLE\\\");\\n\\n    struct PaymentParams {\\n        address swapRouter; // Swap router address\\n        address wrappedNativeToken; // Wrapped native token address\\n        address stableCoin; // Stable coin to pay the fee in (USDC)\\n        address masaToken; // Utility token to pay the fee in (MASA)\\n        address projectFeeReceiver; // Wallet that will receive the project fee\\n        address protocolFeeReceiver; // Wallet that will receive the protocol fee\\n        uint256 protocolFeeAmount; // Protocol fee amount in USD\\n        uint256 protocolFeePercent; // Protocol fee amount\\n    }\\n\\n    /* ========== STATE VARIABLES =========================================== */\\n\\n    address public swapRouter;\\n    address public wrappedNativeToken;\\n\\n    address public stableCoin; // USDC. It also needs to be enabled as payment method, if we want to pay in USDC\\n    address public masaToken; // MASA. It also needs to be enabled as payment method, if we want to pay in MASA\\n\\n    // enabled payment methods: ETH and ERC20 tokens\\n    mapping(address => bool) public enabledPaymentMethod;\\n    address[] public enabledPaymentMethods;\\n\\n    address public projectFeeReceiver;\\n    address public protocolFeeReceiver;\\n    uint256 public protocolFeeAmount;\\n    uint256 public protocolFeePercent;\\n\\n    /* ========== INITIALIZE ================================================ */\\n\\n    /// @notice Creates a new Dex AMM\\n    /// @dev Creates a new Decentralized automated market maker (AMM) smart contract,\\n    // that will call the Uniswap Router interface\\n    /// @param admin Administrator of the smart contract\\n    /// @param paymentParams Payment params\\n    constructor(address admin, PaymentParams memory paymentParams) {\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\\n\\n        swapRouter = paymentParams.swapRouter;\\n        wrappedNativeToken = paymentParams.wrappedNativeToken;\\n        stableCoin = paymentParams.stableCoin;\\n        masaToken = paymentParams.masaToken;\\n        projectFeeReceiver = paymentParams.projectFeeReceiver;\\n        protocolFeeReceiver = paymentParams.protocolFeeReceiver;\\n        protocolFeeAmount = paymentParams.protocolFeeAmount;\\n        protocolFeePercent = paymentParams.protocolFeePercent;\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ====================================== */\\n\\n    /// @notice Sets the swap router address\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _swapRouter New swap router address\\n    function setSwapRouter(\\n        address _swapRouter\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (swapRouter == _swapRouter) revert SameValue();\\n        swapRouter = _swapRouter;\\n    }\\n\\n    /// @notice Sets the wrapped native token address\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _wrappedNativeToken New wrapped native token address\\n    function setWrappedNativeToken(\\n        address _wrappedNativeToken\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (wrappedNativeToken == _wrappedNativeToken) revert SameValue();\\n        wrappedNativeToken = _wrappedNativeToken;\\n    }\\n\\n    /// @notice Sets the stable coin to pay the fee in (USDC)\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _stableCoin New stable coin to pay the fee in\\n    function setStableCoin(\\n        address _stableCoin\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (stableCoin == _stableCoin) revert SameValue();\\n        stableCoin = _stableCoin;\\n    }\\n\\n    /// @notice Sets the utility token to pay the fee in (MASA)\\n    /// @dev The caller must have the admin role to call this function\\n    /// It can be set to address(0) to disable paying in MASA\\n    /// @param _masaToken New utility token to pay the fee in\\n    function setMasaToken(\\n        address _masaToken\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (masaToken == _masaToken) revert SameValue();\\n        masaToken = _masaToken;\\n    }\\n\\n    /// @notice Adds a new token as a valid payment method\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _paymentMethod New token to add\\n    function enablePaymentMethod(\\n        address _paymentMethod\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (enabledPaymentMethod[_paymentMethod]) revert AlreadyAdded();\\n\\n        enabledPaymentMethod[_paymentMethod] = true;\\n        enabledPaymentMethods.push(_paymentMethod);\\n    }\\n\\n    /// @notice Removes a token as a valid payment method\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _paymentMethod Token to remove\\n    function disablePaymentMethod(\\n        address _paymentMethod\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (!enabledPaymentMethod[_paymentMethod])\\n            revert NonExistingErc20Token(_paymentMethod);\\n\\n        enabledPaymentMethod[_paymentMethod] = false;\\n        for (uint256 i = 0; i < enabledPaymentMethods.length; i++) {\\n            if (enabledPaymentMethods[i] == _paymentMethod) {\\n                enabledPaymentMethods[i] = enabledPaymentMethods[\\n                    enabledPaymentMethods.length - 1\\n                ];\\n                enabledPaymentMethods.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @notice Set the project fee receiver wallet\\n    /// @dev The caller must have the admin or project admin role to call this function\\n    /// @param _projectFeeReceiver New project fee receiver wallet\\n    function setProjectFeeReceiver(address _projectFeeReceiver) external {\\n        if (\\n            !hasRole(DEFAULT_ADMIN_ROLE, _msgSender()) &&\\n            !hasRole(PROJECT_ADMIN_ROLE, _msgSender())\\n        ) revert UserMustHaveProtocolOrProjectAdminRole();\\n        if (_projectFeeReceiver == projectFeeReceiver) revert SameValue();\\n        projectFeeReceiver = _projectFeeReceiver;\\n    }\\n\\n    /// @notice Set the protocol fee wallet\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _protocolFeeReceiver New protocol fee wallet\\n    function setProtocolFeeReceiver(\\n        address _protocolFeeReceiver\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (_protocolFeeReceiver == protocolFeeReceiver) revert SameValue();\\n        protocolFeeReceiver = _protocolFeeReceiver;\\n    }\\n\\n    /// @notice Set the protocol fee amount\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _protocolFeeAmount New protocol fee amount\\n    function setProtocolFeeAmount(\\n        uint256 _protocolFeeAmount\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (_protocolFeeAmount == protocolFeeAmount) revert SameValue();\\n        protocolFeeAmount = _protocolFeeAmount;\\n    }\\n\\n    /// @notice Set the protocol fee percent\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _protocolFeePercent New protocol fee percent\\n    function setProtocolFeePercent(\\n        uint256 _protocolFeePercent\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (_protocolFeePercent == protocolFeePercent) revert SameValue();\\n        protocolFeePercent = _protocolFeePercent;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ======================================== */\\n\\n    /* ========== VIEWS ===================================================== */\\n\\n    /// @notice Returns all available payment methods\\n    /// @dev Returns the address of all available payment methods\\n    /// @return Array of all enabled payment methods\\n    function getEnabledPaymentMethods()\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        return enabledPaymentMethods;\\n    }\\n\\n    /// @notice Calculates the protocol fee\\n    /// @dev This method will calculate the protocol fee based on the payment method\\n    /// @param paymentMethod Address of token that user want to pay\\n    /// @param amount Price to be paid in the specified payment method\\n    function getProtocolFee(\\n        address paymentMethod,\\n        uint256 amount\\n    ) external view returns (uint256) {\\n        return _getProtocolFee(paymentMethod, amount);\\n    }\\n\\n    /* ========== PRIVATE FUNCTIONS ========================================= */\\n\\n    /// @notice Converts an amount from a stable coin to a payment method amount\\n    /// @dev This method will perform the swap between the stable coin and the\\n    /// payment method, and return the amount of the payment method,\\n    /// performing the swap if necessary\\n    /// @param paymentMethod Address of token that user want to pay\\n    /// @param amount Price to be converted in the specified payment method\\n    function _convertFromStableCoin(\\n        address paymentMethod,\\n        uint256 amount\\n    ) internal view paymentParamsAlreadySet(amount) returns (uint256) {\\n        if (!enabledPaymentMethod[paymentMethod] || paymentMethod == stableCoin)\\n            revert InvalidToken(paymentMethod);\\n\\n        if (amount == 0) return 0;\\n\\n        if (paymentMethod == address(0)) {\\n            return _estimateSwapAmount(wrappedNativeToken, stableCoin, amount);\\n        } else {\\n            return _estimateSwapAmount(paymentMethod, stableCoin, amount);\\n        }\\n    }\\n\\n    /// @notice Calculates the protocol fee\\n    /// @dev This method will calculate the protocol fee based on the payment method\\n    /// @param paymentMethod Address of token that user want to pay\\n    /// @param amount Price to be paid in the specified payment method\\n    function _getProtocolFee(\\n        address paymentMethod,\\n        uint256 amount\\n    ) internal view returns (uint256) {\\n        uint256 protocolFee = 0;\\n        if (protocolFeeAmount > 0) {\\n            if (paymentMethod == stableCoin) {\\n                protocolFee = protocolFeeAmount;\\n            } else {\\n                protocolFee = _convertFromStableCoin(\\n                    paymentMethod,\\n                    protocolFeeAmount\\n                );\\n            }\\n        }\\n        if (protocolFeePercent > 0) {\\n            protocolFee = protocolFee.add(\\n                amount.mul(protocolFeePercent).div(100)\\n            );\\n        }\\n        return protocolFee;\\n    }\\n\\n    /// @notice Performs the payment in any payment method\\n    /// @dev This method will transfer the funds to the project fee receiver wallet, performing\\n    /// the swap if necessary, and transfer the protocol fee to the protocol fee wallet\\n    /// @param paymentMethod Address of token that user want to pay\\n    /// @param amount Price to be paid in the specified payment method\\n    /// @param protocolFee Protocol fee to be paid in the specified payment method\\n    function _pay(\\n        address paymentMethod,\\n        uint256 amount,\\n        uint256 protocolFee\\n    ) internal paymentParamsAlreadySet(amount.add(protocolFee)) {\\n        if (amount == 0 && protocolFee == 0) return;\\n        if (protocolFee > 0 && protocolFeeReceiver == address(0))\\n            revert ProtocolFeeReceiverNotSet();\\n\\n        if (!enabledPaymentMethod[paymentMethod])\\n            revert InvalidPaymentMethod(paymentMethod);\\n        if (paymentMethod == address(0)) {\\n            // ETH\\n            if (msg.value < amount.add(protocolFee))\\n                revert InsufficientEthAmount(amount.add(protocolFee));\\n            if (amount > 0) {\\n                (bool success, ) = payable(projectFeeReceiver).call{\\n                    value: amount\\n                }(\\\"\\\");\\n                if (!success) revert TransferFailed();\\n            }\\n            if (protocolFee > 0) {\\n                (bool success, ) = payable(protocolFeeReceiver).call{\\n                    value: protocolFee\\n                }(\\\"\\\");\\n                if (!success) revert TransferFailed();\\n            }\\n            if (msg.value > amount.add(protocolFee)) {\\n                // return diff\\n                uint256 refund = msg.value.sub(amount.add(protocolFee));\\n                (bool success, ) = payable(msg.sender).call{value: refund}(\\\"\\\");\\n                if (!success) revert RefundFailed();\\n            }\\n        } else {\\n            // ERC20 token, including MASA and USDC\\n            if (amount > 0) {\\n                IERC20(paymentMethod).safeTransferFrom(\\n                    msg.sender,\\n                    projectFeeReceiver,\\n                    amount\\n                );\\n            }\\n            if (protocolFee > 0) {\\n                IERC20(paymentMethod).safeTransferFrom(\\n                    msg.sender,\\n                    protocolFeeReceiver,\\n                    protocolFee\\n                );\\n            }\\n        }\\n    }\\n\\n    function _estimateSwapAmount(\\n        address _fromToken,\\n        address _toToken,\\n        uint256 _amountOut\\n    ) private view returns (uint256) {\\n        uint256[] memory amounts;\\n        address[] memory path;\\n        path = _getPathFromTokenToToken(_fromToken, _toToken);\\n        amounts = IUniswapRouter(swapRouter).getAmountsIn(_amountOut, path);\\n        return amounts[0];\\n    }\\n\\n    function _getPathFromTokenToToken(\\n        address fromToken,\\n        address toToken\\n    ) private view returns (address[] memory) {\\n        if (fromToken == wrappedNativeToken || toToken == wrappedNativeToken) {\\n            address[] memory path = new address[](2);\\n            path[0] = fromToken == wrappedNativeToken\\n                ? wrappedNativeToken\\n                : fromToken;\\n            path[1] = toToken == wrappedNativeToken\\n                ? wrappedNativeToken\\n                : toToken;\\n            return path;\\n        } else {\\n            address[] memory path = new address[](3);\\n            path[0] = fromToken;\\n            path[1] = wrappedNativeToken;\\n            path[2] = toToken;\\n            return path;\\n        }\\n    }\\n\\n    /* ========== MODIFIERS ================================================= */\\n\\n    modifier paymentParamsAlreadySet(uint256 amount) {\\n        if (amount > 0 && swapRouter == address(0))\\n            revert PaymentParamsNotSet();\\n        if (amount > 0 && wrappedNativeToken == address(0))\\n            revert PaymentParamsNotSet();\\n        if (amount > 0 && stableCoin == address(0))\\n            revert PaymentParamsNotSet();\\n        if (amount > 0 && projectFeeReceiver == address(0))\\n            revert PaymentParamsNotSet();\\n        _;\\n    }\\n\\n    /* ========== EVENTS ==================================================== */\\n}\\n\",\"keccak256\":\"0xc52fa60e0022b87f3b2376c84e0b1c686bc1328bf0a9e5e3d8a5861fdd9d3a38\",\"license\":\"MIT\"},\"contracts/interfaces/ILinkableSBT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"../tokens/SBT/ISBT.sol\\\";\\n\\ninterface ILinkableSBT is ISBT {\\n    function addLinkPrice() external view returns (uint256);\\n\\n    function addLinkPriceMASA() external view returns (uint256);\\n\\n    function queryLinkPrice() external view returns (uint256);\\n\\n    function queryLinkPriceMASA() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf04c9991650db0cc5b2a96d6bacdc8a1f908cfe2467aed5d679d740938f8dfd4\",\"license\":\"MIT\"},\"contracts/interfaces/ISoulName.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\ninterface ISoulName {\\n    function mint(\\n        address to,\\n        string memory name,\\n        uint256 yearsPeriod,\\n        string memory _tokenURI\\n    ) external returns (uint256);\\n\\n    function getExtension() external view returns (string memory);\\n\\n    function isAvailable(\\n        string memory name\\n    ) external view returns (bool available);\\n\\n    function tokenData(\\n        uint256 tokenId\\n    ) external view returns (string memory name, uint256 expirationDate);\\n\\n    function getTokenData(\\n        string memory name\\n    )\\n        external\\n        view\\n        returns (\\n            string memory sbtName,\\n            bool linked,\\n            uint256 identityId,\\n            uint256 tokenId,\\n            uint256 expirationDate,\\n            bool active\\n        );\\n\\n    function getTokenId(string memory name) external view returns (uint256);\\n\\n    function getSoulNames(\\n        address owner\\n    ) external view returns (string[] memory sbtNames);\\n\\n    function getSoulNames(\\n        uint256 identityId\\n    ) external view returns (string[] memory sbtNames);\\n}\\n\",\"keccak256\":\"0x1c33b08f2c565a77b4f55632530d66b52ab27d18b0c492cfc217b2124e75c265\",\"license\":\"MIT\"},\"contracts/interfaces/ISoulboundIdentity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"../tokens/SBT/ISBT.sol\\\";\\n\\nimport \\\"./ISoulName.sol\\\";\\n\\ninterface ISoulboundIdentity is ISBT {\\n    function mint(address to) external payable returns (uint256);\\n\\n    function mint(\\n        address paymentMethod,\\n        address to\\n    ) external payable returns (uint256);\\n\\n    function mintIdentityWithName(\\n        address to,\\n        string memory name,\\n        uint256 yearsPeriod,\\n        string memory _tokenURI\\n    ) external payable returns (uint256);\\n\\n    function mintIdentityWithName(\\n        address paymentMethod,\\n        address to,\\n        string memory name,\\n        uint256 yearsPeriod,\\n        string memory _tokenURI\\n    ) external payable returns (uint256);\\n\\n    function getSoulName() external view returns (ISoulName);\\n\\n    function tokenOfOwner(address owner) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x98b5b36506a2c09611590afae40c885036dc6042b41e6d504ae8cb5ec63a5a05\",\"license\":\"MIT\"},\"contracts/interfaces/dex/IUniswapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title Uniswap Router interface\\n/// @author Masa Finance\\n/// @notice Interface of the Uniswap Router contract\\n/// @dev This interface is used to interact with the Uniswap Router contract,\\n/// and gets the most important functions of the contract. It's based on\\n/// https://github.com/Uniswap/v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router01.sol\\ninterface IUniswapRouter {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function getAmountsOut(\\n        uint256 amountIn,\\n        address[] calldata path\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(\\n        uint256 amountOut,\\n        address[] calldata path\\n    ) external view returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0xbf4d6d62c713d1fb92b955240f49b82ec0ab7800d01a287a5615202d96948a0f\",\"license\":\"MIT\"},\"contracts/libraries/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nerror AddressDoesNotHaveIdentity(address to);\\nerror AlreadyAdded();\\nerror AuthorityNotExists(address authority);\\nerror CallerNotOwner(address caller);\\nerror CallerNotReader(address caller);\\nerror CreditScoreAlreadyCreated(address to);\\nerror IdentityAlreadyCreated(address to);\\nerror IdentityOwnerIsReader(uint256 readerIdentityId);\\nerror InsufficientEthAmount(uint256 amount);\\nerror IdentityOwnerNotTokenOwner(uint256 tokenId, uint256 ownerIdentityId);\\nerror InvalidPaymentMethod(address paymentMethod);\\nerror InvalidSignature();\\nerror InvalidSignatureDate(uint256 signatureDate);\\nerror InvalidToken(address token);\\nerror InvalidTokenURI(string tokenURI);\\nerror LinkAlreadyExists(\\n    address token,\\n    uint256 tokenId,\\n    uint256 readerIdentityId,\\n    uint256 signatureDate\\n);\\nerror LinkAlreadyRevoked();\\nerror LinkDoesNotExist();\\nerror NameAlreadyExists(string name);\\nerror NameNotFound(string name);\\nerror NameRegisteredByOtherAccount(string name, uint256 tokenId);\\nerror NotAuthorized(address signer);\\nerror NonExistingErc20Token(address erc20token);\\nerror NotLinkedToAnIdentitySBT();\\nerror PaymentParamsNotSet();\\nerror ProtocolFeeReceiverNotSet();\\nerror RefundFailed();\\nerror SameValue();\\nerror SBTAlreadyLinked(address token);\\nerror SoulNameContractNotSet();\\nerror SoulNameNotExist();\\nerror SoulNameNotRegistered(address token);\\nerror TokenNotFound(uint256 tokenId);\\nerror TransferFailed();\\nerror URIAlreadyExists(string tokenURI);\\nerror UserMustHaveProtocolOrProjectAdminRole();\\nerror ValidPeriodExpired(uint256 expirationDate);\\nerror ZeroAddress();\\nerror ZeroLengthName(string name);\\nerror ZeroYearsPeriod(uint256 yearsPeriod);\\n\",\"keccak256\":\"0xc5a156fde299580c3114bf007230c139fb6e0b3a23fe68398f174b8cf246b6d1\",\"license\":\"MIT\"},\"contracts/tokens/MasaSBT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"../dex/PaymentGateway.sol\\\";\\nimport \\\"../libraries/Errors.sol\\\";\\nimport \\\"../interfaces/ISoulboundIdentity.sol\\\";\\nimport \\\"../interfaces/ILinkableSBT.sol\\\";\\nimport \\\"./SBT/SBT.sol\\\";\\nimport \\\"./SBT/extensions/SBTEnumerable.sol\\\";\\nimport \\\"./SBT/extensions/SBTBurnable.sol\\\";\\n\\n/// @title MasaSBT\\n/// @author Masa Finance\\n/// @notice Soulbound token. Non-fungible token that is not transferable.\\n/// @dev Implementation of https://papers.ssrn.com/sol3/papers.cfm?abstract_id=4105763 Soulbound token.\\n/// Adds a link to a SoulboundIdentity SC to let minting using the identityId\\n/// Adds a payment gateway to let minting paying a fee\\nabstract contract MasaSBT is\\n    PaymentGateway,\\n    SBT,\\n    SBTEnumerable,\\n    SBTBurnable,\\n    ILinkableSBT\\n{\\n    /* ========== STATE VARIABLES =========================================== */\\n\\n    using Strings for uint256;\\n\\n    string private _baseTokenURI;\\n\\n    ISoulboundIdentity public soulboundIdentity;\\n\\n    uint256 public mintPrice; // price in stable coin\\n    uint256 public mintPriceMASA; // price in MASA\\n\\n    uint256 public override addLinkPrice; // price in stable coin\\n    uint256 public override addLinkPriceMASA; // price in MASA\\n    uint256 public override queryLinkPrice; // price in stable coin\\n    uint256 public override queryLinkPriceMASA; // price in MASA\\n\\n    /* ========== INITIALIZE ================================================ */\\n\\n    /// @notice Creates a new soulbound token\\n    /// @dev Creates a new soulbound token\\n    /// @param admin Administrator of the smart contract\\n    /// @param name Name of the token\\n    /// @param symbol Symbol of the token\\n    /// @param baseTokenURI Base URI of the token\\n    /// @param _soulboundIdentity Address of the SoulboundIdentity contract\\n    /// @param paymentParams Payment gateway params\\n    constructor(\\n        address admin,\\n        string memory name,\\n        string memory symbol,\\n        string memory baseTokenURI,\\n        address _soulboundIdentity,\\n        PaymentParams memory paymentParams\\n    ) SBT(name, symbol) PaymentGateway(admin, paymentParams) {\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\\n\\n        _baseTokenURI = baseTokenURI;\\n        soulboundIdentity = ISoulboundIdentity(_soulboundIdentity);\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ====================================== */\\n\\n    /// @notice Sets the price of minting in stable coin\\n    /// @dev The caller must have the admin or project admin role to call this function\\n    /// @param _mintPrice New price of minting in stable coin\\n    function setMintPrice(uint256 _mintPrice) external {\\n        if (\\n            !hasRole(DEFAULT_ADMIN_ROLE, _msgSender()) &&\\n            !hasRole(PROJECT_ADMIN_ROLE, _msgSender())\\n        ) revert UserMustHaveProtocolOrProjectAdminRole();\\n        if (mintPrice == _mintPrice) revert SameValue();\\n        mintPrice = _mintPrice;\\n    }\\n\\n    /// @notice Sets the price of minting in MASA\\n    /// @dev The caller must have the admin or project admin role to call this function\\n    /// @param _mintPriceMASA New price of minting in MASA\\n    function setMintPriceMASA(uint256 _mintPriceMASA) external {\\n        if (\\n            !hasRole(DEFAULT_ADMIN_ROLE, _msgSender()) &&\\n            !hasRole(PROJECT_ADMIN_ROLE, _msgSender())\\n        ) revert UserMustHaveProtocolOrProjectAdminRole();\\n        if (mintPriceMASA == _mintPriceMASA) revert SameValue();\\n        mintPriceMASA = _mintPriceMASA;\\n    }\\n\\n    /// @notice Sets the SoulboundIdentity contract address linked to this SBT\\n    /// @dev The caller must be the admin to call this function\\n    /// @param _soulboundIdentity Address of the SoulboundIdentity contract\\n    function setSoulboundIdentity(\\n        address _soulboundIdentity\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (address(soulboundIdentity) == _soulboundIdentity)\\n            revert SameValue();\\n        soulboundIdentity = ISoulboundIdentity(_soulboundIdentity);\\n    }\\n\\n    /// @notice Sets the price for adding the link in SoulLinker in stable coin\\n    /// @dev The caller must have the admin or project admin role to call this function\\n    /// @param _addLinkPrice New price for adding the link in SoulLinker in stable coin\\n    function setAddLinkPrice(uint256 _addLinkPrice) external {\\n        if (\\n            !hasRole(DEFAULT_ADMIN_ROLE, _msgSender()) &&\\n            !hasRole(PROJECT_ADMIN_ROLE, _msgSender())\\n        ) revert UserMustHaveProtocolOrProjectAdminRole();\\n        if (addLinkPrice == _addLinkPrice) revert SameValue();\\n        addLinkPrice = _addLinkPrice;\\n    }\\n\\n    /// @notice Sets the price for adding the link in SoulLinker in MASA\\n    /// @dev The caller must have the admin or project admin role to call this function\\n    /// @param _addLinkPriceMASA New price for adding the link in SoulLinker in MASA\\n    function setAddLinkPriceMASA(uint256 _addLinkPriceMASA) external {\\n        if (\\n            !hasRole(DEFAULT_ADMIN_ROLE, _msgSender()) &&\\n            !hasRole(PROJECT_ADMIN_ROLE, _msgSender())\\n        ) revert UserMustHaveProtocolOrProjectAdminRole();\\n        if (addLinkPriceMASA == _addLinkPriceMASA) revert SameValue();\\n        addLinkPriceMASA = _addLinkPriceMASA;\\n    }\\n\\n    /// @notice Sets the price for reading data in SoulLinker in stable coin\\n    /// @dev The caller must have the admin or project admin role to call this function\\n    /// @param _queryLinkPrice New price for reading data in SoulLinker in stable coin\\n    function setQueryLinkPrice(uint256 _queryLinkPrice) external {\\n        if (\\n            !hasRole(DEFAULT_ADMIN_ROLE, _msgSender()) &&\\n            !hasRole(PROJECT_ADMIN_ROLE, _msgSender())\\n        ) revert UserMustHaveProtocolOrProjectAdminRole();\\n        if (queryLinkPrice == _queryLinkPrice) revert SameValue();\\n        queryLinkPrice = _queryLinkPrice;\\n    }\\n\\n    /// @notice Sets the price for reading data in SoulLinker in MASA\\n    /// @dev The caller must have the admin or project admin role to call this function\\n    /// @param _queryLinkPriceMASA New price for reading data in SoulLinker in MASA\\n    function setQueryLinkPriceMASA(uint256 _queryLinkPriceMASA) external {\\n        if (\\n            !hasRole(DEFAULT_ADMIN_ROLE, _msgSender()) &&\\n            !hasRole(PROJECT_ADMIN_ROLE, _msgSender())\\n        ) revert UserMustHaveProtocolOrProjectAdminRole();\\n        if (queryLinkPriceMASA == _queryLinkPriceMASA) revert SameValue();\\n        queryLinkPriceMASA = _queryLinkPriceMASA;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ======================================== */\\n\\n    /* ========== VIEWS ===================================================== */\\n\\n    /// @notice Returns the identityId owned by the given token\\n    /// @param tokenId Id of the token\\n    /// @return Id of the identity\\n    function getIdentityId(uint256 tokenId) external view returns (uint256) {\\n        if (soulboundIdentity == ISoulboundIdentity(address(0)))\\n            revert NotLinkedToAnIdentitySBT();\\n\\n        address owner = super.ownerOf(tokenId);\\n        return soulboundIdentity.tokenOfOwner(owner);\\n    }\\n\\n    /// @notice Returns true if the token exists\\n    /// @dev Returns true if the token has been minted\\n    /// @param tokenId Token to check\\n    /// @return True if the token exists\\n    function exists(uint256 tokenId) external view returns (bool) {\\n        return _exists(tokenId);\\n    }\\n\\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n    /// @dev Throws if `_tokenId` is not a valid SBT. URIs are defined in RFC\\n    ///  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\n    ///  Metadata JSON Schema\\\".\\n    /// @param tokenId SBT to get the URI of\\n    /// @return URI of the SBT\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return\\n            bytes(baseURI).length > 0\\n                ? string(abi.encodePacked(baseURI, tokenId.toString(), \\\".json\\\"))\\n                : \\\"\\\";\\n    }\\n\\n    /// @notice Query if a contract implements an interface\\n    /// @dev Interface identification is specified in ERC-165.\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @return `true` if the contract implements `interfaceId` and\\n    ///  `interfaceId` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    )\\n        public\\n        view\\n        virtual\\n        override(SBT, SBTEnumerable, AccessControl, IERC165)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @notice Returns the price for minting\\n    /// @dev Returns current pricing for minting\\n    /// @param paymentMethod Address of token that user want to pay\\n    /// @return price Current price for minting in the given payment method\\n    function getMintPrice(\\n        address paymentMethod\\n    ) public view returns (uint256 price) {\\n        if (mintPrice == 0 && mintPriceMASA == 0) {\\n            price = 0;\\n        } else if (\\n            paymentMethod == masaToken &&\\n            enabledPaymentMethod[paymentMethod] &&\\n            mintPriceMASA > 0\\n        ) {\\n            // price in MASA without conversion rate\\n            price = mintPriceMASA;\\n        } else if (\\n            paymentMethod == stableCoin && enabledPaymentMethod[paymentMethod]\\n        ) {\\n            // stable coin\\n            price = mintPrice;\\n        } else if (enabledPaymentMethod[paymentMethod]) {\\n            // ETH and ERC 20 token\\n            price = _convertFromStableCoin(paymentMethod, mintPrice);\\n        } else {\\n            revert InvalidPaymentMethod(paymentMethod);\\n        }\\n        return price;\\n    }\\n\\n    /// @notice Returns the price for minting with protocol fee\\n    /// @dev Returns current pricing for minting with protocol fee\\n    /// @param paymentMethod Address of token that user want to pay\\n    /// @return price Current price for minting in the given payment method\\n    /// @return protocolFee Current protocol fee for minting in the given payment method\\n    function getMintPriceWithProtocolFee(\\n        address paymentMethod\\n    ) public view returns (uint256 price, uint256 protocolFee) {\\n        price = getMintPrice(paymentMethod);\\n        return (price, _getProtocolFee(paymentMethod, price));\\n    }\\n\\n    /* ========== PRIVATE FUNCTIONS ========================================= */\\n\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return _baseTokenURI;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override(SBT, SBTEnumerable) {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /* ========== MODIFIERS ================================================= */\\n\\n    /* ========== EVENTS ==================================================== */\\n}\\n\",\"keccak256\":\"0x913d788fb936a6fad591592b8f42698c951208a4de4c1a85fceabbf64f9da1d4\",\"license\":\"MIT\"},\"contracts/tokens/MasaSBTSelfSovereign.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nimport \\\"../libraries/Errors.sol\\\";\\nimport \\\"./MasaSBT.sol\\\";\\n\\n/// @title MasaSBTSelfSovereign\\n/// @author Masa Finance\\n/// @notice Soulbound token. Non-fungible token that is not transferable.\\n/// Adds a self-sovereign protocol to let minting using an authority signature\\n/// @dev Implementation of https://papers.ssrn.com/sol3/papers.cfm?abstract_id=4105763 Soulbound token.\\nabstract contract MasaSBTSelfSovereign is MasaSBT, EIP712 {\\n    /* ========== STATE VARIABLES =========================================== */\\n\\n    using Counters for Counters.Counter;\\n\\n    Counters.Counter private _tokenIdCounter;\\n\\n    mapping(address => bool) public authorities;\\n\\n    /* ========== INITIALIZE ================================================ */\\n\\n    /// @notice Creates a new soulbound token\\n    /// @dev Creates a new soulbound token\\n    /// @param admin Administrator of the smart contract\\n    /// @param name Name of the token\\n    /// @param symbol Symbol of the token\\n    /// @param baseTokenURI Base URI of the token\\n    /// @param soulboundIdentity Address of the SoulboundIdentity contract\\n    /// @param paymentParams Payment gateway params\\n    constructor(\\n        address admin,\\n        string memory name,\\n        string memory symbol,\\n        string memory baseTokenURI,\\n        address soulboundIdentity,\\n        PaymentParams memory paymentParams\\n    )\\n        MasaSBT(\\n            admin,\\n            name,\\n            symbol,\\n            baseTokenURI,\\n            soulboundIdentity,\\n            paymentParams\\n        )\\n    {}\\n\\n    /* ========== RESTRICTED FUNCTIONS ====================================== */\\n\\n    /// @notice Adds a new authority to the list of authorities\\n    /// @dev The caller must have the admin or project admin role to call this function\\n    /// @param _authority New authority to add\\n    function addAuthority(address _authority) external {\\n        if (\\n            !hasRole(DEFAULT_ADMIN_ROLE, _msgSender()) &&\\n            !hasRole(PROJECT_ADMIN_ROLE, _msgSender())\\n        ) revert UserMustHaveProtocolOrProjectAdminRole();\\n        if (_authority == address(0)) revert ZeroAddress();\\n        if (authorities[_authority]) revert AlreadyAdded();\\n\\n        authorities[_authority] = true;\\n    }\\n\\n    /// @notice Removes an authority from the list of authorities\\n    /// @dev The caller must have the admin or project admin role to call this function\\n    /// @param _authority Authority to remove\\n    function removeAuthority(address _authority) external {\\n        if (\\n            !hasRole(DEFAULT_ADMIN_ROLE, _msgSender()) &&\\n            !hasRole(PROJECT_ADMIN_ROLE, _msgSender())\\n        ) revert UserMustHaveProtocolOrProjectAdminRole();\\n        if (_authority == address(0)) revert ZeroAddress();\\n        if (!authorities[_authority]) revert AuthorityNotExists(_authority);\\n\\n        authorities[_authority] = false;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ======================================== */\\n\\n    /* ========== VIEWS ===================================================== */\\n\\n    /* ========== PRIVATE FUNCTIONS ========================================= */\\n\\n    function _verify(\\n        bytes32 digest,\\n        bytes memory signature,\\n        address signer\\n    ) private view {\\n        address _signer = ECDSA.recover(digest, signature);\\n        if (_signer != signer) revert InvalidSignature();\\n        if (!authorities[_signer]) revert NotAuthorized(_signer);\\n    }\\n\\n    function _mintWithCounter(\\n        address paymentMethod,\\n        address to,\\n        bytes32 digest,\\n        address authorityAddress,\\n        bytes calldata signature\\n    ) internal virtual returns (uint256) {\\n        _verify(digest, signature, authorityAddress);\\n\\n        (uint256 price, uint256 protocolFee) = getMintPriceWithProtocolFee(\\n            paymentMethod\\n        );\\n        _pay(paymentMethod, price, protocolFee);\\n\\n        uint256 tokenId = _tokenIdCounter.current();\\n        _tokenIdCounter.increment();\\n        _mint(to, tokenId);\\n\\n        return tokenId;\\n    }\\n\\n    /* ========== MODIFIERS ================================================= */\\n\\n    /* ========== EVENTS ==================================================== */\\n}\\n\",\"keccak256\":\"0x610098438cdcdb9da5dc22ca17e9e74aa9e6ac4a71e9fb7e19ae211e29fcee70\",\"license\":\"MIT\"},\"contracts/tokens/SBT/ISBT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface ISBT is IERC165 {\\n    /// @dev This emits when an SBT is newly minted.\\n    ///  This event emits when SBTs are created\\n    event Mint(address indexed _owner, uint256 indexed _tokenId);\\n\\n    /// @dev This emits when an SBT is burned\\n    ///  This event emits when SBTs are destroyed\\n    event Burn(address indexed _owner, uint256 indexed _tokenId);\\n\\n    /// @notice Count all SBTs assigned to an owner\\n    /// @dev SBTs assigned to the zero address are considered invalid, and this\\n    ///  function throws for queries about the zero address.\\n    /// @param _owner An address for whom to query the balance\\n    /// @return The number of SBTs owned by `_owner`, possibly zero\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    /// @notice Find the owner of an SBT\\n    /// @dev SBTs assigned to zero address are considered invalid, and queries\\n    ///  about them do throw.\\n    /// @param _tokenId The identifier for an SBT\\n    /// @return The address of the owner of the SBT\\n    function ownerOf(uint256 _tokenId) external view returns (address);\\n}\\n\",\"keccak256\":\"0x812a1960f104ddd3078722e113141807e0ba9b51e9082906d62d91d9e6a4e50e\",\"license\":\"MIT\"},\"contracts/tokens/SBT/SBT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./ISBT.sol\\\";\\nimport \\\"./extensions/ISBTMetadata.sol\\\";\\n\\n/// @title SBT\\n/// @author Masa Finance\\n/// @notice Soulbound token is an NFT token that is not transferable.\\ncontract SBT is Context, ERC165, ISBT, ISBTMetadata {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(ISBT).interfaceId ||\\n            interfaceId == type(ISBTMetadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {ISBT-balanceOf}.\\n     */\\n    function balanceOf(\\n        address owner\\n    ) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"SBT: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {ISBT-ownerOf}.\\n     */\\n    function ownerOf(\\n        uint256 tokenId\\n    ) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"SBT: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {ISBTMetadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {ISBTMetadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {ISBTMetadata-tokenURI}.\\n     */\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return\\n            bytes(baseURI).length > 0\\n                ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n                : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isOwner(\\n        address spender,\\n        uint256 tokenId\\n    ) internal view virtual returns (bool) {\\n        address owner = SBT.ownerOf(tokenId);\\n        return (spender == owner);\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Mint} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"SBT: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"SBT: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Mint(to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     *\\n     * Requirements:\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Burn} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = SBT.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Burn(owner, tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"SBT: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token minting/burning\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address, address, uint256) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any minting/burning of tokens\\n     *\\n     * Calling conditions:\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address, address, uint256) internal virtual {}\\n}\\n\",\"keccak256\":\"0xda0d5fdff23e71006ee342b6db0f28459b1219eb4d8a169c18d52563ae04f5ab\",\"license\":\"MIT\"},\"contracts/tokens/SBT/extensions/ISBTEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"../ISBT.sol\\\";\\n\\n/**\\n * @title SBT Soulbound Token Standard, optional enumeration extension\\n */\\ninterface ISBTEnumerable is ISBT {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(\\n        address owner,\\n        uint256 index\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7678a1100f3e14496e671d2161ba347d427c88e0f2eba0b45a4a6bc27e15a4c9\",\"license\":\"MIT\"},\"contracts/tokens/SBT/extensions/ISBTMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"../ISBT.sol\\\";\\n\\n/**\\n * @title SBT Soulbound Token Standard, optional metadata extension\\n */\\ninterface ISBTMetadata is ISBT {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xec16c2d3a4f22312b2e5f6bde96a477ad05786431f6a908f2ebea573bbf3f32b\",\"license\":\"MIT\"},\"contracts/tokens/SBT/extensions/SBTBurnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport \\\"../SBT.sol\\\";\\n\\n/**\\n * @title SBT Burnable Token\\n * @dev SBT Token that can be burned (destroyed).\\n */\\nabstract contract SBTBurnable is Context, SBT {\\n    /**\\n     * @dev Burns `tokenId`. See {SBT-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(\\n            _isOwner(_msgSender(), tokenId),\\n            \\\"SBT: caller is not token owner\\\"\\n        );\\n        _burn(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xbf3ccb2414d17021e622373983f559730f45803262bc837fd4def17ba08ca3ff\",\"license\":\"MIT\"},\"contracts/tokens/SBT/extensions/SBTEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"../SBT.sol\\\";\\nimport \\\"./ISBTEnumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {SBT} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract SBTEnumerable is SBT, ISBTEnumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(IERC165, SBT) returns (bool) {\\n        return\\n            interfaceId == type(ISBTEnumerable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {ISBTEnumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(\\n        address owner,\\n        uint256 index\\n    ) public view virtual override returns (uint256) {\\n        require(\\n            index < SBT.balanceOf(owner),\\n            \\\"SBTEnumerable: owner index out of bounds\\\"\\n        );\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {ISBTEnumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {ISBTEnumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(\\n        uint256 index\\n    ) public view virtual override returns (uint256) {\\n        require(\\n            index < SBTEnumerable.totalSupply(),\\n            \\\"SBTEnumerable: global index out of bounds\\\"\\n        );\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = SBT.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(\\n        address from,\\n        uint256 tokenId\\n    ) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = SBT.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x6535b79ebe3aebaa913e1a9d6c1785fec5a2b2173c12c22ec242e80d56bf4b6d\",\"license\":\"MIT\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 24,
            "contract": "contracts/SoulboundGreen.sol:SoulboundGreen",
            "label": "_roles",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
          },
          {
            "astId": 9918,
            "contract": "contracts/SoulboundGreen.sol:SoulboundGreen",
            "label": "swapRouter",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 9920,
            "contract": "contracts/SoulboundGreen.sol:SoulboundGreen",
            "label": "wrappedNativeToken",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 9922,
            "contract": "contracts/SoulboundGreen.sol:SoulboundGreen",
            "label": "stableCoin",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 9924,
            "contract": "contracts/SoulboundGreen.sol:SoulboundGreen",
            "label": "masaToken",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 9928,
            "contract": "contracts/SoulboundGreen.sol:SoulboundGreen",
            "label": "enabledPaymentMethod",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 9931,
            "contract": "contracts/SoulboundGreen.sol:SoulboundGreen",
            "label": "enabledPaymentMethods",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 9933,
            "contract": "contracts/SoulboundGreen.sol:SoulboundGreen",
            "label": "projectFeeReceiver",
            "offset": 0,
            "slot": "7",
            "type": "t_address"
          },
          {
            "astId": 9935,
            "contract": "contracts/SoulboundGreen.sol:SoulboundGreen",
            "label": "protocolFeeReceiver",
            "offset": 0,
            "slot": "8",
            "type": "t_address"
          },
          {
            "astId": 9937,
            "contract": "contracts/SoulboundGreen.sol:SoulboundGreen",
            "label": "protocolFeeAmount",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 9939,
            "contract": "contracts/SoulboundGreen.sol:SoulboundGreen",
            "label": "protocolFeePercent",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 12945,
            "contract": "contracts/SoulboundGreen.sol:SoulboundGreen",
            "label": "_name",
            "offset": 0,
            "slot": "11",
            "type": "t_string_storage"
          },
          {
            "astId": 12947,
            "contract": "contracts/SoulboundGreen.sol:SoulboundGreen",
            "label": "_symbol",
            "offset": 0,
            "slot": "12",
            "type": "t_string_storage"
          },
          {
            "astId": 12951,
            "contract": "contracts/SoulboundGreen.sol:SoulboundGreen",
            "label": "_owners",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 12955,
            "contract": "contracts/SoulboundGreen.sol:SoulboundGreen",
            "label": "_balances",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 13414,
            "contract": "contracts/SoulboundGreen.sol:SoulboundGreen",
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "15",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
          },
          {
            "astId": 13418,
            "contract": "contracts/SoulboundGreen.sol:SoulboundGreen",
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 13421,
            "contract": "contracts/SoulboundGreen.sol:SoulboundGreen",
            "label": "_allTokens",
            "offset": 0,
            "slot": "17",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 13425,
            "contract": "contracts/SoulboundGreen.sol:SoulboundGreen",
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "18",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 12031,
            "contract": "contracts/SoulboundGreen.sol:SoulboundGreen",
            "label": "_baseTokenURI",
            "offset": 0,
            "slot": "19",
            "type": "t_string_storage"
          },
          {
            "astId": 12034,
            "contract": "contracts/SoulboundGreen.sol:SoulboundGreen",
            "label": "soulboundIdentity",
            "offset": 0,
            "slot": "20",
            "type": "t_contract(ISoulboundIdentity)10954"
          },
          {
            "astId": 12036,
            "contract": "contracts/SoulboundGreen.sol:SoulboundGreen",
            "label": "mintPrice",
            "offset": 0,
            "slot": "21",
            "type": "t_uint256"
          },
          {
            "astId": 12038,
            "contract": "contracts/SoulboundGreen.sol:SoulboundGreen",
            "label": "mintPriceMASA",
            "offset": 0,
            "slot": "22",
            "type": "t_uint256"
          },
          {
            "astId": 12041,
            "contract": "contracts/SoulboundGreen.sol:SoulboundGreen",
            "label": "addLinkPrice",
            "offset": 0,
            "slot": "23",
            "type": "t_uint256"
          },
          {
            "astId": 12044,
            "contract": "contracts/SoulboundGreen.sol:SoulboundGreen",
            "label": "addLinkPriceMASA",
            "offset": 0,
            "slot": "24",
            "type": "t_uint256"
          },
          {
            "astId": 12047,
            "contract": "contracts/SoulboundGreen.sol:SoulboundGreen",
            "label": "queryLinkPrice",
            "offset": 0,
            "slot": "25",
            "type": "t_uint256"
          },
          {
            "astId": 12050,
            "contract": "contracts/SoulboundGreen.sol:SoulboundGreen",
            "label": "queryLinkPriceMASA",
            "offset": 0,
            "slot": "26",
            "type": "t_uint256"
          },
          {
            "astId": 4072,
            "contract": "contracts/SoulboundGreen.sol:SoulboundGreen",
            "label": "_nameFallback",
            "offset": 0,
            "slot": "27",
            "type": "t_string_storage"
          },
          {
            "astId": 4074,
            "contract": "contracts/SoulboundGreen.sol:SoulboundGreen",
            "label": "_versionFallback",
            "offset": 0,
            "slot": "28",
            "type": "t_string_storage"
          },
          {
            "astId": 12673,
            "contract": "contracts/SoulboundGreen.sol:SoulboundGreen",
            "label": "_tokenIdCounter",
            "offset": 0,
            "slot": "29",
            "type": "t_struct(Counter)3050_storage"
          },
          {
            "astId": 12677,
            "contract": "contracts/SoulboundGreen.sol:SoulboundGreen",
            "label": "authorities",
            "offset": 0,
            "slot": "30",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 645,
            "contract": "contracts/SoulboundGreen.sol:SoulboundGreen",
            "label": "_status",
            "offset": 0,
            "slot": "31",
            "type": "t_uint256"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "base": "t_address",
            "encoding": "dynamic_array",
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)dyn_storage": {
            "base": "t_uint256",
            "encoding": "dynamic_array",
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "encoding": "inplace",
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "encoding": "inplace",
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_contract(ISoulboundIdentity)10954": {
            "encoding": "inplace",
            "label": "contract ISoulboundIdentity",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_bool)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => bool)",
            "numberOfBytes": "32",
            "value": "t_bool"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32",
            "value": "t_mapping(t_uint256,t_uint256)"
          },
          "t_mapping(t_address,t_uint256)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32",
            "value": "t_uint256"
          },
          "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
            "encoding": "mapping",
            "key": "t_bytes32",
            "label": "mapping(bytes32 => struct AccessControl.RoleData)",
            "numberOfBytes": "32",
            "value": "t_struct(RoleData)19_storage"
          },
          "t_mapping(t_uint256,t_address)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32",
            "value": "t_address"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32",
            "value": "t_uint256"
          },
          "t_string_storage": {
            "encoding": "bytes",
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Counter)3050_storage": {
            "encoding": "inplace",
            "label": "struct Counters.Counter",
            "members": [
              {
                "astId": 3049,
                "contract": "contracts/SoulboundGreen.sol:SoulboundGreen",
                "label": "_value",
                "offset": 0,
                "slot": "0",
                "type": "t_uint256"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(RoleData)19_storage": {
            "encoding": "inplace",
            "label": "struct AccessControl.RoleData",
            "members": [
              {
                "astId": 16,
                "contract": "contracts/SoulboundGreen.sol:SoulboundGreen",
                "label": "members",
                "offset": 0,
                "slot": "0",
                "type": "t_mapping(t_address,t_bool)"
              },
              {
                "astId": 18,
                "contract": "contracts/SoulboundGreen.sol:SoulboundGreen",
                "label": "adminRole",
                "offset": 0,
                "slot": "1",
                "type": "t_bytes32"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "encoding": "inplace",
            "label": "uint256",
            "numberOfBytes": "32"
          }
        }
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "addAuthority(address)": {
            "notice": "Adds a new authority to the list of authorities"
          },
          "constructor": {
            "notice": "Creates a new soulbound Two-factor authentication (Green - 2FA)"
          },
          "disablePaymentMethod(address)": {
            "notice": "Removes a token as a valid payment method"
          },
          "enablePaymentMethod(address)": {
            "notice": "Adds a new token as a valid payment method"
          },
          "exists(uint256)": {
            "notice": "Returns true if the token exists"
          },
          "getEnabledPaymentMethods()": {
            "notice": "Returns all available payment methods"
          },
          "getIdentityId(uint256)": {
            "notice": "Returns the identityId owned by the given token"
          },
          "getMintPrice(address)": {
            "notice": "Returns the price for minting"
          },
          "getMintPriceWithProtocolFee(address)": {
            "notice": "Returns the price for minting with protocol fee"
          },
          "getProtocolFee(address,uint256)": {
            "notice": "Calculates the protocol fee"
          },
          "mint(address,address,address,uint256,bytes)": {
            "notice": "Mints a new SBT"
          },
          "mint(address,uint256,address,uint256,bytes)": {
            "notice": "Mints a new SBT"
          },
          "removeAuthority(address)": {
            "notice": "Removes an authority from the list of authorities"
          },
          "setAddLinkPrice(uint256)": {
            "notice": "Sets the price for adding the link in SoulLinker in stable coin"
          },
          "setAddLinkPriceMASA(uint256)": {
            "notice": "Sets the price for adding the link in SoulLinker in MASA"
          },
          "setMasaToken(address)": {
            "notice": "Sets the utility token to pay the fee in (MASA)"
          },
          "setMintPrice(uint256)": {
            "notice": "Sets the price of minting in stable coin"
          },
          "setMintPriceMASA(uint256)": {
            "notice": "Sets the price of minting in MASA"
          },
          "setProjectFeeReceiver(address)": {
            "notice": "Set the project fee receiver wallet"
          },
          "setProtocolFeeAmount(uint256)": {
            "notice": "Set the protocol fee amount"
          },
          "setProtocolFeePercent(uint256)": {
            "notice": "Set the protocol fee percent"
          },
          "setProtocolFeeReceiver(address)": {
            "notice": "Set the protocol fee wallet"
          },
          "setQueryLinkPrice(uint256)": {
            "notice": "Sets the price for reading data in SoulLinker in stable coin"
          },
          "setQueryLinkPriceMASA(uint256)": {
            "notice": "Sets the price for reading data in SoulLinker in MASA"
          },
          "setSoulboundIdentity(address)": {
            "notice": "Sets the SoulboundIdentity contract address linked to this SBT"
          },
          "setStableCoin(address)": {
            "notice": "Sets the stable coin to pay the fee in (USDC)"
          },
          "setSwapRouter(address)": {
            "notice": "Sets the swap router address"
          },
          "setWrappedNativeToken(address)": {
            "notice": "Sets the wrapped native token address"
          },
          "supportsInterface(bytes4)": {
            "notice": "Query if a contract implements an interface"
          },
          "tokenURI(uint256)": {
            "notice": "A distinct Uniform Resource Identifier (URI) for a given asset."
          }
        },
        "notice": "Soulbound token that represents a Two-factor authentication (2FA)",
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/IERC5267.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC721 Burnable Token\\n * @dev ERC721 Token that can be burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _burn(tokenId);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Address.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// EIP-712 is Final as of 2022-08-11. This file is deprecated.\\n\\nimport \\\"./EIP712.sol\\\";\\n\"\n    },\n    \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../ShortStrings.sol\\\";\\nimport \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     *\\n     * _Available since v4.9._\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _name.toStringWithFallback(_nameFallback),\\n            _version.toStringWithFallback(_versionFallback),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/ShortStrings.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant _FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(_FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/StorageSlot.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\n    },\n    \"contracts/dex/PaymentGateway.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"../libraries/Errors.sol\\\";\\nimport \\\"../interfaces/dex/IUniswapRouter.sol\\\";\\n\\n/// @title Pay using a Decentralized automated market maker (AMM) when needed\\n/// @author Masa Finance\\n/// @notice Smart contract to call a Dex AMM smart contract to pay to a project fee receiver\\n/// wallet recipient\\n/// @dev This smart contract will call the Uniswap Router interface, based on\\n/// https://github.com/Uniswap/v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router01.sol\\nabstract contract PaymentGateway is AccessControl {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    bytes32 public constant PROJECT_ADMIN_ROLE =\\n        keccak256(\\\"PROJECT_ADMIN_ROLE\\\");\\n\\n    struct PaymentParams {\\n        address swapRouter; // Swap router address\\n        address wrappedNativeToken; // Wrapped native token address\\n        address stableCoin; // Stable coin to pay the fee in (USDC)\\n        address masaToken; // Utility token to pay the fee in (MASA)\\n        address projectFeeReceiver; // Wallet that will receive the project fee\\n        address protocolFeeReceiver; // Wallet that will receive the protocol fee\\n        uint256 protocolFeeAmount; // Protocol fee amount in USD\\n        uint256 protocolFeePercent; // Protocol fee amount\\n    }\\n\\n    /* ========== STATE VARIABLES =========================================== */\\n\\n    address public swapRouter;\\n    address public wrappedNativeToken;\\n\\n    address public stableCoin; // USDC. It also needs to be enabled as payment method, if we want to pay in USDC\\n    address public masaToken; // MASA. It also needs to be enabled as payment method, if we want to pay in MASA\\n\\n    // enabled payment methods: ETH and ERC20 tokens\\n    mapping(address => bool) public enabledPaymentMethod;\\n    address[] public enabledPaymentMethods;\\n\\n    address public projectFeeReceiver;\\n    address public protocolFeeReceiver;\\n    uint256 public protocolFeeAmount;\\n    uint256 public protocolFeePercent;\\n\\n    /* ========== INITIALIZE ================================================ */\\n\\n    /// @notice Creates a new Dex AMM\\n    /// @dev Creates a new Decentralized automated market maker (AMM) smart contract,\\n    // that will call the Uniswap Router interface\\n    /// @param admin Administrator of the smart contract\\n    /// @param paymentParams Payment params\\n    constructor(address admin, PaymentParams memory paymentParams) {\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\\n\\n        swapRouter = paymentParams.swapRouter;\\n        wrappedNativeToken = paymentParams.wrappedNativeToken;\\n        stableCoin = paymentParams.stableCoin;\\n        masaToken = paymentParams.masaToken;\\n        projectFeeReceiver = paymentParams.projectFeeReceiver;\\n        protocolFeeReceiver = paymentParams.protocolFeeReceiver;\\n        protocolFeeAmount = paymentParams.protocolFeeAmount;\\n        protocolFeePercent = paymentParams.protocolFeePercent;\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ====================================== */\\n\\n    /// @notice Sets the swap router address\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _swapRouter New swap router address\\n    function setSwapRouter(\\n        address _swapRouter\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (swapRouter == _swapRouter) revert SameValue();\\n        swapRouter = _swapRouter;\\n    }\\n\\n    /// @notice Sets the wrapped native token address\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _wrappedNativeToken New wrapped native token address\\n    function setWrappedNativeToken(\\n        address _wrappedNativeToken\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (wrappedNativeToken == _wrappedNativeToken) revert SameValue();\\n        wrappedNativeToken = _wrappedNativeToken;\\n    }\\n\\n    /// @notice Sets the stable coin to pay the fee in (USDC)\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _stableCoin New stable coin to pay the fee in\\n    function setStableCoin(\\n        address _stableCoin\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (stableCoin == _stableCoin) revert SameValue();\\n        stableCoin = _stableCoin;\\n    }\\n\\n    /// @notice Sets the utility token to pay the fee in (MASA)\\n    /// @dev The caller must have the admin role to call this function\\n    /// It can be set to address(0) to disable paying in MASA\\n    /// @param _masaToken New utility token to pay the fee in\\n    function setMasaToken(\\n        address _masaToken\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (masaToken == _masaToken) revert SameValue();\\n        masaToken = _masaToken;\\n    }\\n\\n    /// @notice Adds a new token as a valid payment method\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _paymentMethod New token to add\\n    function enablePaymentMethod(\\n        address _paymentMethod\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (enabledPaymentMethod[_paymentMethod]) revert AlreadyAdded();\\n\\n        enabledPaymentMethod[_paymentMethod] = true;\\n        enabledPaymentMethods.push(_paymentMethod);\\n    }\\n\\n    /// @notice Removes a token as a valid payment method\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _paymentMethod Token to remove\\n    function disablePaymentMethod(\\n        address _paymentMethod\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (!enabledPaymentMethod[_paymentMethod])\\n            revert NonExistingErc20Token(_paymentMethod);\\n\\n        enabledPaymentMethod[_paymentMethod] = false;\\n        for (uint256 i = 0; i < enabledPaymentMethods.length; i++) {\\n            if (enabledPaymentMethods[i] == _paymentMethod) {\\n                enabledPaymentMethods[i] = enabledPaymentMethods[\\n                    enabledPaymentMethods.length - 1\\n                ];\\n                enabledPaymentMethods.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @notice Set the project fee receiver wallet\\n    /// @dev The caller must have the admin or project admin role to call this function\\n    /// @param _projectFeeReceiver New project fee receiver wallet\\n    function setProjectFeeReceiver(address _projectFeeReceiver) external {\\n        if (\\n            !hasRole(DEFAULT_ADMIN_ROLE, _msgSender()) &&\\n            !hasRole(PROJECT_ADMIN_ROLE, _msgSender())\\n        ) revert UserMustHaveProtocolOrProjectAdminRole();\\n        if (_projectFeeReceiver == projectFeeReceiver) revert SameValue();\\n        projectFeeReceiver = _projectFeeReceiver;\\n    }\\n\\n    /// @notice Set the protocol fee wallet\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _protocolFeeReceiver New protocol fee wallet\\n    function setProtocolFeeReceiver(\\n        address _protocolFeeReceiver\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (_protocolFeeReceiver == protocolFeeReceiver) revert SameValue();\\n        protocolFeeReceiver = _protocolFeeReceiver;\\n    }\\n\\n    /// @notice Set the protocol fee amount\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _protocolFeeAmount New protocol fee amount\\n    function setProtocolFeeAmount(\\n        uint256 _protocolFeeAmount\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (_protocolFeeAmount == protocolFeeAmount) revert SameValue();\\n        protocolFeeAmount = _protocolFeeAmount;\\n    }\\n\\n    /// @notice Set the protocol fee percent\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _protocolFeePercent New protocol fee percent\\n    function setProtocolFeePercent(\\n        uint256 _protocolFeePercent\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (_protocolFeePercent == protocolFeePercent) revert SameValue();\\n        protocolFeePercent = _protocolFeePercent;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ======================================== */\\n\\n    /* ========== VIEWS ===================================================== */\\n\\n    /// @notice Returns all available payment methods\\n    /// @dev Returns the address of all available payment methods\\n    /// @return Array of all enabled payment methods\\n    function getEnabledPaymentMethods()\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        return enabledPaymentMethods;\\n    }\\n\\n    /// @notice Calculates the protocol fee\\n    /// @dev This method will calculate the protocol fee based on the payment method\\n    /// @param paymentMethod Address of token that user want to pay\\n    /// @param amount Price to be paid in the specified payment method\\n    function getProtocolFee(\\n        address paymentMethod,\\n        uint256 amount\\n    ) external view returns (uint256) {\\n        return _getProtocolFee(paymentMethod, amount);\\n    }\\n\\n    /* ========== PRIVATE FUNCTIONS ========================================= */\\n\\n    /// @notice Converts an amount from a stable coin to a payment method amount\\n    /// @dev This method will perform the swap between the stable coin and the\\n    /// payment method, and return the amount of the payment method,\\n    /// performing the swap if necessary\\n    /// @param paymentMethod Address of token that user want to pay\\n    /// @param amount Price to be converted in the specified payment method\\n    function _convertFromStableCoin(\\n        address paymentMethod,\\n        uint256 amount\\n    ) internal view paymentParamsAlreadySet(amount) returns (uint256) {\\n        if (!enabledPaymentMethod[paymentMethod] || paymentMethod == stableCoin)\\n            revert InvalidToken(paymentMethod);\\n\\n        if (amount == 0) return 0;\\n\\n        if (paymentMethod == address(0)) {\\n            return _estimateSwapAmount(wrappedNativeToken, stableCoin, amount);\\n        } else {\\n            return _estimateSwapAmount(paymentMethod, stableCoin, amount);\\n        }\\n    }\\n\\n    /// @notice Calculates the protocol fee\\n    /// @dev This method will calculate the protocol fee based on the payment method\\n    /// @param paymentMethod Address of token that user want to pay\\n    /// @param amount Price to be paid in the specified payment method\\n    function _getProtocolFee(\\n        address paymentMethod,\\n        uint256 amount\\n    ) internal view returns (uint256) {\\n        uint256 protocolFee = 0;\\n        if (protocolFeeAmount > 0) {\\n            if (paymentMethod == stableCoin) {\\n                protocolFee = protocolFeeAmount;\\n            } else {\\n                protocolFee = _convertFromStableCoin(\\n                    paymentMethod,\\n                    protocolFeeAmount\\n                );\\n            }\\n        }\\n        if (protocolFeePercent > 0) {\\n            protocolFee = protocolFee.add(\\n                amount.mul(protocolFeePercent).div(100)\\n            );\\n        }\\n        return protocolFee;\\n    }\\n\\n    /// @notice Performs the payment in any payment method\\n    /// @dev This method will transfer the funds to the project fee receiver wallet, performing\\n    /// the swap if necessary, and transfer the protocol fee to the protocol fee wallet\\n    /// @param paymentMethod Address of token that user want to pay\\n    /// @param amount Price to be paid in the specified payment method\\n    /// @param protocolFee Protocol fee to be paid in the specified payment method\\n    function _pay(\\n        address paymentMethod,\\n        uint256 amount,\\n        uint256 protocolFee\\n    ) internal paymentParamsAlreadySet(amount.add(protocolFee)) {\\n        if (amount == 0 && protocolFee == 0) return;\\n        if (protocolFee > 0 && protocolFeeReceiver == address(0))\\n            revert ProtocolFeeReceiverNotSet();\\n\\n        if (!enabledPaymentMethod[paymentMethod])\\n            revert InvalidPaymentMethod(paymentMethod);\\n        if (paymentMethod == address(0)) {\\n            // ETH\\n            if (msg.value < amount.add(protocolFee))\\n                revert InsufficientEthAmount(amount.add(protocolFee));\\n            if (amount > 0) {\\n                (bool success, ) = payable(projectFeeReceiver).call{\\n                    value: amount\\n                }(\\\"\\\");\\n                if (!success) revert TransferFailed();\\n            }\\n            if (protocolFee > 0) {\\n                (bool success, ) = payable(protocolFeeReceiver).call{\\n                    value: protocolFee\\n                }(\\\"\\\");\\n                if (!success) revert TransferFailed();\\n            }\\n            if (msg.value > amount.add(protocolFee)) {\\n                // return diff\\n                uint256 refund = msg.value.sub(amount.add(protocolFee));\\n                (bool success, ) = payable(msg.sender).call{value: refund}(\\\"\\\");\\n                if (!success) revert RefundFailed();\\n            }\\n        } else {\\n            // ERC20 token, including MASA and USDC\\n            if (amount > 0) {\\n                IERC20(paymentMethod).safeTransferFrom(\\n                    msg.sender,\\n                    projectFeeReceiver,\\n                    amount\\n                );\\n            }\\n            if (protocolFee > 0) {\\n                IERC20(paymentMethod).safeTransferFrom(\\n                    msg.sender,\\n                    protocolFeeReceiver,\\n                    protocolFee\\n                );\\n            }\\n        }\\n    }\\n\\n    function _estimateSwapAmount(\\n        address _fromToken,\\n        address _toToken,\\n        uint256 _amountOut\\n    ) private view returns (uint256) {\\n        uint256[] memory amounts;\\n        address[] memory path;\\n        path = _getPathFromTokenToToken(_fromToken, _toToken);\\n        amounts = IUniswapRouter(swapRouter).getAmountsIn(_amountOut, path);\\n        return amounts[0];\\n    }\\n\\n    function _getPathFromTokenToToken(\\n        address fromToken,\\n        address toToken\\n    ) private view returns (address[] memory) {\\n        if (fromToken == wrappedNativeToken || toToken == wrappedNativeToken) {\\n            address[] memory path = new address[](2);\\n            path[0] = fromToken == wrappedNativeToken\\n                ? wrappedNativeToken\\n                : fromToken;\\n            path[1] = toToken == wrappedNativeToken\\n                ? wrappedNativeToken\\n                : toToken;\\n            return path;\\n        } else {\\n            address[] memory path = new address[](3);\\n            path[0] = fromToken;\\n            path[1] = wrappedNativeToken;\\n            path[2] = toToken;\\n            return path;\\n        }\\n    }\\n\\n    /* ========== MODIFIERS ================================================= */\\n\\n    modifier paymentParamsAlreadySet(uint256 amount) {\\n        if (amount > 0 && swapRouter == address(0))\\n            revert PaymentParamsNotSet();\\n        if (amount > 0 && wrappedNativeToken == address(0))\\n            revert PaymentParamsNotSet();\\n        if (amount > 0 && stableCoin == address(0))\\n            revert PaymentParamsNotSet();\\n        if (amount > 0 && projectFeeReceiver == address(0))\\n            revert PaymentParamsNotSet();\\n        _;\\n    }\\n\\n    /* ========== EVENTS ==================================================== */\\n}\\n\"\n    },\n    \"contracts/interfaces/dex/IUniswapRouter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title Uniswap Router interface\\n/// @author Masa Finance\\n/// @notice Interface of the Uniswap Router contract\\n/// @dev This interface is used to interact with the Uniswap Router contract,\\n/// and gets the most important functions of the contract. It's based on\\n/// https://github.com/Uniswap/v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router01.sol\\ninterface IUniswapRouter {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function getAmountsOut(\\n        uint256 amountIn,\\n        address[] calldata path\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(\\n        uint256 amountOut,\\n        address[] calldata path\\n    ) external view returns (uint256[] memory amounts);\\n}\\n\"\n    },\n    \"contracts/interfaces/ILinkableSBT.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"../tokens/SBT/ISBT.sol\\\";\\n\\ninterface ILinkableSBT is ISBT {\\n    function addLinkPrice() external view returns (uint256);\\n\\n    function addLinkPriceMASA() external view returns (uint256);\\n\\n    function queryLinkPrice() external view returns (uint256);\\n\\n    function queryLinkPriceMASA() external view returns (uint256);\\n}\\n\"\n    },\n    \"contracts/interfaces/ISoulboundIdentity.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"../tokens/SBT/ISBT.sol\\\";\\n\\nimport \\\"./ISoulName.sol\\\";\\n\\ninterface ISoulboundIdentity is ISBT {\\n    function mint(address to) external payable returns (uint256);\\n\\n    function mint(\\n        address paymentMethod,\\n        address to\\n    ) external payable returns (uint256);\\n\\n    function mintIdentityWithName(\\n        address to,\\n        string memory name,\\n        uint256 yearsPeriod,\\n        string memory _tokenURI\\n    ) external payable returns (uint256);\\n\\n    function mintIdentityWithName(\\n        address paymentMethod,\\n        address to,\\n        string memory name,\\n        uint256 yearsPeriod,\\n        string memory _tokenURI\\n    ) external payable returns (uint256);\\n\\n    function getSoulName() external view returns (ISoulName);\\n\\n    function tokenOfOwner(address owner) external view returns (uint256);\\n}\\n\"\n    },\n    \"contracts/interfaces/ISoulName.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\ninterface ISoulName {\\n    function mint(\\n        address to,\\n        string memory name,\\n        uint256 yearsPeriod,\\n        string memory _tokenURI\\n    ) external returns (uint256);\\n\\n    function getExtension() external view returns (string memory);\\n\\n    function isAvailable(\\n        string memory name\\n    ) external view returns (bool available);\\n\\n    function tokenData(\\n        uint256 tokenId\\n    ) external view returns (string memory name, uint256 expirationDate);\\n\\n    function getTokenData(\\n        string memory name\\n    )\\n        external\\n        view\\n        returns (\\n            string memory sbtName,\\n            bool linked,\\n            uint256 identityId,\\n            uint256 tokenId,\\n            uint256 expirationDate,\\n            bool active\\n        );\\n\\n    function getTokenId(string memory name) external view returns (uint256);\\n\\n    function getSoulNames(\\n        address owner\\n    ) external view returns (string[] memory sbtNames);\\n\\n    function getSoulNames(\\n        uint256 identityId\\n    ) external view returns (string[] memory sbtNames);\\n}\\n\"\n    },\n    \"contracts/libraries/Errors.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nerror AddressDoesNotHaveIdentity(address to);\\nerror AlreadyAdded();\\nerror AuthorityNotExists(address authority);\\nerror CallerNotOwner(address caller);\\nerror CallerNotReader(address caller);\\nerror CreditScoreAlreadyCreated(address to);\\nerror IdentityAlreadyCreated(address to);\\nerror IdentityOwnerIsReader(uint256 readerIdentityId);\\nerror InsufficientEthAmount(uint256 amount);\\nerror IdentityOwnerNotTokenOwner(uint256 tokenId, uint256 ownerIdentityId);\\nerror InvalidPaymentMethod(address paymentMethod);\\nerror InvalidSignature();\\nerror InvalidSignatureDate(uint256 signatureDate);\\nerror InvalidToken(address token);\\nerror InvalidTokenURI(string tokenURI);\\nerror LinkAlreadyExists(\\n    address token,\\n    uint256 tokenId,\\n    uint256 readerIdentityId,\\n    uint256 signatureDate\\n);\\nerror LinkAlreadyRevoked();\\nerror LinkDoesNotExist();\\nerror NameAlreadyExists(string name);\\nerror NameNotFound(string name);\\nerror NameRegisteredByOtherAccount(string name, uint256 tokenId);\\nerror NotAuthorized(address signer);\\nerror NonExistingErc20Token(address erc20token);\\nerror NotLinkedToAnIdentitySBT();\\nerror PaymentParamsNotSet();\\nerror ProtocolFeeReceiverNotSet();\\nerror RefundFailed();\\nerror SameValue();\\nerror SBTAlreadyLinked(address token);\\nerror SoulNameContractNotSet();\\nerror SoulNameNotExist();\\nerror SoulNameNotRegistered(address token);\\nerror TokenNotFound(uint256 tokenId);\\nerror TransferFailed();\\nerror URIAlreadyExists(string tokenURI);\\nerror UserMustHaveProtocolOrProjectAdminRole();\\nerror ValidPeriodExpired(uint256 expirationDate);\\nerror ZeroAddress();\\nerror ZeroLengthName(string name);\\nerror ZeroYearsPeriod(uint256 yearsPeriod);\\n\"\n    },\n    \"contracts/libraries/Utils.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title Utilities library for Masa Contracts Identity repository\\n/// @author Masa Finance\\n/// @notice Library of utilities for Masa Contracts Identity repository\\nlibrary Utils {\\n    struct slice {\\n        uint256 _len;\\n        uint256 _ptr;\\n    }\\n\\n    function toLowerCase(\\n        string memory _str\\n    ) internal pure returns (string memory) {\\n        bytes memory bStr = bytes(_str);\\n        bytes memory bLower = new bytes(bStr.length);\\n\\n        for (uint256 i = 0; i < bStr.length; i++) {\\n            // Uppercase character...\\n            if ((bStr[i] >= 0x41) && (bStr[i] <= 0x5A)) {\\n                // So we add 0x20 to make it lowercase\\n                bLower[i] = bytes1(uint8(bStr[i]) + 0x20);\\n            } else {\\n                bLower[i] = bStr[i];\\n            }\\n        }\\n        return string(bLower);\\n    }\\n\\n    function toSlice(string memory self) private pure returns (slice memory) {\\n        uint256 ptr;\\n        assembly {\\n            ptr := add(self, 0x20)\\n        }\\n        return slice(bytes(self).length, ptr);\\n    }\\n\\n    function startsWith(\\n        string memory str,\\n        string memory needle\\n    ) internal pure returns (bool) {\\n        slice memory s_str = toSlice(str);\\n        slice memory s_needle = toSlice(needle);\\n\\n        if (s_str._len < s_needle._len) {\\n            return false;\\n        }\\n\\n        if (s_str._ptr == s_needle._ptr) {\\n            return true;\\n        }\\n\\n        bool equal;\\n        assembly {\\n            let length := mload(s_needle)\\n            let selfptr := mload(add(s_str, 0x20))\\n            let needleptr := mload(add(s_needle, 0x20))\\n            equal := eq(\\n                keccak256(selfptr, length),\\n                keccak256(needleptr, length)\\n            )\\n        }\\n        return equal;\\n    }\\n}\\n\"\n    },\n    \"contracts/reference/ReferenceSBTAuthority.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"../tokens/MasaSBTAuthority.sol\\\";\\n\\n/// @title Soulbound reference Authority SBT\\n/// @author Masa Finance\\n/// @notice Soulbound token that represents a Authority SBT\\n/// @dev Inherits from the SBT contract.\\ncontract ReferenceSBTAuthority is MasaSBTAuthority, ReentrancyGuard {\\n    error MaxSBTMinted(address to, uint256 maximum);\\n\\n    uint256 public maxSBTToMint = 1;\\n\\n    /* ========== STATE VARIABLES =========================================== */\\n\\n    /* ========== INITIALIZE ================================================ */\\n\\n    /// @notice Creates a new Authority SBT\\n    /// @dev Creates a new Authority SBT, inheriting from the SBT contract.\\n    /// @param admin Administrator of the smart contract\\n    /// @param name Name of the token\\n    /// @param symbol Symbol of the token\\n    /// @param baseTokenURI Base URI of the token\\n    /// @param soulboundIdentity Address of the SoulboundIdentity contract\\n    /// @param paymentParams Payment gateway params\\n    /// @param _maxSBTToMint Maximum number of SBT that can be minted\\n    constructor(\\n        address admin,\\n        string memory name,\\n        string memory symbol,\\n        string memory baseTokenURI,\\n        address soulboundIdentity,\\n        PaymentParams memory paymentParams,\\n        uint256 _maxSBTToMint\\n    )\\n        MasaSBTAuthority(\\n            admin,\\n            name,\\n            symbol,\\n            baseTokenURI,\\n            soulboundIdentity,\\n            paymentParams\\n        )\\n    {\\n        maxSBTToMint = _maxSBTToMint;\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ====================================== */\\n\\n    /* ========== MUTATIVE FUNCTIONS ======================================== */\\n\\n    /// @notice Mints a new SBT\\n    /// @dev The caller must have the MINTER role\\n    /// @param paymentMethod Address of token that user want to pay\\n    /// @param identityId TokenId of the identity to mint the NFT to\\n    /// @return The SBT ID of the newly minted SBT\\n    function mint(\\n        address paymentMethod,\\n        uint256 identityId\\n    ) external nonReentrant returns (uint256) {\\n        address to = soulboundIdentity.ownerOf(identityId);\\n        if (maxSBTToMint > 0 && balanceOf(to) >= maxSBTToMint)\\n            revert MaxSBTMinted(to, maxSBTToMint);\\n\\n        uint256 tokenId = _mintWithCounter(paymentMethod, to);\\n\\n        emit MintedToIdentity(tokenId, identityId);\\n\\n        return tokenId;\\n    }\\n\\n    /// @notice Mints a new SBT\\n    /// @dev The caller must have the MINTER role\\n    /// @param paymentMethod Address of token that user want to pay\\n    /// @param to The address to mint the SBT to\\n    /// @return The SBT ID of the newly minted SBT\\n    function mint(\\n        address paymentMethod,\\n        address to\\n    ) external nonReentrant returns (uint256) {\\n        if (maxSBTToMint > 0 && balanceOf(to) >= maxSBTToMint)\\n            revert MaxSBTMinted(to, maxSBTToMint);\\n\\n        uint256 tokenId = _mintWithCounter(paymentMethod, to);\\n\\n        emit MintedToAddress(tokenId, to);\\n\\n        return tokenId;\\n    }\\n\\n    /* ========== VIEWS ===================================================== */\\n\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        return _baseURI();\\n    }\\n\\n    /* ========== PRIVATE FUNCTIONS ========================================= */\\n\\n    /* ========== MODIFIERS ================================================= */\\n\\n    /* ========== EVENTS ==================================================== */\\n\\n    event MintedToIdentity(uint256 tokenId, uint256 identityId);\\n\\n    event MintedToAddress(uint256 tokenId, address to);\\n}\\n\"\n    },\n    \"contracts/reference/ReferenceSBTSelfSovereign.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"../tokens/MasaSBTSelfSovereign.sol\\\";\\n\\n/// @title Soulbound reference Self-Sovereign SBT\\n/// @author Masa Finance\\n/// @notice Soulbound token that represents a Self-Sovereign SBT\\n/// @dev Inherits from the SBT contract.\\ncontract ReferenceSBTSelfSovereign is MasaSBTSelfSovereign, ReentrancyGuard {\\n    error MaxSBTMinted(address to, uint256 maximum);\\n\\n    uint256 public maxSBTToMint = 1;\\n\\n    /* ========== STATE VARIABLES =========================================== */\\n\\n    /* ========== INITIALIZE ================================================ */\\n\\n    /// @notice Creates a new Self-Sovereign SBT\\n    /// @dev Creates a new Self-Sovereign SBT, inheriting from the SBT contract.\\n    /// @param admin Administrator of the smart contract\\n    /// @param name Name of the token\\n    /// @param symbol Symbol of the token\\n    /// @param baseTokenURI Base URI of the token\\n    /// @param soulboundIdentity Address of the SoulboundIdentity contract\\n    /// @param paymentParams Payment gateway params\\n    /// @param _maxSBTToMint Maximum number of SBT that can be minted\\n    constructor(\\n        address admin,\\n        string memory name,\\n        string memory symbol,\\n        string memory baseTokenURI,\\n        address soulboundIdentity,\\n        PaymentParams memory paymentParams,\\n        uint256 _maxSBTToMint\\n    )\\n        MasaSBTSelfSovereign(\\n            admin,\\n            name,\\n            symbol,\\n            baseTokenURI,\\n            soulboundIdentity,\\n            paymentParams\\n        )\\n        EIP712(\\\"ReferenceSBTSelfSovereign\\\", \\\"1.0.0\\\")\\n    {\\n        maxSBTToMint = _maxSBTToMint;\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ====================================== */\\n\\n    /* ========== MUTATIVE FUNCTIONS ======================================== */\\n\\n    /// @notice Mints a new SBT\\n    /// @dev The caller must have the MINTER role\\n    /// @param paymentMethod Address of token that user want to pay\\n    /// @param identityId TokenId of the identity to mint the NFT to\\n    /// @param authorityAddress Address of the authority that signed the message\\n    /// @param signatureDate Date of the signature\\n    /// @param signature Signature of the message\\n    /// @return The SBT ID of the newly minted SBT\\n    function mint(\\n        address paymentMethod,\\n        uint256 identityId,\\n        address authorityAddress,\\n        uint256 signatureDate,\\n        bytes calldata signature\\n    ) external payable virtual nonReentrant returns (uint256) {\\n        address to = soulboundIdentity.ownerOf(identityId);\\n        if (maxSBTToMint > 0 && balanceOf(to) >= maxSBTToMint)\\n            revert MaxSBTMinted(to, maxSBTToMint);\\n        if (to != _msgSender()) revert CallerNotOwner(_msgSender());\\n\\n        uint256 tokenId = _mintWithCounter(\\n            paymentMethod,\\n            to,\\n            _hash(identityId, authorityAddress, signatureDate),\\n            authorityAddress,\\n            signature\\n        );\\n\\n        emit MintedToIdentity(\\n            tokenId,\\n            identityId,\\n            authorityAddress,\\n            signatureDate,\\n            paymentMethod,\\n            mintPrice\\n        );\\n\\n        return tokenId;\\n    }\\n\\n    /// @notice Mints a new SBT\\n    /// @dev The caller must have the MINTER role\\n    /// @param paymentMethod Address of token that user want to pay\\n    /// @param to The address to mint the SBT to\\n    /// @param authorityAddress Address of the authority that signed the message\\n    /// @param signatureDate Date of the signature\\n    /// @param signature Signature of the message\\n    /// @return The SBT ID of the newly minted SBT\\n    function mint(\\n        address paymentMethod,\\n        address to,\\n        address authorityAddress,\\n        uint256 signatureDate,\\n        bytes calldata signature\\n    ) external payable virtual returns (uint256) {\\n        if (maxSBTToMint > 0 && balanceOf(to) >= maxSBTToMint)\\n            revert MaxSBTMinted(to, maxSBTToMint);\\n        if (to != _msgSender()) revert CallerNotOwner(_msgSender());\\n\\n        uint256 tokenId = _mintWithCounter(\\n            paymentMethod,\\n            to,\\n            _hash(to, authorityAddress, signatureDate),\\n            authorityAddress,\\n            signature\\n        );\\n\\n        emit MintedToAddress(\\n            tokenId,\\n            to,\\n            authorityAddress,\\n            signatureDate,\\n            paymentMethod,\\n            mintPrice\\n        );\\n\\n        return tokenId;\\n    }\\n\\n    /* ========== VIEWS ===================================================== */\\n\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        return _baseURI();\\n    }\\n\\n    /* ========== PRIVATE FUNCTIONS ========================================= */\\n\\n    function _hash(\\n        uint256 identityId,\\n        address authorityAddress,\\n        uint256 signatureDate\\n    ) internal view returns (bytes32) {\\n        return\\n            _hashTypedDataV4(\\n                keccak256(\\n                    abi.encode(\\n                        keccak256(\\n                            \\\"Mint(uint256 identityId,address authorityAddress,uint256 signatureDate)\\\"\\n                        ),\\n                        identityId,\\n                        authorityAddress,\\n                        signatureDate\\n                    )\\n                )\\n            );\\n    }\\n\\n    function _hash(\\n        address to,\\n        address authorityAddress,\\n        uint256 signatureDate\\n    ) internal view returns (bytes32) {\\n        return\\n            _hashTypedDataV4(\\n                keccak256(\\n                    abi.encode(\\n                        keccak256(\\n                            \\\"Mint(address to,address authorityAddress,uint256 signatureDate)\\\"\\n                        ),\\n                        to,\\n                        authorityAddress,\\n                        signatureDate\\n                    )\\n                )\\n            );\\n    }\\n\\n    /* ========== MODIFIERS ================================================= */\\n\\n    /* ========== EVENTS ==================================================== */\\n\\n    event MintedToIdentity(\\n        uint256 tokenId,\\n        uint256 identityId,\\n        address authorityAddress,\\n        uint256 signatureDate,\\n        address paymentMethod,\\n        uint256 mintPrice\\n    );\\n\\n    event MintedToAddress(\\n        uint256 tokenId,\\n        address to,\\n        address authorityAddress,\\n        uint256 signatureDate,\\n        address paymentMethod,\\n        uint256 mintPrice\\n    );\\n}\\n\"\n    },\n    \"contracts/SoulboundCreditScore.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./libraries/Errors.sol\\\";\\nimport \\\"./tokens/MasaSBTSelfSovereign.sol\\\";\\n\\n/// @title Soulbound Credit Score\\n/// @author Masa Finance\\n/// @notice Soulbound token that represents a credit score.\\n/// @dev Soulbound credit score, that inherits from the SBT contract.\\ncontract SoulboundCreditScore is MasaSBTSelfSovereign, ReentrancyGuard {\\n    /* ========== STATE VARIABLES =========================================== */\\n\\n    /* ========== INITIALIZE ================================================ */\\n\\n    /// @notice Creates a new soulbound credit score\\n    /// @dev Creates a new soulbound credit score, inheriting from the SBT contract.\\n    /// @param admin Administrator of the smart contract\\n    /// @param name Name of the token\\n    /// @param symbol Symbol of the token\\n    /// @param baseTokenURI Base URI of the token\\n    /// @param soulboundIdentity Address of the SoulboundIdentity contract\\n    /// @param paymentParams Payment gateway params\\n    constructor(\\n        address admin,\\n        string memory name,\\n        string memory symbol,\\n        string memory baseTokenURI,\\n        address soulboundIdentity,\\n        PaymentParams memory paymentParams\\n    )\\n        MasaSBTSelfSovereign(\\n            admin,\\n            name,\\n            symbol,\\n            baseTokenURI,\\n            soulboundIdentity,\\n            paymentParams\\n        )\\n        EIP712(\\\"SoulboundCreditScore\\\", \\\"1.0.0\\\")\\n    {}\\n\\n    /* ========== RESTRICTED FUNCTIONS ====================================== */\\n\\n    /* ========== MUTATIVE FUNCTIONS ======================================== */\\n\\n    /// @notice Mints a new SBT\\n    /// @dev The caller must have the MINTER role\\n    /// @param paymentMethod Address of token that user want to pay\\n    /// @param identityId TokenId of the identity to mint the NFT to\\n    /// @param authorityAddress Address of the authority that signed the message\\n    /// @param signatureDate Date of the signature\\n    /// @param signature Signature of the message\\n    /// @return The NFT ID of the newly minted SBT\\n    function mint(\\n        address paymentMethod,\\n        uint256 identityId,\\n        address authorityAddress,\\n        uint256 signatureDate,\\n        bytes calldata signature\\n    ) external payable nonReentrant returns (uint256) {\\n        address to = soulboundIdentity.ownerOf(identityId);\\n        if (to != _msgSender()) revert CallerNotOwner(_msgSender());\\n        if (balanceOf(to) > 0) revert CreditScoreAlreadyCreated(to);\\n\\n        uint256 tokenId = _mintWithCounter(\\n            paymentMethod,\\n            to,\\n            _hash(identityId, authorityAddress, signatureDate),\\n            authorityAddress,\\n            signature\\n        );\\n\\n        emit SoulboundCreditScoreMintedToIdentity(\\n            tokenId,\\n            identityId,\\n            authorityAddress,\\n            signatureDate,\\n            paymentMethod,\\n            mintPrice\\n        );\\n\\n        return tokenId;\\n    }\\n\\n    /// @notice Mints a new SBT\\n    /// @dev The caller must have the MINTER role\\n    /// @param paymentMethod Address of token that user want to pay\\n    /// @param to The address to mint the SBT to\\n    /// @param authorityAddress Address of the authority that signed the message\\n    /// @param signatureDate Date of the signature\\n    /// @param signature Signature of the message\\n    /// @return The SBT ID of the newly minted SBT\\n    function mint(\\n        address paymentMethod,\\n        address to,\\n        address authorityAddress,\\n        uint256 signatureDate,\\n        bytes calldata signature\\n    ) external payable nonReentrant returns (uint256) {\\n        if (to != _msgSender()) revert CallerNotOwner(_msgSender());\\n        if (balanceOf(to) > 0) revert CreditScoreAlreadyCreated(to);\\n\\n        uint256 tokenId = _mintWithCounter(\\n            paymentMethod,\\n            to,\\n            _hash(to, authorityAddress, signatureDate),\\n            authorityAddress,\\n            signature\\n        );\\n\\n        emit SoulboundCreditScoreMintedToAddress(\\n            tokenId,\\n            to,\\n            authorityAddress,\\n            signatureDate,\\n            paymentMethod,\\n            mintPrice\\n        );\\n\\n        return tokenId;\\n    }\\n\\n    /* ========== VIEWS ===================================================== */\\n\\n    /* ========== PRIVATE FUNCTIONS ========================================= */\\n\\n    function _hash(\\n        uint256 identityId,\\n        address authorityAddress,\\n        uint256 signatureDate\\n    ) internal view returns (bytes32) {\\n        return\\n            _hashTypedDataV4(\\n                keccak256(\\n                    abi.encode(\\n                        keccak256(\\n                            \\\"MintCreditScore(uint256 identityId,address authorityAddress,uint256 signatureDate)\\\"\\n                        ),\\n                        identityId,\\n                        authorityAddress,\\n                        signatureDate\\n                    )\\n                )\\n            );\\n    }\\n\\n    function _hash(\\n        address to,\\n        address authorityAddress,\\n        uint256 signatureDate\\n    ) internal view returns (bytes32) {\\n        return\\n            _hashTypedDataV4(\\n                keccak256(\\n                    abi.encode(\\n                        keccak256(\\n                            \\\"MintCreditScore(address to,address authorityAddress,uint256 signatureDate)\\\"\\n                        ),\\n                        to,\\n                        authorityAddress,\\n                        signatureDate\\n                    )\\n                )\\n            );\\n    }\\n\\n    /* ========== MODIFIERS ================================================= */\\n\\n    /* ========== EVENTS ==================================================== */\\n\\n    event SoulboundCreditScoreMintedToIdentity(\\n        uint256 tokenId,\\n        uint256 identityId,\\n        address authorityAddress,\\n        uint256 signatureDate,\\n        address paymentMethod,\\n        uint256 mintPrice\\n    );\\n\\n    event SoulboundCreditScoreMintedToAddress(\\n        uint256 tokenId,\\n        address to,\\n        address authorityAddress,\\n        uint256 signatureDate,\\n        address paymentMethod,\\n        uint256 mintPrice\\n    );\\n}\\n\"\n    },\n    \"contracts/SoulboundGreen.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./libraries/Errors.sol\\\";\\nimport \\\"./tokens/MasaSBTSelfSovereign.sol\\\";\\n\\n/// @title Soulbound Two-factor authentication (Green - 2FA)\\n/// @author Masa Finance\\n/// @notice Soulbound token that represents a Two-factor authentication (2FA)\\n/// @dev Soulbound Green, that inherits from the SBT contract.\\ncontract SoulboundGreen is MasaSBTSelfSovereign, ReentrancyGuard {\\n    /* ========== STATE VARIABLES =========================================== */\\n\\n    /* ========== INITIALIZE ================================================ */\\n\\n    /// @notice Creates a new soulbound Two-factor authentication (Green - 2FA)\\n    /// @dev Creates a new soulbound Green, inheriting from the SBT contract.\\n    /// @param admin Administrator of the smart contract\\n    /// @param name Name of the token\\n    /// @param symbol Symbol of the token\\n    /// @param baseTokenURI Base URI of the token\\n    /// @param soulboundIdentity Address of the SoulboundIdentity contract\\n    /// @param paymentParams Payment gateway params\\n    constructor(\\n        address admin,\\n        string memory name,\\n        string memory symbol,\\n        string memory baseTokenURI,\\n        address soulboundIdentity,\\n        PaymentParams memory paymentParams\\n    )\\n        MasaSBTSelfSovereign(\\n            admin,\\n            name,\\n            symbol,\\n            baseTokenURI,\\n            soulboundIdentity,\\n            paymentParams\\n        )\\n        EIP712(\\\"SoulboundGreen\\\", \\\"1.0.0\\\")\\n    {}\\n\\n    /* ========== RESTRICTED FUNCTIONS ====================================== */\\n\\n    /* ========== MUTATIVE FUNCTIONS ======================================== */\\n\\n    /// @notice Mints a new SBT\\n    /// @dev The caller must have the MINTER role\\n    /// @param paymentMethod Address of token that user want to pay\\n    /// @param identityId TokenId of the identity to mint the NFT to\\n    /// @param authorityAddress Address of the authority that signed the message\\n    /// @param signatureDate Date of the signature\\n    /// @param signature Signature of the message\\n    /// @return The NFT ID of the newly minted SBT\\n    function mint(\\n        address paymentMethod,\\n        uint256 identityId,\\n        address authorityAddress,\\n        uint256 signatureDate,\\n        bytes calldata signature\\n    ) external payable nonReentrant returns (uint256) {\\n        address to = soulboundIdentity.ownerOf(identityId);\\n        if (to != _msgSender()) revert CallerNotOwner(_msgSender());\\n\\n        uint256 tokenId = _mintWithCounter(\\n            paymentMethod,\\n            to,\\n            _hash(identityId, authorityAddress, signatureDate),\\n            authorityAddress,\\n            signature\\n        );\\n\\n        emit SoulboundGreenMintedToIdentity(\\n            tokenId,\\n            identityId,\\n            authorityAddress,\\n            signatureDate,\\n            paymentMethod,\\n            mintPrice\\n        );\\n\\n        return tokenId;\\n    }\\n\\n    /// @notice Mints a new SBT\\n    /// @dev The caller must have the MINTER role\\n    /// @param paymentMethod Address of token that user want to pay\\n    /// @param to The address to mint the SBT to\\n    /// @param authorityAddress Address of the authority that signed the message\\n    /// @param signatureDate Date of the signature\\n    /// @param signature Signature of the message\\n    /// @return The SBT ID of the newly minted SBT\\n    function mint(\\n        address paymentMethod,\\n        address to,\\n        address authorityAddress,\\n        uint256 signatureDate,\\n        bytes calldata signature\\n    ) external payable nonReentrant returns (uint256) {\\n        if (to != _msgSender()) revert CallerNotOwner(_msgSender());\\n\\n        uint256 tokenId = _mintWithCounter(\\n            paymentMethod,\\n            to,\\n            _hash(to, authorityAddress, signatureDate),\\n            authorityAddress,\\n            signature\\n        );\\n\\n        emit SoulboundGreenMintedToAddress(\\n            tokenId,\\n            to,\\n            authorityAddress,\\n            signatureDate,\\n            paymentMethod,\\n            mintPrice\\n        );\\n\\n        return tokenId;\\n    }\\n\\n    /* ========== VIEWS ===================================================== */\\n\\n    /* ========== PRIVATE FUNCTIONS ========================================= */\\n\\n    function _hash(\\n        uint256 identityId,\\n        address authorityAddress,\\n        uint256 signatureDate\\n    ) internal view returns (bytes32) {\\n        return\\n            _hashTypedDataV4(\\n                keccak256(\\n                    abi.encode(\\n                        keccak256(\\n                            \\\"MintGreen(uint256 identityId,address authorityAddress,uint256 signatureDate)\\\"\\n                        ),\\n                        identityId,\\n                        authorityAddress,\\n                        signatureDate\\n                    )\\n                )\\n            );\\n    }\\n\\n    function _hash(\\n        address to,\\n        address authorityAddress,\\n        uint256 signatureDate\\n    ) internal view returns (bytes32) {\\n        return\\n            _hashTypedDataV4(\\n                keccak256(\\n                    abi.encode(\\n                        keccak256(\\n                            \\\"MintGreen(address to,address authorityAddress,uint256 signatureDate)\\\"\\n                        ),\\n                        to,\\n                        authorityAddress,\\n                        signatureDate\\n                    )\\n                )\\n            );\\n    }\\n\\n    /* ========== MODIFIERS ================================================= */\\n\\n    /* ========== EVENTS ==================================================== */\\n\\n    event SoulboundGreenMintedToIdentity(\\n        uint256 tokenId,\\n        uint256 identityId,\\n        address authorityAddress,\\n        uint256 signatureDate,\\n        address paymentMethod,\\n        uint256 mintPrice\\n    );\\n\\n    event SoulboundGreenMintedToAddress(\\n        uint256 tokenId,\\n        address to,\\n        address authorityAddress,\\n        uint256 signatureDate,\\n        address paymentMethod,\\n        uint256 mintPrice\\n    );\\n}\\n\"\n    },\n    \"contracts/SoulboundIdentity.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./libraries/Errors.sol\\\";\\nimport \\\"./interfaces/ISoulboundIdentity.sol\\\";\\nimport \\\"./interfaces/ISoulName.sol\\\";\\nimport \\\"./tokens/MasaSBTAuthority.sol\\\";\\n\\n/// @title Soulbound Identity\\n/// @author Masa Finance\\n/// @notice Soulbound token that represents an identity.\\n/// @dev Soulbound identity, that inherits from the SBT contract.\\ncontract SoulboundIdentity is\\n    MasaSBTAuthority,\\n    ISoulboundIdentity,\\n    ReentrancyGuard\\n{\\n    /* ========== STATE VARIABLES =========================================== */\\n\\n    ISoulName public soulName;\\n\\n    /* ========== INITIALIZE ================================================ */\\n\\n    /// @notice Creates a new soulbound identity\\n    /// @dev Creates a new soulbound identity, inheriting from the SBT contract.\\n    /// @param admin Administrator of the smart contract\\n    /// @param name Name of the token\\n    /// @param symbol Symbol of the token\\n    /// @param baseTokenURI Base URI of the token\\n    /// @param paymentParams Payment gateway params\\n    constructor(\\n        address admin,\\n        string memory name,\\n        string memory symbol,\\n        string memory baseTokenURI,\\n        PaymentParams memory paymentParams\\n    )\\n        MasaSBTAuthority(\\n            admin,\\n            name,\\n            symbol,\\n            baseTokenURI,\\n            address(0),\\n            paymentParams\\n        )\\n    {}\\n\\n    /* ========== RESTRICTED FUNCTIONS ====================================== */\\n\\n    /// @notice Sets the SoulName contract address linked to this identity\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _soulName Address of the SoulName contract\\n    function setSoulName(\\n        ISoulName _soulName\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (address(_soulName) == address(0)) revert ZeroAddress();\\n        if (soulName == _soulName) revert SameValue();\\n        soulName = _soulName;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ======================================== */\\n\\n    /// @notice Mints a new soulbound identity\\n    /// @dev The caller can only mint one identity per address\\n    /// @param to Address of the owner of the new identity\\n    /// @return The identity ID of the newly minted identity\\n    function mint(address to) external payable override returns (uint256) {\\n        return mint(address(0), to);\\n    }\\n\\n    /// @notice Mints a new soulbound identity\\n    /// @dev The caller can only mint one identity per address\\n    /// @param paymentMethod Address of the payment method to use\\n    /// @param to Address of the owner of the new identity\\n    /// @return The identity ID of the newly minted identity\\n    function mint(\\n        address paymentMethod,\\n        address to\\n    ) public payable override returns (uint256) {\\n        // Soulbound identity already created!\\n        if (balanceOf(to) > 0) revert IdentityAlreadyCreated(to);\\n\\n        return _mintWithCounter(paymentMethod, to);\\n    }\\n\\n    /// @notice Mints a new soulbound identity with a SoulName associated to it\\n    /// @dev The caller can only mint one identity per address, and the name must be unique\\n    /// @param to Address of the owner of the new identity\\n    /// @param name Name of the new identity\\n    /// @param yearsPeriod Years of validity of the name\\n    /// @param _tokenURI URI of the NFT\\n    function mintIdentityWithName(\\n        address to,\\n        string memory name,\\n        uint256 yearsPeriod,\\n        string memory _tokenURI\\n    ) external payable override soulNameAlreadySet returns (uint256) {\\n        return\\n            mintIdentityWithName(address(0), to, name, yearsPeriod, _tokenURI);\\n    }\\n\\n    /// @notice Mints a new soulbound identity with a SoulName associated to it\\n    /// @dev The caller can only mint one identity per address, and the name must be unique\\n    /// @param paymentMethod Address of the payment method to use\\n    /// @param to Address of the owner of the new identity\\n    /// @param name Name of the new identity\\n    /// @param yearsPeriod Years of validity of the name\\n    /// @param _tokenURI URI of the NFT\\n    function mintIdentityWithName(\\n        address paymentMethod,\\n        address to,\\n        string memory name,\\n        uint256 yearsPeriod,\\n        string memory _tokenURI\\n    )\\n        public\\n        payable\\n        override\\n        soulNameAlreadySet\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        uint256 identityId = mint(paymentMethod, to);\\n        soulName.mint(to, name, yearsPeriod, _tokenURI);\\n\\n        return identityId;\\n    }\\n\\n    /* ========== VIEWS ===================================================== */\\n\\n    /// @notice Returns the address of the SoulName contract linked to this identity\\n    /// @dev This function returns the address of the SoulName contract linked to this identity\\n    /// @return Address of the SoulName contract\\n    function getSoulName() external view override returns (ISoulName) {\\n        return soulName;\\n    }\\n\\n    /// @notice Returns the extension of the soul name\\n    /// @dev This function returns the extension of the soul name\\n    /// @return Extension of the soul name\\n    function getExtension() external view returns (string memory) {\\n        return soulName.getExtension();\\n    }\\n\\n    /// @notice Returns the owner address of an identity\\n    /// @dev This function returns the owner address of the identity specified by the tokenId\\n    /// @param tokenId TokenId of the identity\\n    /// @return Address of the owner of the identity\\n    function ownerOf(\\n        uint256 tokenId\\n    ) public view override(SBT, ISBT) returns (address) {\\n        return super.ownerOf(tokenId);\\n    }\\n\\n    /// @notice Returns the owner address of a soul name\\n    /// @dev This function returns the owner address of the soul name identity specified by the name\\n    /// @param name Name of the soul name\\n    /// @return Address of the owner of the identity\\n    function ownerOf(\\n        string memory name\\n    ) external view soulNameAlreadySet returns (address) {\\n        (, , uint256 identityId, , , ) = soulName.getTokenData(name);\\n        return super.ownerOf(identityId);\\n    }\\n\\n    /// @notice Returns the URI of a soul name\\n    /// @dev This function returns the token URI of the soul name identity specified by the name\\n    /// @param name Name of the soul name\\n    /// @return URI of the identity associated to a soul name\\n    function tokenURI(\\n        string memory name\\n    ) external view soulNameAlreadySet returns (string memory) {\\n        (, , uint256 identityId, , , ) = soulName.getTokenData(name);\\n        return super.tokenURI(identityId);\\n    }\\n\\n    /// @notice Returns the URI of the owner of an identity\\n    /// @dev This function returns the token URI of the identity owned by an account\\n    /// @param owner Address of the owner of the identity\\n    /// @return URI of the identity owned by the account\\n    function tokenURI(address owner) external view returns (string memory) {\\n        uint256 tokenId = tokenOfOwner(owner);\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /// @notice Returns the identity id of an account\\n    /// @dev This function returns the tokenId of the identity owned by an account\\n    /// @param owner Address of the owner of the identity\\n    /// @return TokenId of the identity owned by the account\\n    function tokenOfOwner(\\n        address owner\\n    ) public view override returns (uint256) {\\n        return super.tokenOfOwnerByIndex(owner, 0);\\n    }\\n\\n    /// @notice Checks if a soul name is available\\n    /// @dev This function queries if a soul name already exists and is in the available state\\n    /// @param name Name of the soul name\\n    /// @return available `true` if the soul name is available, `false` otherwise\\n    function isAvailable(\\n        string memory name\\n    ) external view soulNameAlreadySet returns (bool available) {\\n        return soulName.isAvailable(name);\\n    }\\n\\n    /// @notice Returns the information of a soul name\\n    /// @dev This function queries the information of a soul name\\n    /// @param name Name of the soul name\\n    /// @return sbtName Soul name, in upper/lower case and extension\\n    /// @return linked `true` if the soul name is linked, `false` otherwise\\n    /// @return identityId Identity id of the soul name\\n    /// @return tokenId SoulName id of the soul name\\n    /// @return expirationDate Expiration date of the soul name\\n    /// @return active `true` if the soul name is active, `false` otherwise\\n    function getTokenData(\\n        string memory name\\n    )\\n        external\\n        view\\n        soulNameAlreadySet\\n        returns (\\n            string memory sbtName,\\n            bool linked,\\n            uint256 identityId,\\n            uint256 tokenId,\\n            uint256 expirationDate,\\n            bool active\\n        )\\n    {\\n        return soulName.getTokenData(name);\\n    }\\n\\n    /// @notice Returns all the active soul names of an account\\n    /// @dev This function queries all the identity names of the specified account\\n    /// @param owner Address of the owner of the identities\\n    /// @return sbtNames Array of soul names associated to the account\\n    function getSoulNames(\\n        address owner\\n    ) external view soulNameAlreadySet returns (string[] memory sbtNames) {\\n        return soulName.getSoulNames(owner);\\n    }\\n\\n    // SoulName -> SoulboundIdentity.tokenId\\n    // SoulName -> account -> SoulboundIdentity.tokenId\\n\\n    /// @notice Returns all the active soul names of an account\\n    /// @dev This function queries all the identity names of the specified identity Id\\n    /// @param tokenId TokenId of the identity\\n    /// @return sbtNames Array of soul names associated to the identity Id\\n    function getSoulNames(\\n        uint256 tokenId\\n    ) external view soulNameAlreadySet returns (string[] memory sbtNames) {\\n        return soulName.getSoulNames(tokenId);\\n    }\\n\\n    /* ========== PRIVATE FUNCTIONS ========================================= */\\n\\n    /* ========== MODIFIERS ================================================= */\\n\\n    modifier soulNameAlreadySet() {\\n        if (address(soulName) == address(0)) revert SoulNameContractNotSet();\\n        _;\\n    }\\n\\n    /* ========== EVENTS ==================================================== */\\n}\\n\"\n    },\n    \"contracts/SoulLinker.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\nimport \\\"./libraries/Errors.sol\\\";\\nimport \\\"./dex/PaymentGateway.sol\\\";\\nimport \\\"./interfaces/ILinkableSBT.sol\\\";\\nimport \\\"./interfaces/ISoulboundIdentity.sol\\\";\\nimport \\\"./interfaces/ISoulName.sol\\\";\\n\\n/// @title Soul linker\\n/// @author Masa Finance\\n/// @notice Soul linker smart contract that let add links to a Soulbound token.\\ncontract SoulLinker is PaymentGateway, EIP712, Pausable, ReentrancyGuard {\\n    /* ========== STATE VARIABLES =========================================== */\\n\\n    ISoulboundIdentity public soulboundIdentity;\\n    ISoulName[] public soulNames;\\n    mapping(address => bool) public isSoulName;\\n\\n    // token => tokenId => readerIdentityId => signatureDate => LinkData\\n    mapping(address => mapping(uint256 => mapping(uint256 => mapping(uint256 => LinkData))))\\n        private _links;\\n    // token => tokenId => readerIdentityId\\n    mapping(address => mapping(uint256 => uint256[]))\\n        private _linkReaderIdentityIds;\\n    // token => tokenId => readerIdentityId => signatureDate\\n    mapping(address => mapping(uint256 => mapping(uint256 => uint256[])))\\n        private _linkSignatureDates;\\n    // readerIdentityId => ReaderLink\\n    mapping(uint256 => ReaderLink[]) private _readerLinks;\\n\\n    struct LinkData {\\n        bool exists;\\n        uint256 ownerIdentityId;\\n        uint256 expirationDate;\\n        bool isRevoked;\\n    }\\n\\n    struct ReaderLink {\\n        address token;\\n        uint256 tokenId;\\n        uint256 signatureDate;\\n    }\\n\\n    struct LinkKey {\\n        uint256 readerIdentityId;\\n        uint256 signatureDate;\\n    }\\n\\n    struct DefaultSoulName {\\n        bool exists;\\n        address token;\\n        uint256 tokenId;\\n    }\\n\\n    mapping(address => DefaultSoulName) public defaultSoulName; // stores the token id of the default soul name\\n\\n    /* ========== INITIALIZE ================================================ */\\n\\n    /// @notice Creates a new soul linker\\n    /// @param admin Administrator of the smart contract\\n    /// @param _soulboundIdentity Soulbound identity smart contract\\n    /// @param _soulNames Soul name smart contracts\\n    /// @param paymentParams Payment gateway params\\n    constructor(\\n        address admin,\\n        ISoulboundIdentity _soulboundIdentity,\\n        ISoulName[] memory _soulNames,\\n        PaymentParams memory paymentParams\\n    ) EIP712(\\\"SoulLinker\\\", \\\"1.0.0\\\") PaymentGateway(admin, paymentParams) {\\n        if (address(_soulboundIdentity) == address(0)) revert ZeroAddress();\\n\\n        soulboundIdentity = _soulboundIdentity;\\n        soulNames = _soulNames;\\n        for (uint256 i = 0; i < _soulNames.length; i++) {\\n            isSoulName[address(_soulNames[i])] = true;\\n        }\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ====================================== */\\n\\n    /// @notice Sets the SoulboundIdentity contract address linked to this soul store\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _soulboundIdentity Address of the SoulboundIdentity contract\\n    function setSoulboundIdentity(\\n        ISoulboundIdentity _soulboundIdentity\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (address(_soulboundIdentity) == address(0)) revert ZeroAddress();\\n        if (soulboundIdentity == _soulboundIdentity) revert SameValue();\\n        soulboundIdentity = _soulboundIdentity;\\n    }\\n\\n    /// @notice Add a SoulName contract address linked to this soul store\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param soulName Address of the SoulName contract\\n    function addSoulName(\\n        ISoulName soulName\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (address(soulName) == address(0)) revert ZeroAddress();\\n        for (uint256 i = 0; i < soulNames.length; i++) {\\n            if (soulNames[i] == soulName) revert SameValue();\\n        }\\n        soulNames.push(soulName);\\n        isSoulName[address(soulName)] = true;\\n    }\\n\\n    /// @notice Remove a SoulName contract address linked to this soul store\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param soulName Address of the SoulName contract\\n    function removeSoulName(\\n        ISoulName soulName\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (address(soulName) == address(0)) revert ZeroAddress();\\n        for (uint256 i = 0; i < soulNames.length; i++) {\\n            if (soulNames[i] == soulName) {\\n                soulNames[i] = soulNames[soulNames.length - 1];\\n                soulNames.pop();\\n                isSoulName[address(soulName)] = false;\\n                return;\\n            }\\n        }\\n        revert SoulNameNotExist();\\n    }\\n\\n    /// @notice Pauses the smart contract\\n    /// @dev The caller must have the admin role to call this function\\n    function pause() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _pause();\\n    }\\n\\n    /// @notice Unpauses the smart contract\\n    /// @dev The caller must have the admin role to call this function\\n    function unpause() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _unpause();\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ======================================== */\\n\\n    /// @notice Stores the link, validating the signature of the given read link request\\n    /// @dev The token must be linked to this soul linker\\n    /// @param readerIdentityId Id of the identity of the reader\\n    /// @param ownerIdentityId Id of the identity of the owner of the SBT\\n    /// @param token Address of the SBT contract\\n    /// @param tokenId Id of the token\\n    /// @param signatureDate Signature date of the signature\\n    /// @param expirationDate Expiration date of the signature\\n    /// @param signature Signature of the read link request made by the owner\\n    function addLink(\\n        address paymentMethod,\\n        uint256 readerIdentityId,\\n        uint256 ownerIdentityId,\\n        address token,\\n        uint256 tokenId,\\n        uint256 signatureDate,\\n        uint256 expirationDate,\\n        bytes calldata signature\\n    ) external payable whenNotPaused nonReentrant {\\n        address ownerAddress = soulboundIdentity.ownerOf(ownerIdentityId);\\n        address readerAddress = soulboundIdentity.ownerOf(readerIdentityId);\\n        address tokenOwner = IERC721Enumerable(token).ownerOf(tokenId);\\n\\n        if (ownerAddress != tokenOwner)\\n            revert IdentityOwnerNotTokenOwner(tokenId, ownerIdentityId);\\n        if (readerAddress != _msgSender()) revert CallerNotReader(_msgSender());\\n        if (ownerIdentityId == readerIdentityId)\\n            revert IdentityOwnerIsReader(readerIdentityId);\\n        if (signatureDate == 0) revert InvalidSignatureDate(signatureDate);\\n        if (expirationDate < block.timestamp)\\n            revert ValidPeriodExpired(expirationDate);\\n        if (_links[token][tokenId][readerIdentityId][signatureDate].exists)\\n            revert LinkAlreadyExists(\\n                token,\\n                tokenId,\\n                readerIdentityId,\\n                signatureDate\\n            );\\n        if (\\n            !_verify(\\n                _hash(\\n                    readerIdentityId,\\n                    ownerIdentityId,\\n                    token,\\n                    tokenId,\\n                    signatureDate,\\n                    expirationDate\\n                ),\\n                signature,\\n                ownerAddress\\n            )\\n        ) revert InvalidSignature();\\n\\n        (\\n            uint256 price,\\n            uint256 protocolFee\\n        ) = getPriceForAddLinkWithProtocolFee(paymentMethod, token);\\n        _pay(paymentMethod, price, protocolFee);\\n\\n        // token => tokenId => readerIdentityId => signatureDate => LinkData\\n        _links[token][tokenId][readerIdentityId][signatureDate] = LinkData(\\n            true,\\n            ownerIdentityId,\\n            expirationDate,\\n            false\\n        );\\n        if (_linkSignatureDates[token][tokenId][readerIdentityId].length == 0) {\\n            _linkReaderIdentityIds[token][tokenId].push(readerIdentityId);\\n        }\\n        _linkSignatureDates[token][tokenId][readerIdentityId].push(\\n            signatureDate\\n        );\\n        _readerLinks[readerIdentityId].push(\\n            ReaderLink(token, tokenId, signatureDate)\\n        );\\n\\n        emit LinkAdded(\\n            readerIdentityId,\\n            ownerIdentityId,\\n            token,\\n            tokenId,\\n            signatureDate,\\n            expirationDate\\n        );\\n    }\\n\\n    /// @notice Revokes the link\\n    /// @dev The links can be revoked, wether the token is linked or not.\\n    /// The caller must be the owner of the token.\\n    /// The owner of the token can revoke a link even if the reader has not added it yet.\\n    /// @param readerIdentityId Id of the identity of the reader\\n    /// @param ownerIdentityId Id of the identity of the owner of the SBT\\n    /// @param token Address of the SBT contract\\n    /// @param tokenId Id of the token\\n    /// @param signatureDate Signature date of the signature\\n    function revokeLink(\\n        uint256 readerIdentityId,\\n        uint256 ownerIdentityId,\\n        address token,\\n        uint256 tokenId,\\n        uint256 signatureDate\\n    ) external whenNotPaused {\\n        address ownerAddress = soulboundIdentity.ownerOf(ownerIdentityId);\\n        address tokenOwner = IERC721Enumerable(token).ownerOf(tokenId);\\n\\n        if (ownerAddress != tokenOwner)\\n            revert IdentityOwnerNotTokenOwner(tokenId, ownerIdentityId);\\n        if (ownerAddress != _msgSender()) revert CallerNotOwner(_msgSender());\\n        if (ownerIdentityId == readerIdentityId)\\n            revert IdentityOwnerIsReader(readerIdentityId);\\n        if (_links[token][tokenId][readerIdentityId][signatureDate].isRevoked)\\n            revert LinkAlreadyRevoked();\\n\\n        if (_links[token][tokenId][readerIdentityId][signatureDate].exists) {\\n            // token => tokenId => readerIdentityId => signatureDate => LinkData\\n            _links[token][tokenId][readerIdentityId][signatureDate]\\n                .isRevoked = true;\\n        } else {\\n            // if the link doesn't exist, store it\\n            // token => tokenId => readerIdentityId => signatureDate => LinkData\\n            _links[token][tokenId][readerIdentityId][signatureDate] = LinkData(\\n                true,\\n                ownerIdentityId,\\n                0,\\n                true\\n            );\\n            if (\\n                _linkSignatureDates[token][tokenId][readerIdentityId].length ==\\n                0\\n            ) {\\n                _linkReaderIdentityIds[token][tokenId].push(readerIdentityId);\\n            }\\n            _linkSignatureDates[token][tokenId][readerIdentityId].push(\\n                signatureDate\\n            );\\n            _readerLinks[readerIdentityId].push(\\n                ReaderLink(token, tokenId, signatureDate)\\n            );\\n        }\\n\\n        emit LinkRevoked(\\n            readerIdentityId,\\n            ownerIdentityId,\\n            token,\\n            tokenId,\\n            signatureDate\\n        );\\n    }\\n\\n    /// @notice Sets the default soul name for the owner\\n    /// @dev The caller must be the owner of the soul name.\\n    /// @param token Address of the SoulName contract\\n    /// @param tokenId TokenId of the soul name\\n    function setDefaultSoulName(address token, uint256 tokenId) external {\\n        if (isSoulName[token] == false) revert SoulNameNotRegistered(token);\\n        address soulNameOwner = IERC721Enumerable(token).ownerOf(tokenId);\\n        if (_msgSender() != soulNameOwner) revert CallerNotOwner(_msgSender());\\n\\n        defaultSoulName[_msgSender()].token = token;\\n        defaultSoulName[_msgSender()].tokenId = tokenId;\\n        defaultSoulName[_msgSender()].exists = true;\\n    }\\n\\n    /* ========== VIEWS ===================================================== */\\n\\n    /// @notice Returns the identityId owned by the given token\\n    /// @dev The token must be linked to this soul linker\\n    /// @param token Address of the SBT contract\\n    /// @param tokenId Id of the token\\n    /// @return Id of the identity\\n    function getIdentityId(\\n        address token,\\n        uint256 tokenId\\n    ) external view returns (uint256) {\\n        address owner = IERC721Enumerable(token).ownerOf(tokenId);\\n        return soulboundIdentity.tokenOfOwner(owner);\\n    }\\n\\n    /// @notice Returns the list of connected SBTs by a given SBT token\\n    /// @param identityId Id of the identity\\n    /// @param token Address of the SBT contract\\n    /// @return List of connected SBTs\\n    function getSBTConnections(\\n        uint256 identityId,\\n        address token\\n    ) external view returns (uint256[] memory) {\\n        address owner = soulboundIdentity.ownerOf(identityId);\\n\\n        return getSBTConnections(owner, token);\\n    }\\n\\n    /// @notice Returns the list of connected SBTs by a given SBT token\\n    /// @param owner Address of the owner of the identity\\n    /// @param token Address of the SBT contract\\n    /// @return List of connectec SBTs\\n    function getSBTConnections(\\n        address owner,\\n        address token\\n    ) public view returns (uint256[] memory) {\\n        uint256 connections = IERC721Enumerable(token).balanceOf(owner);\\n        uint256[] memory sbtConnections = new uint256[](connections);\\n        for (uint256 i = 0; i < connections; i++) {\\n            sbtConnections[i] = IERC721Enumerable(token).tokenOfOwnerByIndex(\\n                owner,\\n                i\\n            );\\n        }\\n\\n        return sbtConnections;\\n    }\\n\\n    /// @notice Returns the list of link signature dates for a given SBT token and reader\\n    /// @param token Address of the SBT contract\\n    /// @param tokenId Id of the token\\n    /// @return List of linked SBTs\\n    function getLinks(\\n        address token,\\n        uint256 tokenId\\n    ) external view returns (LinkKey[] memory) {\\n        uint256 nLinkKeys = 0;\\n        for (\\n            uint256 i = 0;\\n            i < _linkReaderIdentityIds[token][tokenId].length;\\n            i++\\n        ) {\\n            uint256 readerIdentityId = _linkReaderIdentityIds[token][tokenId][\\n                i\\n            ];\\n            for (\\n                uint256 j = 0;\\n                j <\\n                _linkSignatureDates[token][tokenId][readerIdentityId].length;\\n                j++\\n            ) {\\n                nLinkKeys++;\\n            }\\n        }\\n\\n        LinkKey[] memory linkKeys = new LinkKey[](nLinkKeys);\\n        uint256 n = 0;\\n        for (\\n            uint256 i = 0;\\n            i < _linkReaderIdentityIds[token][tokenId].length;\\n            i++\\n        ) {\\n            uint256 readerIdentityId = _linkReaderIdentityIds[token][tokenId][\\n                i\\n            ];\\n            for (\\n                uint256 j = 0;\\n                j <\\n                _linkSignatureDates[token][tokenId][readerIdentityId].length;\\n                j++\\n            ) {\\n                uint256 signatureDate = _linkSignatureDates[token][tokenId][\\n                    readerIdentityId\\n                ][j];\\n                linkKeys[n].readerIdentityId = readerIdentityId;\\n                linkKeys[n].signatureDate = signatureDate;\\n                n++;\\n            }\\n        }\\n        return linkKeys;\\n    }\\n\\n    /// @notice Returns the list of link signature dates for a given SBT token and reader\\n    /// @param token Address of the SBT contract\\n    /// @param tokenId Id of the token\\n    /// @param readerIdentityId Id of the identity of the reader of the SBT\\n    /// @return List of linked SBTs\\n    function getLinkSignatureDates(\\n        address token,\\n        uint256 tokenId,\\n        uint256 readerIdentityId\\n    ) external view returns (uint256[] memory) {\\n        return _linkSignatureDates[token][tokenId][readerIdentityId];\\n    }\\n\\n    /// @notice Returns the information of link dates for a given SBT token and reader\\n    /// @param token Address of the SBT contract\\n    /// @param tokenId Id of the token\\n    /// @param readerIdentityId Id of the identity of the reader of the SBT\\n    /// @param signatureDate Signature date of the signature\\n    /// @return linkData List of linked SBTs\\n    function getLinkInfo(\\n        address token,\\n        uint256 tokenId,\\n        uint256 readerIdentityId,\\n        uint256 signatureDate\\n    ) external view returns (LinkData memory) {\\n        return _links[token][tokenId][readerIdentityId][signatureDate];\\n    }\\n\\n    /// @notice Returns the list of links for a given reader identity id\\n    /// @param readerIdentityId Id of the identity of the reader of the SBT\\n    /// @return List of links for the reader\\n    function getReaderLinks(\\n        uint256 readerIdentityId\\n    ) external view returns (ReaderLink[] memory) {\\n        return _readerLinks[readerIdentityId];\\n    }\\n\\n    /// @notice Validates the link of the given read link request and returns the\\n    /// data that reader can read if the link is valid\\n    /// @dev The token must be linked to this soul linker\\n    /// @param readerIdentityId Id of the identity of the reader\\n    /// @param ownerIdentityId Id of the identity of the owner of the SBT\\n    /// @param token Address of the SBT contract\\n    /// @param tokenId Id of the token\\n    /// @param signatureDate Signature date of the signature\\n    /// @return True if the link is valid\\n    function validateLink(\\n        uint256 readerIdentityId,\\n        uint256 ownerIdentityId,\\n        address token,\\n        uint256 tokenId,\\n        uint256 signatureDate\\n    ) external view returns (bool) {\\n        address ownerAddress = soulboundIdentity.ownerOf(ownerIdentityId);\\n        address tokenOwner = IERC721Enumerable(token).ownerOf(tokenId);\\n\\n        LinkData memory link = _links[token][tokenId][readerIdentityId][\\n            signatureDate\\n        ];\\n\\n        if (ownerAddress != tokenOwner)\\n            revert IdentityOwnerNotTokenOwner(tokenId, ownerIdentityId);\\n        if (!link.exists) revert LinkDoesNotExist();\\n        if (link.expirationDate < block.timestamp)\\n            revert ValidPeriodExpired(link.expirationDate);\\n        if (link.isRevoked) revert LinkAlreadyRevoked();\\n\\n        return true;\\n    }\\n\\n    /// @notice Returns the price for storing a link\\n    /// @dev Returns the current pricing for storing a link\\n    /// @param paymentMethod Address of token that user want to pay\\n    /// @param token Token that user want to store link\\n    /// @return price Current price for storing a link\\n    function getPriceForAddLink(\\n        address paymentMethod,\\n        address token\\n    ) public view returns (uint256 price) {\\n        uint256 addLinkPrice = ILinkableSBT(token).addLinkPrice();\\n        uint256 addLinkPriceMASA = ILinkableSBT(token).addLinkPriceMASA();\\n        if (addLinkPrice == 0 && addLinkPriceMASA == 0) {\\n            price = 0;\\n        } else if (\\n            paymentMethod == masaToken &&\\n            enabledPaymentMethod[paymentMethod] &&\\n            addLinkPriceMASA > 0\\n        ) {\\n            // price in MASA without conversion rate\\n            price = addLinkPriceMASA;\\n        } else if (\\n            paymentMethod == stableCoin && enabledPaymentMethod[paymentMethod]\\n        ) {\\n            // stable coin\\n            price = addLinkPrice;\\n        } else if (enabledPaymentMethod[paymentMethod]) {\\n            // ETH and ERC 20 token\\n            price = _convertFromStableCoin(paymentMethod, addLinkPrice);\\n        } else {\\n            revert InvalidPaymentMethod(paymentMethod);\\n        }\\n        return price;\\n    }\\n\\n    /// @notice Returns the price for storing a link with protocol fee\\n    /// @dev Returns the current pricing for storing a link with protocol fee\\n    /// @param paymentMethod Address of token that user want to pay\\n    /// @param token Token that user want to store link\\n    /// @return price Current price for storing a link\\n    /// @return protocolFee Current protocol fee for storing a link\\n    function getPriceForAddLinkWithProtocolFee(\\n        address paymentMethod,\\n        address token\\n    ) public view returns (uint256 price, uint256 protocolFee) {\\n        price = getPriceForAddLink(paymentMethod, token);\\n        return (price, _getProtocolFee(paymentMethod, price));\\n    }\\n\\n    /// @notice Returns all the active soul names of an account\\n    /// @dev This function queries all the identity names of the specified account\\n    /// @param owner Address of the owner of the identities\\n    /// @return defaultName Default soul name of the account\\n    /// @return names Array of soul names associated to the account\\n    function getSoulNames(\\n        address owner\\n    ) public view returns (string memory defaultName, string[] memory names) {\\n        uint256 nameCount = 0;\\n        for (uint256 i = 0; i < soulNames.length; i++) {\\n            string[] memory _soulNamesFromIdentity = soulNames[i].getSoulNames(\\n                owner\\n            );\\n            for (uint256 j = 0; j < _soulNamesFromIdentity.length; j++) {\\n                nameCount++;\\n            }\\n        }\\n\\n        string[] memory _soulNames = new string[](nameCount);\\n        uint256 n = 0;\\n        for (uint256 i = 0; i < soulNames.length; i++) {\\n            string[] memory _soulNamesFromIdentity = soulNames[i].getSoulNames(\\n                owner\\n            );\\n            for (uint256 j = 0; j < _soulNamesFromIdentity.length; j++) {\\n                _soulNames[n] = _soulNamesFromIdentity[j];\\n                n++;\\n            }\\n        }\\n\\n        return (getDefaultSoulName(owner), _soulNames);\\n    }\\n\\n    /// @notice Returns all the active soul names of an account\\n    /// @dev This function queries all the identity names of the specified identity Id\\n    /// @param tokenId TokenId of the identity\\n    /// @return defaultName Default soul name of the account\\n    /// @return names Array of soul names associated to the account\\n    function getSoulNames(\\n        uint256 tokenId\\n    ) external view returns (string memory defaultName, string[] memory names) {\\n        address owner = soulboundIdentity.ownerOf(tokenId);\\n        return getSoulNames(owner);\\n    }\\n\\n    /// @notice Returns the default soul name of an account\\n    /// @dev This function queries the default soul name of the specified account\\n    /// @param owner Address of the owner of the identities\\n    /// @return Default soul name associated to the account\\n    function getDefaultSoulName(\\n        address owner\\n    ) public view returns (string memory) {\\n        // we have set a default soul name\\n        if (defaultSoulName[owner].exists) {\\n            address token = defaultSoulName[owner].token;\\n            uint256 tokenId = defaultSoulName[owner].tokenId;\\n            address soulNameOwner = IERC721Enumerable(token).ownerOf(tokenId);\\n            // the soul name has not changed owner\\n            if (soulNameOwner == owner) {\\n                // the soul name is not expired\\n                (string memory name, uint256 expirationDate) = ISoulName(token)\\n                    .tokenData(tokenId);\\n                if (expirationDate >= block.timestamp) {\\n                    return name;\\n                }\\n            }\\n        }\\n        return \\\"\\\";\\n    }\\n\\n    /* ========== PRIVATE FUNCTIONS ========================================= */\\n\\n    function _hash(\\n        uint256 readerIdentityId,\\n        uint256 ownerIdentityId,\\n        address token,\\n        uint256 tokenId,\\n        uint256 signatureDate,\\n        uint256 expirationDate\\n    ) internal view returns (bytes32) {\\n        return\\n            _hashTypedDataV4(\\n                keccak256(\\n                    abi.encode(\\n                        keccak256(\\n                            \\\"Link(uint256 readerIdentityId,uint256 ownerIdentityId,address token,uint256 tokenId,uint256 signatureDate,uint256 expirationDate)\\\"\\n                        ),\\n                        readerIdentityId,\\n                        ownerIdentityId,\\n                        token,\\n                        tokenId,\\n                        signatureDate,\\n                        expirationDate\\n                    )\\n                )\\n            );\\n    }\\n\\n    function _verify(\\n        bytes32 digest,\\n        bytes memory signature,\\n        address owner\\n    ) internal pure returns (bool) {\\n        return ECDSA.recover(digest, signature) == owner;\\n    }\\n\\n    /* ========== MODIFIERS ================================================= */\\n\\n    /* ========== EVENTS ==================================================== */\\n\\n    event LinkAdded(\\n        uint256 readerIdentityId,\\n        uint256 ownerIdentityId,\\n        address token,\\n        uint256 tokenId,\\n        uint256 signatureDate,\\n        uint256 expirationDate\\n    );\\n\\n    event LinkRevoked(\\n        uint256 readerIdentityId,\\n        uint256 ownerIdentityId,\\n        address token,\\n        uint256 tokenId,\\n        uint256 signatureDate\\n    );\\n}\\n\"\n    },\n    \"contracts/SoulName.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"./libraries/Errors.sol\\\";\\nimport \\\"./libraries/Utils.sol\\\";\\nimport \\\"./interfaces/ISoulboundIdentity.sol\\\";\\nimport \\\"./interfaces/ISoulName.sol\\\";\\nimport \\\"./tokens/MasaNFT.sol\\\";\\n\\n/// @title SoulName NFT\\n/// @author Masa Finance\\n/// @notice SoulName NFT that points to a Soulbound identity token\\n/// @dev SoulName NFT, that inherits from the NFT contract, and points to a Soulbound identity token.\\n/// It has an extension, and stores all the information about the identity names.\\ncontract SoulName is MasaNFT, ISoulName, ReentrancyGuard {\\n    /* ========== STATE VARIABLES ========== */\\n    using SafeMath for uint256;\\n\\n    uint256 constant YEAR = 31536000; // 60 seconds * 60 minutes * 24 hours * 365 days\\n\\n    ISoulboundIdentity public soulboundIdentity;\\n    string public extension; // suffix of the names (.sol?)\\n\\n    // contractURI() points to the smart contract metadata\\n    // see https://docs.opensea.io/docs/contract-level-metadata\\n    string public contractURI;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n    mapping(string => bool) private _URIs; // used to check if a uri is already used\\n\\n    mapping(uint256 => TokenData) public override tokenData; // used to store the data of the token id\\n    mapping(string => NameData) public nameData; // stores the token id of the current active soul name\\n\\n    struct TokenData {\\n        string name; // Name with lowercase and uppercase\\n        uint256 expirationDate;\\n    }\\n\\n    struct NameData {\\n        bool exists;\\n        uint256 tokenId;\\n    }\\n\\n    /* ========== INITIALIZE ========== */\\n\\n    /// @notice Creates a new SoulName NFT\\n    /// @dev Creates a new SoulName NFT, that points to a Soulbound identity, inheriting from the NFT contract.\\n    /// @param admin Administrator of the smart contract\\n    /// @param name Name of the token\\n    /// @param symbol Symbol of the token\\n    /// @param _soulboundIdentity Address of the Soulbound identity contract\\n    /// @param _extension Extension of the soul name\\n    /// @param _contractURI URI of the smart contract metadata\\n    constructor(\\n        address admin,\\n        string memory name,\\n        string memory symbol,\\n        ISoulboundIdentity _soulboundIdentity,\\n        string memory _extension,\\n        string memory _contractURI\\n    ) MasaNFT(admin, name, symbol, \\\"\\\") {\\n        if (address(_soulboundIdentity) == address(0)) revert ZeroAddress();\\n\\n        soulboundIdentity = _soulboundIdentity;\\n        extension = _extension;\\n        contractURI = _contractURI;\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ====================================== */\\n\\n    /// @notice Sets the SoulboundIdentity contract address linked to this soul name\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _soulboundIdentity Address of the SoulboundIdentity contract\\n    function setSoulboundIdentity(\\n        ISoulboundIdentity _soulboundIdentity\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (address(_soulboundIdentity) == address(0)) revert ZeroAddress();\\n        if (soulboundIdentity == _soulboundIdentity) revert SameValue();\\n        soulboundIdentity = _soulboundIdentity;\\n    }\\n\\n    /// @notice Sets the extension of the soul name\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _extension Extension of the soul name\\n    function setExtension(\\n        string memory _extension\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (\\n            keccak256(abi.encodePacked((extension))) ==\\n            keccak256(abi.encodePacked((_extension)))\\n        ) revert SameValue();\\n        extension = _extension;\\n    }\\n\\n    /// @notice Sets the URI of the smart contract metadata\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _contractURI URI of the smart contract metadata\\n    function setContractURI(\\n        string memory _contractURI\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (\\n            keccak256(abi.encodePacked((contractURI))) ==\\n            keccak256(abi.encodePacked((_contractURI)))\\n        ) revert SameValue();\\n        contractURI = _contractURI;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /// @notice Mints a new soul name\\n    /// @dev The caller can mint more than one name. The soul name must be unique.\\n    /// @param to Address of the owner of the new soul name\\n    /// @param name Name of the new soul name\\n    /// @param yearsPeriod Years of validity of the name\\n    /// @param _tokenURI URI of the NFT\\n    function mint(\\n        address to,\\n        string memory name,\\n        uint256 yearsPeriod,\\n        string memory _tokenURI\\n    ) external override nonReentrant returns (uint256) {\\n        if (!isAvailable(name)) revert NameAlreadyExists(name);\\n        if (bytes(name).length == 0) revert ZeroLengthName(name);\\n        if (yearsPeriod == 0) revert ZeroYearsPeriod(yearsPeriod);\\n        if (soulboundIdentity.balanceOf(to) == 0)\\n            revert AddressDoesNotHaveIdentity(to);\\n        if (\\n            !Utils.startsWith(_tokenURI, \\\"ar://\\\") &&\\n            !Utils.startsWith(_tokenURI, \\\"https://arweave.net/\\\") &&\\n            !Utils.startsWith(_tokenURI, \\\"ipfs://\\\")\\n        ) revert InvalidTokenURI(_tokenURI);\\n\\n        uint256 tokenId = _mintWithCounter(to);\\n        _setTokenURI(tokenId, _tokenURI);\\n\\n        tokenData[tokenId].name = name;\\n        tokenData[tokenId].expirationDate = block.timestamp.add(\\n            YEAR.mul(yearsPeriod)\\n        );\\n\\n        string memory lowercaseName = Utils.toLowerCase(name);\\n        nameData[lowercaseName].tokenId = tokenId;\\n        nameData[lowercaseName].exists = true;\\n\\n        return tokenId;\\n    }\\n\\n    /// @notice Update the expiration date of a soul name\\n    /// @dev The caller must be the owner or an approved address of the soul name.\\n    /// @param tokenId TokenId of the soul name\\n    /// @param yearsPeriod Years of validity of the name\\n    function renewYearsPeriod(uint256 tokenId, uint256 yearsPeriod) external {\\n        // ERC721: caller is not token owner nor approved\\n        if (!_isApprovedOrOwner(_msgSender(), tokenId))\\n            revert CallerNotOwner(_msgSender());\\n        if (yearsPeriod == 0) revert ZeroYearsPeriod(yearsPeriod);\\n\\n        // check that the last registered tokenId for that name is the current token\\n        string memory lowercaseName = Utils.toLowerCase(\\n            tokenData[tokenId].name\\n        );\\n        if (nameData[lowercaseName].tokenId != tokenId)\\n            revert NameRegisteredByOtherAccount(lowercaseName, tokenId);\\n\\n        // check if the name is expired\\n        if (tokenData[tokenId].expirationDate < block.timestamp) {\\n            tokenData[tokenId].expirationDate = block.timestamp.add(\\n                YEAR.mul(yearsPeriod)\\n            );\\n        } else {\\n            tokenData[tokenId].expirationDate = tokenData[tokenId]\\n                .expirationDate\\n                .add(YEAR.mul(yearsPeriod));\\n        }\\n\\n        emit YearsPeriodRenewed(\\n            tokenId,\\n            yearsPeriod,\\n            tokenData[tokenId].expirationDate\\n        );\\n    }\\n\\n    /// @notice Burn a soul name\\n    /// @dev The caller must be the owner or an approved address of the soul name.\\n    /// @param tokenId TokenId of the soul name to burn\\n    function burn(uint256 tokenId) public override {\\n        if (!_exists(tokenId)) revert TokenNotFound(tokenId);\\n\\n        string memory lowercaseName = Utils.toLowerCase(\\n            tokenData[tokenId].name\\n        );\\n\\n        // remove info from tokenIdName and tokenData\\n        delete tokenData[tokenId];\\n\\n        // if the last owner of the name is burning it, remove the name from nameData\\n        if (nameData[lowercaseName].tokenId == tokenId) {\\n            delete nameData[lowercaseName];\\n        }\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            _URIs[_tokenURIs[tokenId]] = false;\\n            delete _tokenURIs[tokenId];\\n        }\\n\\n        super.burn(tokenId);\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    /// @notice Returns the extension of the soul name\\n    /// @dev This function is used to get the extension of the soul name\\n    /// @return Extension of the soul name\\n    function getExtension() external view override returns (string memory) {\\n        return extension;\\n    }\\n\\n    /// @notice Checks if a soul name is available\\n    /// @dev This function queries if a soul name already exists and is in the available state\\n    /// @param name Name of the soul name\\n    /// @return available `true` if the soul name is available, `false` otherwise\\n    function isAvailable(\\n        string memory name\\n    ) public view override returns (bool available) {\\n        string memory lowercaseName = Utils.toLowerCase(name);\\n        if (nameData[lowercaseName].exists) {\\n            uint256 tokenId = nameData[lowercaseName].tokenId;\\n            return tokenData[tokenId].expirationDate < block.timestamp;\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /// @notice Returns the information of a soul name\\n    /// @dev This function queries the information of a soul name\\n    /// @param name Name of the soul name\\n    /// @return sbtName Soul name, in upper/lower case and extension\\n    /// @return linked `true` if the soul name is linked, `false` otherwise\\n    /// @return identityId Identity id of the soul name\\n    /// @return tokenId SoulName id of the soul name\\n    /// @return expirationDate Expiration date of the soul name\\n    /// @return active `true` if the soul name is active, `false` otherwise\\n    function getTokenData(\\n        string memory name\\n    )\\n        external\\n        view\\n        override\\n        returns (\\n            string memory sbtName,\\n            bool linked,\\n            uint256 identityId,\\n            uint256 tokenId,\\n            uint256 expirationDate,\\n            bool active\\n        )\\n    {\\n        tokenId = _getTokenId(name);\\n        address _owner = ownerOf(tokenId);\\n        bool _linked = soulboundIdentity.balanceOf(_owner) > 0;\\n        uint256 _identityId = 0;\\n        if (_linked) {\\n            _identityId = soulboundIdentity.tokenOfOwner(_owner);\\n        }\\n\\n        TokenData memory _tokenData = tokenData[tokenId];\\n\\n        return (\\n            _getName(_tokenData.name),\\n            _linked,\\n            _identityId,\\n            tokenId,\\n            _tokenData.expirationDate,\\n            _tokenData.expirationDate >= block.timestamp\\n        );\\n    }\\n\\n    /// @notice Returns the token id of a soul name\\n    /// @dev This function queries the token id of a soul name\\n    /// @param name Name of the soul name\\n    /// @return SoulName id of the soul name\\n    function getTokenId(\\n        string memory name\\n    ) external view override returns (uint256) {\\n        return _getTokenId(name);\\n    }\\n\\n    /// @notice Returns all the active soul names of an account\\n    /// @dev This function queries all the identity names of the specified identity Id\\n    /// @param identityId TokenId of the identity\\n    /// @return sbtNames Array of soul names associated to the identity Id\\n    function getSoulNames(\\n        uint256 identityId\\n    ) external view override returns (string[] memory sbtNames) {\\n        // return owner if exists\\n        address _owner = soulboundIdentity.ownerOf(identityId);\\n\\n        return getSoulNames(_owner);\\n    }\\n\\n    /// @notice Returns all the active soul names of an account\\n    /// @dev This function queries all the identity names of the specified account\\n    /// @param owner Address of the owner of the identities\\n    /// @return sbtNames Array of soul names associated to the account\\n    function getSoulNames(\\n        address owner\\n    ) public view override returns (string[] memory sbtNames) {\\n        uint256 results = 0;\\n        uint256 balance = balanceOf(owner);\\n\\n        for (uint256 i = 0; i < balance; i++) {\\n            uint256 tokenId = tokenOfOwnerByIndex(owner, i);\\n            if (tokenData[tokenId].expirationDate >= block.timestamp) {\\n                results = results.add(1);\\n            }\\n        }\\n\\n        string[] memory _sbtNames = new string[](results);\\n        uint256 index = 0;\\n\\n        for (uint256 i = 0; i < balance; i++) {\\n            uint256 tokenId = tokenOfOwnerByIndex(owner, i);\\n            if (tokenData[tokenId].expirationDate >= block.timestamp) {\\n                _sbtNames[index] = Utils.toLowerCase(tokenData[tokenId].name);\\n                index = index.add(1);\\n            }\\n        }\\n\\n        // return identity names if exists and are active\\n        return _sbtNames;\\n    }\\n\\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n    /// @dev This function returns the token URI of the soul name specified by the name\\n    /// @param name Name of the soul name\\n    /// @return URI of the soulname associated to a name\\n    function tokenURI(\\n        string memory name\\n    ) external view virtual returns (string memory) {\\n        uint256 tokenId = _getTokenId(name);\\n        return tokenURI(tokenId);\\n    }\\n\\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n    /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\\n    ///  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\n    ///  Metadata JSON Schema\\\".\\n    /// @param tokenId NFT to get the URI of\\n    /// @return URI of the NFT\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /* ========== PRIVATE FUNCTIONS ========== */\\n\\n    function _getName(string memory name) private view returns (string memory) {\\n        return string(bytes.concat(bytes(name), bytes(extension)));\\n    }\\n\\n    function _getTokenId(string memory name) private view returns (uint256) {\\n        string memory lowercaseName = Utils.toLowerCase(name);\\n        if (!nameData[lowercaseName].exists) revert NameNotFound(name);\\n\\n        return nameData[lowercaseName].tokenId;\\n    }\\n\\n    function _setTokenURI(\\n        uint256 tokenId,\\n        string memory _tokenURI\\n    ) internal virtual {\\n        if (!_exists(tokenId)) revert TokenNotFound(tokenId);\\n        if (_URIs[_tokenURI]) revert URIAlreadyExists(_tokenURI);\\n\\n        _tokenURIs[tokenId] = _tokenURI;\\n        _URIs[_tokenURI] = true;\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    /* ========== EVENTS ========== */\\n\\n    event YearsPeriodRenewed(\\n        uint256 tokenId,\\n        uint256 yearsPeriod,\\n        uint256 newExpirationDate\\n    );\\n}\\n\"\n    },\n    \"contracts/SoulStore.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\nimport \\\"./libraries/Errors.sol\\\";\\nimport \\\"./dex/PaymentGateway.sol\\\";\\nimport \\\"./interfaces/ISoulboundIdentity.sol\\\";\\nimport \\\"./interfaces/ISoulName.sol\\\";\\n\\n/// @title Soul Store\\n/// @author Masa Finance\\n/// @notice Soul Store, that can mint new Soulbound Identities and Soul Name NFTs, paying a fee\\n/// @dev From this smart contract we can mint new Soulbound Identities and Soul Name NFTs.\\n/// This minting can be done paying a fee in ETH, USDC or MASA\\ncontract SoulStore is PaymentGateway, Pausable, ReentrancyGuard, EIP712 {\\n    using SafeMath for uint256;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    ISoulboundIdentity public soulboundIdentity;\\n    ISoulName public soulName;\\n\\n    mapping(uint256 => uint256) public nameRegistrationPricePerYear; // (length --> price in stable coin per year)\\n\\n    mapping(address => bool) public authorities;\\n\\n    /* ========== INITIALIZE ========== */\\n\\n    /// @notice Creates a new Soul Store\\n    /// @dev Creates a new Soul Store, that has the role to minting new Soulbound Identities\\n    /// and Soul Name NFTs, paying a fee\\n    /// @param admin Administrator of the smart contract\\n    /// @param _soulBoundIdentity Address of the Soulbound identity contract\\n    /// @param _soulName Address of the SoulName contract\\n    /// @param _nameRegistrationPricePerYear Price of the default name registering in stable coin per year\\n    /// @param paymentParams Payment gateway params\\n    constructor(\\n        address admin,\\n        ISoulboundIdentity _soulBoundIdentity,\\n        ISoulName _soulName,\\n        uint256 _nameRegistrationPricePerYear,\\n        PaymentParams memory paymentParams\\n    ) PaymentGateway(admin, paymentParams) EIP712(\\\"SoulStore\\\", \\\"1.0.0\\\") {\\n        if (address(_soulBoundIdentity) == address(0)) revert ZeroAddress();\\n        if (address(_soulName) == address(0)) revert ZeroAddress();\\n\\n        soulboundIdentity = _soulBoundIdentity;\\n        soulName = _soulName;\\n\\n        nameRegistrationPricePerYear[0] = _nameRegistrationPricePerYear; // name price for default length per year\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    /// @notice Sets the SoulboundIdentity contract address linked to this store\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _soulboundIdentity New SoulboundIdentity contract address\\n    function setSoulboundIdentity(\\n        ISoulboundIdentity _soulboundIdentity\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (address(_soulboundIdentity) == address(0)) revert ZeroAddress();\\n        if (soulboundIdentity == _soulboundIdentity) revert SameValue();\\n        soulboundIdentity = _soulboundIdentity;\\n    }\\n\\n    /// @notice Sets the SoulName contract address linked to this store\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _soulName New SoulName contract address\\n    function setSoulName(\\n        ISoulName _soulName\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (address(_soulName) == address(0)) revert ZeroAddress();\\n        if (soulName == _soulName) revert SameValue();\\n        soulName = _soulName;\\n    }\\n\\n    /// @notice Sets the price of the name registering per one year in stable coin\\n    /// @dev The caller must have the admin or project admin role to call this function\\n    /// @param _nameLength Length of the name\\n    /// @param _nameRegistrationPricePerYear New price of the name registering per one\\n    /// year in stable coin for that name length per year\\n    function setNameRegistrationPricePerYear(\\n        uint256 _nameLength,\\n        uint256 _nameRegistrationPricePerYear\\n    ) external {\\n        if (\\n            !hasRole(DEFAULT_ADMIN_ROLE, _msgSender()) &&\\n            !hasRole(PROJECT_ADMIN_ROLE, _msgSender())\\n        ) revert UserMustHaveProtocolOrProjectAdminRole();\\n        if (\\n            nameRegistrationPricePerYear[_nameLength] ==\\n            _nameRegistrationPricePerYear\\n        ) revert SameValue();\\n        nameRegistrationPricePerYear[\\n            _nameLength\\n        ] = _nameRegistrationPricePerYear;\\n    }\\n\\n    /// @notice Adds a new authority to the list of authorities\\n    /// @dev The caller must have the admin or project admin role to call this function\\n    /// @param _authority New authority to add\\n    function addAuthority(address _authority) external {\\n        if (\\n            !hasRole(DEFAULT_ADMIN_ROLE, _msgSender()) &&\\n            !hasRole(PROJECT_ADMIN_ROLE, _msgSender())\\n        ) revert UserMustHaveProtocolOrProjectAdminRole();\\n        if (_authority == address(0)) revert ZeroAddress();\\n        if (authorities[_authority]) revert AlreadyAdded();\\n\\n        authorities[_authority] = true;\\n    }\\n\\n    /// @notice Removes an authority from the list of authorities\\n    /// @dev The caller must have the admin or project admin role to call this function\\n    /// @param _authority Authority to remove\\n    function removeAuthority(address _authority) external {\\n        if (\\n            !hasRole(DEFAULT_ADMIN_ROLE, _msgSender()) &&\\n            !hasRole(PROJECT_ADMIN_ROLE, _msgSender())\\n        ) revert UserMustHaveProtocolOrProjectAdminRole();\\n        if (_authority == address(0)) revert ZeroAddress();\\n        if (!authorities[_authority]) revert AuthorityNotExists(_authority);\\n\\n        authorities[_authority] = false;\\n    }\\n\\n    /// @notice Pauses the smart contract\\n    /// @dev The caller must have the admin role to call this function\\n    function pause() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _pause();\\n    }\\n\\n    /// @notice Unpauses the smart contract\\n    /// @dev The caller must have the admin role to call this function\\n    function unpause() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _unpause();\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /// @notice Mints a new Soulbound Identity and Name purchasing it\\n    /// @dev This function allows the purchase of a soulbound identity and name using\\n    /// stable coin (USDC), native token (ETH) or utility token (MASA)\\n    /// @param paymentMethod Address of token that user want to pay\\n    /// @param name Name of the new soul name\\n    /// @param nameLength Length of the name\\n    /// @param yearsPeriod Years of validity of the name\\n    /// @param tokenURI URI of the NFT\\n    /// @param authorityAddress Address of the authority\\n    /// @param signature Signature of the authority\\n    /// @return TokenId of the new soulbound identity\\n    function purchaseIdentityAndName(\\n        address paymentMethod,\\n        string memory name,\\n        uint256 nameLength,\\n        uint256 yearsPeriod,\\n        string memory tokenURI,\\n        address authorityAddress,\\n        bytes calldata signature\\n    ) external payable whenNotPaused nonReentrant returns (uint256) {\\n        (\\n            uint256 price,\\n            uint256 protocolFee\\n        ) = getPriceForMintingNameWithProtocolFee(\\n                paymentMethod,\\n                nameLength,\\n                yearsPeriod\\n            );\\n        _pay(paymentMethod, price, protocolFee);\\n\\n        // finalize purchase\\n        return\\n            _mintSoulboundIdentityAndName(\\n                _msgSender(),\\n                name,\\n                nameLength,\\n                yearsPeriod,\\n                tokenURI,\\n                authorityAddress,\\n                signature\\n            );\\n    }\\n\\n    /// @notice Mints a new Soulbound Identity purchasing it\\n    /// @dev This function allows the purchase of a soulbound identity for free\\n    /// @return TokenId of the new soulbound identity\\n    function purchaseIdentity() external returns (uint256) {\\n        return _mintSoulboundIdentity(_msgSender());\\n    }\\n\\n    /// @notice Mints a new Soul Name purchasing it\\n    /// @dev This function allows the purchase of a soul name using\\n    /// stable coin (USDC), native token (ETH) or utility token (MASA)\\n    /// @param paymentMethod Address of token that user want to pay\\n    /// @param to Address of the owner of the new soul name\\n    /// @param name Name of the new soul name\\n    /// @param nameLength Length of the name\\n    /// @param yearsPeriod Years of validity of the name\\n    /// @param tokenURI URI of the NFT\\n    /// @param authorityAddress Address of the authority\\n    /// @param signature Signature of the authority\\n    /// @return TokenId of the new sou name\\n    function purchaseName(\\n        address paymentMethod,\\n        address to,\\n        string memory name,\\n        uint256 nameLength,\\n        uint256 yearsPeriod,\\n        string memory tokenURI,\\n        address authorityAddress,\\n        bytes calldata signature\\n    ) external payable whenNotPaused nonReentrant returns (uint256) {\\n        (\\n            uint256 price,\\n            uint256 protocolFee\\n        ) = getPriceForMintingNameWithProtocolFee(\\n                paymentMethod,\\n                nameLength,\\n                yearsPeriod\\n            );\\n        _pay(paymentMethod, price, protocolFee);\\n\\n        // finalize purchase\\n        return\\n            _mintSoulName(\\n                to,\\n                name,\\n                nameLength,\\n                yearsPeriod,\\n                tokenURI,\\n                authorityAddress,\\n                signature\\n            );\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    /// @notice Returns the price of register a name per year in stable coin for an specific length\\n    /// @dev Returns the price for registering per year in USD for an specific name length\\n    /// @param nameLength Length of the name\\n    /// @return Price in stable coin for that name length\\n    function getNameRegistrationPricePerYear(\\n        uint256 nameLength\\n    ) public view returns (uint256) {\\n        uint256 price = nameRegistrationPricePerYear[nameLength];\\n        if (price == 0) {\\n            // if not found, return the default price\\n            price = nameRegistrationPricePerYear[0];\\n        }\\n        return price;\\n    }\\n\\n    /// @notice Returns the price of the name minting\\n    /// @dev Returns current pricing for name minting for a given name length and years period\\n    /// @param paymentMethod Address of token that user want to pay\\n    /// @param nameLength Length of the name\\n    /// @param yearsPeriod Years of validity of the name\\n    /// @return price Current price of the name minting in the given payment method\\n    function getPriceForMintingName(\\n        address paymentMethod,\\n        uint256 nameLength,\\n        uint256 yearsPeriod\\n    ) public view returns (uint256 price) {\\n        uint256 mintPrice = getNameRegistrationPricePerYear(nameLength).mul(\\n            yearsPeriod\\n        );\\n\\n        if (mintPrice == 0) {\\n            price = 0;\\n        } else if (\\n            paymentMethod == stableCoin && enabledPaymentMethod[paymentMethod]\\n        ) {\\n            // stable coin\\n            price = mintPrice;\\n        } else if (enabledPaymentMethod[paymentMethod]) {\\n            // ETH and ERC 20 token\\n            price = _convertFromStableCoin(paymentMethod, mintPrice);\\n        } else {\\n            revert InvalidPaymentMethod(paymentMethod);\\n        }\\n        return price;\\n    }\\n\\n    /// @notice Returns the price of the name minting with protocol fee\\n    /// @dev Returns current pricing for name minting for a given name length and years period with protocol fee\\n    /// @param paymentMethod Address of token that user want to pay\\n    /// @param nameLength Length of the name\\n    /// @param yearsPeriod Years of validity of the name\\n    /// @return price Current price of the name minting in the given payment method\\n    /// @return protocolFee Current protocol fee of the name minting in the given payment method\\n    function getPriceForMintingNameWithProtocolFee(\\n        address paymentMethod,\\n        uint256 nameLength,\\n        uint256 yearsPeriod\\n    ) public view returns (uint256 price, uint256 protocolFee) {\\n        price = getPriceForMintingName(paymentMethod, nameLength, yearsPeriod);\\n        return (price, _getProtocolFee(paymentMethod, price));\\n    }\\n\\n    /* ========== PRIVATE FUNCTIONS ========== */\\n\\n    /// @notice Mints a new Soulbound Identity and Name\\n    /// @dev The final step of all purchase options. Will mint a\\n    /// new Soulbound Identity and a Soul Name NFT and emit the purchase event\\n    /// @param to Address of the owner of the new soul name\\n    /// @param name Name of the new soul name\\n    /// @param nameLength Length of the name\\n    /// @param yearsPeriod Years of validity of the name\\n    /// @param tokenURI URI of the NFT\\n    /// @param authorityAddress Address of the authority\\n    /// @param signature Signature of the authority\\n    /// @return TokenId of the new soulbound identity\\n    function _mintSoulboundIdentityAndName(\\n        address to,\\n        string memory name,\\n        uint256 nameLength,\\n        uint256 yearsPeriod,\\n        string memory tokenURI,\\n        address authorityAddress,\\n        bytes calldata signature\\n    ) internal returns (uint256) {\\n        _verify(\\n            _hash(to, name, nameLength, yearsPeriod, tokenURI),\\n            signature,\\n            authorityAddress\\n        );\\n\\n        // mint Soulbound identity token\\n        uint256 tokenId = soulboundIdentity.mint(to);\\n\\n        // mint Soul Name token\\n        soulName.mint(to, name, yearsPeriod, tokenURI);\\n\\n        emit SoulboundIdentityAndNamePurchased(to, tokenId, name, yearsPeriod);\\n\\n        return tokenId;\\n    }\\n\\n    /// @notice Mints a new Soulbound Identity\\n    /// @dev The final step of all purchase options. Will mint a\\n    /// new Soulbound Identity and emit the purchase event\\n    /// @param to Address of the owner of the new identity\\n    /// @return TokenId of the new soulbound identity\\n    function _mintSoulboundIdentity(address to) internal returns (uint256) {\\n        // mint Soulbound identity token\\n        uint256 tokenId = soulboundIdentity.mint(to);\\n\\n        emit SoulboundIdentityPurchased(to, tokenId);\\n\\n        return tokenId;\\n    }\\n\\n    /// @notice Mints a new Soul Name\\n    /// @dev The final step of all purchase options. Will mint a\\n    /// new Soul Name NFT and emit the purchase event\\n    /// @param to Address of the owner of the new soul name\\n    /// @param name Name of the new soul name\\n    /// @param nameLength Length of the name\\n    /// @param yearsPeriod Years of validity of the name\\n    /// @param tokenURI URI of the NFT\\n    /// @param authorityAddress Address of the authority\\n    /// @param signature Signature of the authority\\n    /// @return TokenId of the new soul name\\n    function _mintSoulName(\\n        address to,\\n        string memory name,\\n        uint256 nameLength,\\n        uint256 yearsPeriod,\\n        string memory tokenURI,\\n        address authorityAddress,\\n        bytes calldata signature\\n    ) internal returns (uint256) {\\n        _verify(\\n            _hash(to, name, nameLength, yearsPeriod, tokenURI),\\n            signature,\\n            authorityAddress\\n        );\\n\\n        // mint Soul Name token\\n        uint256 tokenId = soulName.mint(to, name, yearsPeriod, tokenURI);\\n\\n        emit SoulNamePurchased(to, tokenId, name, yearsPeriod);\\n\\n        return tokenId;\\n    }\\n\\n    function _verify(\\n        bytes32 digest,\\n        bytes memory signature,\\n        address signer\\n    ) internal view {\\n        address _signer = ECDSA.recover(digest, signature);\\n        if (_signer != signer) revert InvalidSignature();\\n        if (!authorities[_signer]) revert NotAuthorized(_signer);\\n    }\\n\\n    function _hash(\\n        address to,\\n        string memory name,\\n        uint256 nameLength,\\n        uint256 yearsPeriod,\\n        string memory tokenURI\\n    ) internal view returns (bytes32) {\\n        return\\n            _hashTypedDataV4(\\n                keccak256(\\n                    abi.encode(\\n                        keccak256(\\n                            \\\"MintSoulName(address to,string name,uint256 nameLength,uint256 yearsPeriod,string tokenURI)\\\"\\n                        ),\\n                        to,\\n                        keccak256(bytes(name)),\\n                        nameLength,\\n                        yearsPeriod,\\n                        keccak256(bytes(tokenURI))\\n                    )\\n                )\\n            );\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    /* ========== EVENTS ========== */\\n\\n    event SoulboundIdentityAndNamePurchased(\\n        address indexed account,\\n        uint256 tokenId,\\n        string indexed name,\\n        uint256 yearsPeriod\\n    );\\n\\n    event SoulboundIdentityPurchased(address indexed account, uint256 tokenId);\\n\\n    event SoulNamePurchased(\\n        address indexed account,\\n        uint256 tokenId,\\n        string indexed name,\\n        uint256 yearsPeriod\\n    );\\n}\\n\"\n    },\n    \"contracts/tokens/MasaNFT.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/// @title MasaNFT\\n/// @author Masa Finance\\n/// @notice Non-fungible token is a token that is not fungible.\\n/// @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard,\\n/// that inherits from {ERC721Enumerable}, {Ownable}, {AccessControl} and {ERC721Burnable}.\\nabstract contract MasaNFT is\\n    ERC721,\\n    ERC721Enumerable,\\n    Ownable,\\n    AccessControl,\\n    ERC721Burnable\\n{\\n    /* ========== STATE VARIABLES =========================================== */\\n\\n    using Strings for uint256;\\n    using Counters for Counters.Counter;\\n\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    Counters.Counter private _tokenIdCounter;\\n\\n    string private _baseTokenURI;\\n\\n    /* ========== INITIALIZE ================================================ */\\n\\n    /// @notice Creates a new NFT\\n    /// @dev Creates a new Non-fungible token\\n    /// @param admin Administrator of the smart contract\\n    /// @param name Name of the token\\n    /// @param symbol Symbol of the token\\n    /// @param baseTokenURI Base URI of the token\\n    constructor(\\n        address admin,\\n        string memory name,\\n        string memory symbol,\\n        string memory baseTokenURI\\n    ) ERC721(name, symbol) {\\n        Ownable.transferOwnership(admin);\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\\n        _grantRole(MINTER_ROLE, admin);\\n\\n        _baseTokenURI = baseTokenURI;\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ====================================== */\\n\\n    function _mintWithCounter(\\n        address to\\n    ) internal onlyRole(MINTER_ROLE) returns (uint256) {\\n        uint256 tokenId = _tokenIdCounter.current();\\n        _tokenIdCounter.increment();\\n        _safeMint(to, tokenId);\\n\\n        return tokenId;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ======================================== */\\n\\n    /* ========== VIEWS ===================================================== */\\n\\n    /// @notice Returns true if the token exists\\n    /// @dev Returns true if the token has been minted\\n    /// @param tokenId Token to check\\n    /// @return True if the token exists\\n    function exists(uint256 tokenId) external view returns (bool) {\\n        return _exists(tokenId);\\n    }\\n\\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n    /// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\\n    ///  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\n    ///  Metadata JSON Schema\\\".\\n    /// @param tokenId NFT to get the URI of\\n    /// @return URI of the NFT\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return\\n            bytes(baseURI).length > 0\\n                ? string(abi.encodePacked(baseURI, tokenId.toString(), \\\".json\\\"))\\n                : \\\"\\\";\\n    }\\n\\n    /// @notice Query if a contract implements an interface\\n    /// @dev Interface identification is specified in ERC-165.\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @return `true` if the contract implements `interfaceId` and\\n    ///  `interfaceId` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    )\\n        public\\n        view\\n        virtual\\n        override(ERC721, ERC721Enumerable, AccessControl)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /* ========== PRIVATE FUNCTIONS ========================================= */\\n\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return _baseTokenURI;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override(ERC721, ERC721Enumerable) {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n    }\\n\\n    /* ========== MODIFIERS ================================================= */\\n\\n    /* ========== EVENTS ==================================================== */\\n}\\n\"\n    },\n    \"contracts/tokens/MasaSBT.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"../dex/PaymentGateway.sol\\\";\\nimport \\\"../libraries/Errors.sol\\\";\\nimport \\\"../interfaces/ISoulboundIdentity.sol\\\";\\nimport \\\"../interfaces/ILinkableSBT.sol\\\";\\nimport \\\"./SBT/SBT.sol\\\";\\nimport \\\"./SBT/extensions/SBTEnumerable.sol\\\";\\nimport \\\"./SBT/extensions/SBTBurnable.sol\\\";\\n\\n/// @title MasaSBT\\n/// @author Masa Finance\\n/// @notice Soulbound token. Non-fungible token that is not transferable.\\n/// @dev Implementation of https://papers.ssrn.com/sol3/papers.cfm?abstract_id=4105763 Soulbound token.\\n/// Adds a link to a SoulboundIdentity SC to let minting using the identityId\\n/// Adds a payment gateway to let minting paying a fee\\nabstract contract MasaSBT is\\n    PaymentGateway,\\n    SBT,\\n    SBTEnumerable,\\n    SBTBurnable,\\n    ILinkableSBT\\n{\\n    /* ========== STATE VARIABLES =========================================== */\\n\\n    using Strings for uint256;\\n\\n    string private _baseTokenURI;\\n\\n    ISoulboundIdentity public soulboundIdentity;\\n\\n    uint256 public mintPrice; // price in stable coin\\n    uint256 public mintPriceMASA; // price in MASA\\n\\n    uint256 public override addLinkPrice; // price in stable coin\\n    uint256 public override addLinkPriceMASA; // price in MASA\\n    uint256 public override queryLinkPrice; // price in stable coin\\n    uint256 public override queryLinkPriceMASA; // price in MASA\\n\\n    /* ========== INITIALIZE ================================================ */\\n\\n    /// @notice Creates a new soulbound token\\n    /// @dev Creates a new soulbound token\\n    /// @param admin Administrator of the smart contract\\n    /// @param name Name of the token\\n    /// @param symbol Symbol of the token\\n    /// @param baseTokenURI Base URI of the token\\n    /// @param _soulboundIdentity Address of the SoulboundIdentity contract\\n    /// @param paymentParams Payment gateway params\\n    constructor(\\n        address admin,\\n        string memory name,\\n        string memory symbol,\\n        string memory baseTokenURI,\\n        address _soulboundIdentity,\\n        PaymentParams memory paymentParams\\n    ) SBT(name, symbol) PaymentGateway(admin, paymentParams) {\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\\n\\n        _baseTokenURI = baseTokenURI;\\n        soulboundIdentity = ISoulboundIdentity(_soulboundIdentity);\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ====================================== */\\n\\n    /// @notice Sets the price of minting in stable coin\\n    /// @dev The caller must have the admin or project admin role to call this function\\n    /// @param _mintPrice New price of minting in stable coin\\n    function setMintPrice(uint256 _mintPrice) external {\\n        if (\\n            !hasRole(DEFAULT_ADMIN_ROLE, _msgSender()) &&\\n            !hasRole(PROJECT_ADMIN_ROLE, _msgSender())\\n        ) revert UserMustHaveProtocolOrProjectAdminRole();\\n        if (mintPrice == _mintPrice) revert SameValue();\\n        mintPrice = _mintPrice;\\n    }\\n\\n    /// @notice Sets the price of minting in MASA\\n    /// @dev The caller must have the admin or project admin role to call this function\\n    /// @param _mintPriceMASA New price of minting in MASA\\n    function setMintPriceMASA(uint256 _mintPriceMASA) external {\\n        if (\\n            !hasRole(DEFAULT_ADMIN_ROLE, _msgSender()) &&\\n            !hasRole(PROJECT_ADMIN_ROLE, _msgSender())\\n        ) revert UserMustHaveProtocolOrProjectAdminRole();\\n        if (mintPriceMASA == _mintPriceMASA) revert SameValue();\\n        mintPriceMASA = _mintPriceMASA;\\n    }\\n\\n    /// @notice Sets the SoulboundIdentity contract address linked to this SBT\\n    /// @dev The caller must be the admin to call this function\\n    /// @param _soulboundIdentity Address of the SoulboundIdentity contract\\n    function setSoulboundIdentity(\\n        address _soulboundIdentity\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (address(soulboundIdentity) == _soulboundIdentity)\\n            revert SameValue();\\n        soulboundIdentity = ISoulboundIdentity(_soulboundIdentity);\\n    }\\n\\n    /// @notice Sets the price for adding the link in SoulLinker in stable coin\\n    /// @dev The caller must have the admin or project admin role to call this function\\n    /// @param _addLinkPrice New price for adding the link in SoulLinker in stable coin\\n    function setAddLinkPrice(uint256 _addLinkPrice) external {\\n        if (\\n            !hasRole(DEFAULT_ADMIN_ROLE, _msgSender()) &&\\n            !hasRole(PROJECT_ADMIN_ROLE, _msgSender())\\n        ) revert UserMustHaveProtocolOrProjectAdminRole();\\n        if (addLinkPrice == _addLinkPrice) revert SameValue();\\n        addLinkPrice = _addLinkPrice;\\n    }\\n\\n    /// @notice Sets the price for adding the link in SoulLinker in MASA\\n    /// @dev The caller must have the admin or project admin role to call this function\\n    /// @param _addLinkPriceMASA New price for adding the link in SoulLinker in MASA\\n    function setAddLinkPriceMASA(uint256 _addLinkPriceMASA) external {\\n        if (\\n            !hasRole(DEFAULT_ADMIN_ROLE, _msgSender()) &&\\n            !hasRole(PROJECT_ADMIN_ROLE, _msgSender())\\n        ) revert UserMustHaveProtocolOrProjectAdminRole();\\n        if (addLinkPriceMASA == _addLinkPriceMASA) revert SameValue();\\n        addLinkPriceMASA = _addLinkPriceMASA;\\n    }\\n\\n    /// @notice Sets the price for reading data in SoulLinker in stable coin\\n    /// @dev The caller must have the admin or project admin role to call this function\\n    /// @param _queryLinkPrice New price for reading data in SoulLinker in stable coin\\n    function setQueryLinkPrice(uint256 _queryLinkPrice) external {\\n        if (\\n            !hasRole(DEFAULT_ADMIN_ROLE, _msgSender()) &&\\n            !hasRole(PROJECT_ADMIN_ROLE, _msgSender())\\n        ) revert UserMustHaveProtocolOrProjectAdminRole();\\n        if (queryLinkPrice == _queryLinkPrice) revert SameValue();\\n        queryLinkPrice = _queryLinkPrice;\\n    }\\n\\n    /// @notice Sets the price for reading data in SoulLinker in MASA\\n    /// @dev The caller must have the admin or project admin role to call this function\\n    /// @param _queryLinkPriceMASA New price for reading data in SoulLinker in MASA\\n    function setQueryLinkPriceMASA(uint256 _queryLinkPriceMASA) external {\\n        if (\\n            !hasRole(DEFAULT_ADMIN_ROLE, _msgSender()) &&\\n            !hasRole(PROJECT_ADMIN_ROLE, _msgSender())\\n        ) revert UserMustHaveProtocolOrProjectAdminRole();\\n        if (queryLinkPriceMASA == _queryLinkPriceMASA) revert SameValue();\\n        queryLinkPriceMASA = _queryLinkPriceMASA;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ======================================== */\\n\\n    /* ========== VIEWS ===================================================== */\\n\\n    /// @notice Returns the identityId owned by the given token\\n    /// @param tokenId Id of the token\\n    /// @return Id of the identity\\n    function getIdentityId(uint256 tokenId) external view returns (uint256) {\\n        if (soulboundIdentity == ISoulboundIdentity(address(0)))\\n            revert NotLinkedToAnIdentitySBT();\\n\\n        address owner = super.ownerOf(tokenId);\\n        return soulboundIdentity.tokenOfOwner(owner);\\n    }\\n\\n    /// @notice Returns true if the token exists\\n    /// @dev Returns true if the token has been minted\\n    /// @param tokenId Token to check\\n    /// @return True if the token exists\\n    function exists(uint256 tokenId) external view returns (bool) {\\n        return _exists(tokenId);\\n    }\\n\\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n    /// @dev Throws if `_tokenId` is not a valid SBT. URIs are defined in RFC\\n    ///  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\n    ///  Metadata JSON Schema\\\".\\n    /// @param tokenId SBT to get the URI of\\n    /// @return URI of the SBT\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return\\n            bytes(baseURI).length > 0\\n                ? string(abi.encodePacked(baseURI, tokenId.toString(), \\\".json\\\"))\\n                : \\\"\\\";\\n    }\\n\\n    /// @notice Query if a contract implements an interface\\n    /// @dev Interface identification is specified in ERC-165.\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @return `true` if the contract implements `interfaceId` and\\n    ///  `interfaceId` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    )\\n        public\\n        view\\n        virtual\\n        override(SBT, SBTEnumerable, AccessControl, IERC165)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @notice Returns the price for minting\\n    /// @dev Returns current pricing for minting\\n    /// @param paymentMethod Address of token that user want to pay\\n    /// @return price Current price for minting in the given payment method\\n    function getMintPrice(\\n        address paymentMethod\\n    ) public view returns (uint256 price) {\\n        if (mintPrice == 0 && mintPriceMASA == 0) {\\n            price = 0;\\n        } else if (\\n            paymentMethod == masaToken &&\\n            enabledPaymentMethod[paymentMethod] &&\\n            mintPriceMASA > 0\\n        ) {\\n            // price in MASA without conversion rate\\n            price = mintPriceMASA;\\n        } else if (\\n            paymentMethod == stableCoin && enabledPaymentMethod[paymentMethod]\\n        ) {\\n            // stable coin\\n            price = mintPrice;\\n        } else if (enabledPaymentMethod[paymentMethod]) {\\n            // ETH and ERC 20 token\\n            price = _convertFromStableCoin(paymentMethod, mintPrice);\\n        } else {\\n            revert InvalidPaymentMethod(paymentMethod);\\n        }\\n        return price;\\n    }\\n\\n    /// @notice Returns the price for minting with protocol fee\\n    /// @dev Returns current pricing for minting with protocol fee\\n    /// @param paymentMethod Address of token that user want to pay\\n    /// @return price Current price for minting in the given payment method\\n    /// @return protocolFee Current protocol fee for minting in the given payment method\\n    function getMintPriceWithProtocolFee(\\n        address paymentMethod\\n    ) public view returns (uint256 price, uint256 protocolFee) {\\n        price = getMintPrice(paymentMethod);\\n        return (price, _getProtocolFee(paymentMethod, price));\\n    }\\n\\n    /* ========== PRIVATE FUNCTIONS ========================================= */\\n\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return _baseTokenURI;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override(SBT, SBTEnumerable) {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /* ========== MODIFIERS ================================================= */\\n\\n    /* ========== EVENTS ==================================================== */\\n}\\n\"\n    },\n    \"contracts/tokens/MasaSBTAuthority.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nimport \\\"./MasaSBT.sol\\\";\\n\\n/// @title MasaSBT\\n/// @author Masa Finance\\n/// @notice Soulbound token. Non-fungible token that is not transferable.\\n/// @dev Implementation of https://papers.ssrn.com/sol3/papers.cfm?abstract_id=4105763 Soulbound token.\\nabstract contract MasaSBTAuthority is MasaSBT {\\n    /* ========== STATE VARIABLES =========================================== */\\n\\n    using Counters for Counters.Counter;\\n\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    Counters.Counter private _tokenIdCounter;\\n\\n    /* ========== INITIALIZE ================================================ */\\n\\n    /// @notice Creates a new soulbound token\\n    /// @dev Creates a new soulbound token\\n    /// @param admin Administrator of the smart contract\\n    /// @param name Name of the token\\n    /// @param symbol Symbol of the token\\n    /// @param baseTokenURI Base URI of the token\\n    /// @param soulboundIdentity Address of the SoulboundIdentity contract\\n    /// @param paymentParams Payment gateway params\\n    constructor(\\n        address admin,\\n        string memory name,\\n        string memory symbol,\\n        string memory baseTokenURI,\\n        address soulboundIdentity,\\n        PaymentParams memory paymentParams\\n    )\\n        MasaSBT(\\n            admin,\\n            name,\\n            symbol,\\n            baseTokenURI,\\n            soulboundIdentity,\\n            paymentParams\\n        )\\n    {\\n        _grantRole(MINTER_ROLE, admin);\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ====================================== */\\n\\n    function _mintWithCounter(\\n        address paymentMethod,\\n        address to\\n    ) internal virtual onlyRole(MINTER_ROLE) returns (uint256) {\\n        (uint256 price, uint256 protocolFee) = getMintPriceWithProtocolFee(\\n            paymentMethod\\n        );\\n        _pay(paymentMethod, price, protocolFee);\\n\\n        uint256 tokenId = _tokenIdCounter.current();\\n        _tokenIdCounter.increment();\\n        _mint(to, tokenId);\\n\\n        return tokenId;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ======================================== */\\n\\n    /* ========== VIEWS ===================================================== */\\n\\n    /* ========== PRIVATE FUNCTIONS ========================================= */\\n\\n    /* ========== MODIFIERS ================================================= */\\n\\n    /* ========== EVENTS ==================================================== */\\n}\\n\"\n    },\n    \"contracts/tokens/MasaSBTSelfSovereign.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nimport \\\"../libraries/Errors.sol\\\";\\nimport \\\"./MasaSBT.sol\\\";\\n\\n/// @title MasaSBTSelfSovereign\\n/// @author Masa Finance\\n/// @notice Soulbound token. Non-fungible token that is not transferable.\\n/// Adds a self-sovereign protocol to let minting using an authority signature\\n/// @dev Implementation of https://papers.ssrn.com/sol3/papers.cfm?abstract_id=4105763 Soulbound token.\\nabstract contract MasaSBTSelfSovereign is MasaSBT, EIP712 {\\n    /* ========== STATE VARIABLES =========================================== */\\n\\n    using Counters for Counters.Counter;\\n\\n    Counters.Counter private _tokenIdCounter;\\n\\n    mapping(address => bool) public authorities;\\n\\n    /* ========== INITIALIZE ================================================ */\\n\\n    /// @notice Creates a new soulbound token\\n    /// @dev Creates a new soulbound token\\n    /// @param admin Administrator of the smart contract\\n    /// @param name Name of the token\\n    /// @param symbol Symbol of the token\\n    /// @param baseTokenURI Base URI of the token\\n    /// @param soulboundIdentity Address of the SoulboundIdentity contract\\n    /// @param paymentParams Payment gateway params\\n    constructor(\\n        address admin,\\n        string memory name,\\n        string memory symbol,\\n        string memory baseTokenURI,\\n        address soulboundIdentity,\\n        PaymentParams memory paymentParams\\n    )\\n        MasaSBT(\\n            admin,\\n            name,\\n            symbol,\\n            baseTokenURI,\\n            soulboundIdentity,\\n            paymentParams\\n        )\\n    {}\\n\\n    /* ========== RESTRICTED FUNCTIONS ====================================== */\\n\\n    /// @notice Adds a new authority to the list of authorities\\n    /// @dev The caller must have the admin or project admin role to call this function\\n    /// @param _authority New authority to add\\n    function addAuthority(address _authority) external {\\n        if (\\n            !hasRole(DEFAULT_ADMIN_ROLE, _msgSender()) &&\\n            !hasRole(PROJECT_ADMIN_ROLE, _msgSender())\\n        ) revert UserMustHaveProtocolOrProjectAdminRole();\\n        if (_authority == address(0)) revert ZeroAddress();\\n        if (authorities[_authority]) revert AlreadyAdded();\\n\\n        authorities[_authority] = true;\\n    }\\n\\n    /// @notice Removes an authority from the list of authorities\\n    /// @dev The caller must have the admin or project admin role to call this function\\n    /// @param _authority Authority to remove\\n    function removeAuthority(address _authority) external {\\n        if (\\n            !hasRole(DEFAULT_ADMIN_ROLE, _msgSender()) &&\\n            !hasRole(PROJECT_ADMIN_ROLE, _msgSender())\\n        ) revert UserMustHaveProtocolOrProjectAdminRole();\\n        if (_authority == address(0)) revert ZeroAddress();\\n        if (!authorities[_authority]) revert AuthorityNotExists(_authority);\\n\\n        authorities[_authority] = false;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ======================================== */\\n\\n    /* ========== VIEWS ===================================================== */\\n\\n    /* ========== PRIVATE FUNCTIONS ========================================= */\\n\\n    function _verify(\\n        bytes32 digest,\\n        bytes memory signature,\\n        address signer\\n    ) private view {\\n        address _signer = ECDSA.recover(digest, signature);\\n        if (_signer != signer) revert InvalidSignature();\\n        if (!authorities[_signer]) revert NotAuthorized(_signer);\\n    }\\n\\n    function _mintWithCounter(\\n        address paymentMethod,\\n        address to,\\n        bytes32 digest,\\n        address authorityAddress,\\n        bytes calldata signature\\n    ) internal virtual returns (uint256) {\\n        _verify(digest, signature, authorityAddress);\\n\\n        (uint256 price, uint256 protocolFee) = getMintPriceWithProtocolFee(\\n            paymentMethod\\n        );\\n        _pay(paymentMethod, price, protocolFee);\\n\\n        uint256 tokenId = _tokenIdCounter.current();\\n        _tokenIdCounter.increment();\\n        _mint(to, tokenId);\\n\\n        return tokenId;\\n    }\\n\\n    /* ========== MODIFIERS ================================================= */\\n\\n    /* ========== EVENTS ==================================================== */\\n}\\n\"\n    },\n    \"contracts/tokens/SBT/extensions/ISBTEnumerable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"../ISBT.sol\\\";\\n\\n/**\\n * @title SBT Soulbound Token Standard, optional enumeration extension\\n */\\ninterface ISBTEnumerable is ISBT {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(\\n        address owner,\\n        uint256 index\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\n    },\n    \"contracts/tokens/SBT/extensions/ISBTMetadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"../ISBT.sol\\\";\\n\\n/**\\n * @title SBT Soulbound Token Standard, optional metadata extension\\n */\\ninterface ISBTMetadata is ISBT {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\n    },\n    \"contracts/tokens/SBT/extensions/SBTBurnable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport \\\"../SBT.sol\\\";\\n\\n/**\\n * @title SBT Burnable Token\\n * @dev SBT Token that can be burned (destroyed).\\n */\\nabstract contract SBTBurnable is Context, SBT {\\n    /**\\n     * @dev Burns `tokenId`. See {SBT-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(\\n            _isOwner(_msgSender(), tokenId),\\n            \\\"SBT: caller is not token owner\\\"\\n        );\\n        _burn(tokenId);\\n    }\\n}\\n\"\n    },\n    \"contracts/tokens/SBT/extensions/SBTEnumerable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"../SBT.sol\\\";\\nimport \\\"./ISBTEnumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {SBT} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract SBTEnumerable is SBT, ISBTEnumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(IERC165, SBT) returns (bool) {\\n        return\\n            interfaceId == type(ISBTEnumerable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {ISBTEnumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(\\n        address owner,\\n        uint256 index\\n    ) public view virtual override returns (uint256) {\\n        require(\\n            index < SBT.balanceOf(owner),\\n            \\\"SBTEnumerable: owner index out of bounds\\\"\\n        );\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {ISBTEnumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {ISBTEnumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(\\n        uint256 index\\n    ) public view virtual override returns (uint256) {\\n        require(\\n            index < SBTEnumerable.totalSupply(),\\n            \\\"SBTEnumerable: global index out of bounds\\\"\\n        );\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = SBT.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(\\n        address from,\\n        uint256 tokenId\\n    ) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = SBT.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\"\n    },\n    \"contracts/tokens/SBT/ISBT.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface ISBT is IERC165 {\\n    /// @dev This emits when an SBT is newly minted.\\n    ///  This event emits when SBTs are created\\n    event Mint(address indexed _owner, uint256 indexed _tokenId);\\n\\n    /// @dev This emits when an SBT is burned\\n    ///  This event emits when SBTs are destroyed\\n    event Burn(address indexed _owner, uint256 indexed _tokenId);\\n\\n    /// @notice Count all SBTs assigned to an owner\\n    /// @dev SBTs assigned to the zero address are considered invalid, and this\\n    ///  function throws for queries about the zero address.\\n    /// @param _owner An address for whom to query the balance\\n    /// @return The number of SBTs owned by `_owner`, possibly zero\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    /// @notice Find the owner of an SBT\\n    /// @dev SBTs assigned to zero address are considered invalid, and queries\\n    ///  about them do throw.\\n    /// @param _tokenId The identifier for an SBT\\n    /// @return The address of the owner of the SBT\\n    function ownerOf(uint256 _tokenId) external view returns (address);\\n}\\n\"\n    },\n    \"contracts/tokens/SBT/SBT.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./ISBT.sol\\\";\\nimport \\\"./extensions/ISBTMetadata.sol\\\";\\n\\n/// @title SBT\\n/// @author Masa Finance\\n/// @notice Soulbound token is an NFT token that is not transferable.\\ncontract SBT is Context, ERC165, ISBT, ISBTMetadata {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(ISBT).interfaceId ||\\n            interfaceId == type(ISBTMetadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {ISBT-balanceOf}.\\n     */\\n    function balanceOf(\\n        address owner\\n    ) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"SBT: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {ISBT-ownerOf}.\\n     */\\n    function ownerOf(\\n        uint256 tokenId\\n    ) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"SBT: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {ISBTMetadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {ISBTMetadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {ISBTMetadata-tokenURI}.\\n     */\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return\\n            bytes(baseURI).length > 0\\n                ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n                : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isOwner(\\n        address spender,\\n        uint256 tokenId\\n    ) internal view virtual returns (bool) {\\n        address owner = SBT.ownerOf(tokenId);\\n        return (spender == owner);\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Mint} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"SBT: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"SBT: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Mint(to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     *\\n     * Requirements:\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Burn} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = SBT.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Burn(owner, tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"SBT: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token minting/burning\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address, address, uint256) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any minting/burning of tokens\\n     *\\n     * Calling conditions:\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address, address, uint256) internal virtual {}\\n}\\n\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 1,\n      \"details\": {\n        \"yul\": false\n      }\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\",\n          \"devdoc\",\n          \"userdoc\",\n          \"devdoc\",\n          \"userdoc\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "7e4e5778a1d224496575e0028c8f123c",
      "transactionHash": "0x136ca94fa09eb5c1eb83967ccb811a201b22fe8272925ca70b631277428ae8fe",
      "args": [
        "0xD9f8D4359C034E1290d83b70e73e32fdd31a663B",
        "Masa Green",
        "MG-2FA",
        "https://metadata.masa.finance/v1.0/green/bsc/",
        "0x0000000000000000000000000000000000000000",
        [
          "0x10ED43C718714eb63d5aA57B78B54704E256024E",
          "0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c",
          "0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56",
          "0x0000000000000000000000000000000000000000",
          "0x9024b41ebAA34f7b1999665ec7CF2145455E0557",
          "0x0000000000000000000000000000000000000000",
          "0",
          "0"
        ]
      ]
    },
    "decoded": {
      "from": "0x84a74cC52048dd8421Df4a9EB139D91bb7744b4E",
      "gasPrice": "3000000000",
      "gasLimit": "4156182",
      "to": null,
      "value": "0",
      "nonce": 4,
      "data": "0x6101606040523480156200001257600080fd5b5060405162004ea738038062004ea78339810160408190526200003591620006f3565b8585858585856040518060400160405280600e81526020016d29b7bab63137bab73223b932b2b760911b815250604051806040016040528060058152602001640312e302e360dc1b815250878787878787848487836200009f6000801b836200023b60201b60201c565b8051600180546001600160a01b03199081166001600160a01b039384161790915560208084015160028054841691851691909117905560408401516003805484169185169190911790556060840151600480548416918516919091179055608084015160078054841691851691909117905560a084015160088054909316931692909217905560c082015160095560e090910151600a5583516200014a9250600b91850190620003db565b5080516200016090600c906020840190620003db565b5062000172915060009050876200023b565b825162000187906013906020860190620003db565b5081601460006101000a8154816001600160a01b0302191690836001600160a01b03160217905550505050505050620001d0601b83620002dc60201b62001c1a1790919060201c565b61012052620001ed81601c620002dc602090811b62001c1a17901c565b61014052815160208084019190912060e052815190820120610100524660a0526200021762000330565b6080525050503060601b60c05250506001601f555062000932975050505050505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620002d8576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620002973390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000602083511015620002fc57620002f4836200038c565b90506200032a565b826200031383620003d860201b62001c511760201c565b8151620003249260200190620003db565b5060ff90505b92915050565b60e0516101005160405160009262000371927f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f9246903090602001620007f3565b60405160208183030381529060405280519060200120905090565b600080829050601f81511115620003c3578260405163305a27a960e01b8152600401620003ba919062000882565b60405180910390fd5b8051620003d082620008a7565b179392505050565b90565b828054620003e99062000901565b90600052602060002090601f0160209004810192826200040d576000855562000458565b82601f106200042857805160ff191683800117855562000458565b8280016001018555821562000458579182015b82811115620004585782518255916020019190600101906200043b565b50620004669291506200046a565b5090565b5b808211156200046657600081556001016200046b565b60006001600160a01b0382166200032a565b6200049e8162000481565b8114620004aa57600080fd5b50565b80516200032a8162000493565b601f01601f191690565b634e487b7160e01b600052604160045260246000fd5b620004e582620004ba565b81018181106001600160401b0382111715620005055762000505620004c4565b6040525050565b60006200051860405190565b9050620005268282620004da565b919050565b60006001600160401b03821115620005475762000547620004c4565b6200055282620004ba565b60200192915050565b60005b83811015620005785781810151838201526020016200055e565b8381111562000588576000848401525b50505050565b6000620005a56200059f846200052b565b6200050c565b905082815260208101848484011115620005c257620005c2600080fd5b620005cf8482856200055b565b509392505050565b600082601f830112620005ed57620005ed600080fd5b8151620005ff8482602086016200058e565b949350505050565b806200049e565b80516200032a8162000607565b60006101008284031215620006335762000633600080fd5b620006406101006200050c565b90506000620006508484620004ad565b82525060206200066384848301620004ad565b60208301525060406200067984828501620004ad565b60408301525060606200068f84828501620004ad565b6060830152506080620006a584828501620004ad565b60808301525060a0620006bb84828501620004ad565b60a08301525060c0620006d1848285016200060e565b60c08301525060e0620006e7848285016200060e565b60e08301525092915050565b6000806000806000806101a08789031215620007125762000712600080fd5b6000620007208989620004ad565b96505060208701516001600160401b03811115620007415762000741600080fd5b6200074f89828a01620005d7565b95505060408701516001600160401b03811115620007705762000770600080fd5b6200077e89828a01620005d7565b94505060608701516001600160401b038111156200079f576200079f600080fd5b620007ad89828a01620005d7565b9350506080620007c089828a01620004ad565b92505060a0620007d389828a016200061b565b9150509295509295509295565b805b82525050565b620007e28162000481565b60a08101620008038288620007e0565b620008126020830187620007e0565b620008216040830186620007e0565b620008306060830185620007e0565b6200083f6080830184620007e8565b9695505050505050565b600062000854825190565b8084526020840193506200086d8185602086016200055b565b6200087881620004ba565b9093019392505050565b6020808252810162000895818462000849565b9392505050565b60006200032a825190565b6000620008b2825190565b60208301620008c1816200089c565b92506020821015620008e457620008df600019836020036008021b90565b831692505b5050919050565b634e487b7160e01b600052602260045260246000fd5b6002810460018216806200091657607f821691505b602082108114156200092c576200092c620008eb565b50919050565b60805160a05160c05160601c60e05161010051610120516101405161451762000990600039600061153c01526000611511015260006130a40152600061308301526000612ce901526000612d1301526000612d3d01526145176000f3fe6080604052600436106102c75760003560e01c8062bdfde5146102cc57806301ffc9a7146102ee5780630513c3e91461032457806306fdde0314610351578063102005191461037357806313150b481461039557806317fcb39b146103b857806318160ddd146103d85780631830e881146103ed5780631f37c1241461040357806320d558aa14610419578063217a2c7b1461042c57806323af4e171461044c578063248a9ca31461046c57806326defa731461048c578063289c686b146104ac5780632f2ff15d146104cc5780632f745c59146104ec57806336568abe1461050c57806339a51be51461052c5780633ad3033e1461054c5780633c72ae701461056c578063412736571461058c57806341c04d5e146105ac57806342966c68146105ce57806346877b1a146105ee5780634962a1581461060e5780634f558e791461062e5780634f6ccce71461064e5780636352211e1461066e5780636817c76c1461068e57806370a08231146106a4578063719d0f2b146106c457806376ad1997146106e4578063776d1a541461070457806377bed5ed1461071a5780637a0d1646146107475780637ad09dff146107775780637db8cb681461078a57806384b0196e146107aa5780638d018461146107d25780638ec9c93b146107f257806391223d691461080857806391d148541461083857806394a665e91461085857806395d89b4114610878578063992642e51461088d57806399b589cb146108ad578063a217fddf146108cd578063a4983421146108e2578063b97d6b2314610902578063c1177d1914610918578063c31c9c0714610938578063c86aadb614610958578063c87b56dd14610978578063d544e01014610998578063d547741f146109b8578063d6e6eb9f146109d8578063da058ae3146109ee578063eb93e85514610a0e578063ebda439614610a3c578063f4a0a52814610a5c578063fd48ac8314610a7c575b600080fd5b3480156102d857600080fd5b506102ec6102e736600461365d565b610a9c565b005b3480156102fa57600080fd5b5061030e610309366004613699565b610ad0565b60405161031b91906136c4565b60405180910390f35b34801561033057600080fd5b5061034461033f36600461365d565b610ae1565b60405161031b91906136f2565b34801561035d57600080fd5b50610366610b0b565b60405161031b919061376a565b34801561037f57600080fd5b50610388610b9d565b60405161031b91906137d8565b3480156103a157600080fd5b506103ab601a5481565b60405161031b91906137ef565b3480156103c457600080fd5b50600254610344906001600160a01b031681565b3480156103e457600080fd5b506011546103ab565b3480156103f957600080fd5b506103ab60165481565b34801561040f57600080fd5b506103ab60175481565b6103ab61042736600461385b565b610bfe565b34801561043857600080fd5b506103ab6104473660046138f0565b610d36565b34801561045857600080fd5b506102ec61046736600461392d565b610d49565b34801561047857600080fd5b506103ab61048736600461365d565b610da6565b34801561049857600080fd5b506102ec6104a736600461392d565b610dbb565b3480156104b857600080fd5b506102ec6104c736600461365d565b610e8b565b3480156104d857600080fd5b506102ec6104e736600461394e565b610efe565b3480156104f857600080fd5b506103ab6105073660046138f0565b610f1f565b34801561051857600080fd5b506102ec61052736600461394e565b610f71565b34801561053857600080fd5b50600854610344906001600160a01b031681565b34801561055857600080fd5b506102ec61056736600461392d565b610fa7565b34801561057857600080fd5b506102ec61058736600461365d565b611004565b34801561059857600080fd5b506102ec6105a736600461392d565b611077565b3480156105b857600080fd5b506103ab6000805160206144c283398151915281565b3480156105da57600080fd5b506102ec6105e936600461365d565b6110d4565b3480156105fa57600080fd5b506102ec61060936600461392d565b611106565b34801561061a57600080fd5b506102ec61062936600461365d565b611163565b34801561063a57600080fd5b5061030e61064936600461365d565b6111d6565b34801561065a57600080fd5b506103ab61066936600461365d565b6111e1565b34801561067a57600080fd5b5061034461068936600461365d565b61122f565b34801561069a57600080fd5b506103ab60155481565b3480156106b057600080fd5b506103ab6106bf36600461392d565b611264565b3480156106d057600080fd5b506103ab6106df36600461392d565b6112a8565b3480156106f057600080fd5b506102ec6106ff36600461392d565b6113a8565b34801561071057600080fd5b506103ab60185481565b34801561072657600080fd5b5060145461073a906001600160a01b031681565b60405161031b91906139b6565b34801561075357600080fd5b5061030e61076236600461392d565b60056020526000908152604090205460ff1681565b6103ab6107853660046139c4565b611405565b34801561079657600080fd5b506102ec6107a536600461365d565b611490565b3480156107b657600080fd5b506107bf611503565b60405161031b9796959493929190613a57565b3480156107de57600080fd5b506102ec6107ed36600461392d565b61158c565b3480156107fe57600080fd5b506103ab60095481565b34801561081457600080fd5b5061030e61082336600461392d565b601e6020526000908152604090205460ff1681565b34801561084457600080fd5b5061030e61085336600461394e565b611628565b34801561086457600080fd5b506102ec61087336600461392d565b611651565b34801561088457600080fd5b506103666117be565b34801561089957600080fd5b50600354610344906001600160a01b031681565b3480156108b957600080fd5b50600754610344906001600160a01b031681565b3480156108d957600080fd5b506103ab600081565b3480156108ee57600080fd5b506102ec6108fd36600461365d565b6117cd565b34801561090e57600080fd5b506103ab60195481565b34801561092457600080fd5b506103ab61093336600461365d565b611801565b34801561094457600080fd5b50600154610344906001600160a01b031681565b34801561096457600080fd5b506102ec61097336600461392d565b6118b9565b34801561098457600080fd5b5061036661099336600461365d565b611965565b3480156109a457600080fd5b506102ec6109b336600461392d565b6119cb565b3480156109c457600080fd5b506102ec6109d336600461394e565b611a99565b3480156109e457600080fd5b506103ab600a5481565b3480156109fa57600080fd5b506102ec610a0936600461392d565b611ab5565b348015610a1a57600080fd5b50610a2e610a2936600461392d565b611b12565b60405161031b929190613ac6565b348015610a4857600080fd5b50600454610344906001600160a01b031681565b348015610a6857600080fd5b506102ec610a7736600461365d565b611b34565b348015610a8857600080fd5b506102ec610a9736600461365d565b611ba7565b6000610aa781611c54565b600954821415610aca5760405163c23f6ccb60e01b815260040160405180910390fd5b50600955565b6000610adb82611c5e565b92915050565b60068181548110610af157600080fd5b6000918252602090912001546001600160a01b0316905081565b6060600b8054610b1a90613af7565b80601f0160208091040260200160405190810160405280929190818152602001828054610b4690613af7565b8015610b935780601f10610b6857610100808354040283529160200191610b93565b820191906000526020600020905b815481529060010190602001808311610b7657829003601f168201915b5050505050905090565b60606006805480602002602001604051908101604052809291908181526020018280548015610b9357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610bd7575050505050905090565b6000610c08611c83565b6014546040516331a9108f60e11b81526000916001600160a01b031690636352211e90610c39908a906004016137ef565b60206040518083038186803b158015610c5157600080fd5b505afa158015610c65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c899190613b2f565b90506001600160a01b0381163314610cc057335b60405163060296c760e31b8152600401610cb791906136f2565b60405180910390fd5b6000610cda8983610cd28b8b8b611cad565b8a8989611d0c565b90507fdc7a913fb88ef84b4edaae2c1ccc524475744905088d5c1362bab12c676f9e97818989898d601554604051610d1796959493929190613b50565b60405180910390a1915050610d2c6001601f55565b9695505050505050565b6000610d428383611d9d565b9392505050565b6000610d5481611c54565b6003546001600160a01b0383811691161415610d835760405163c23f6ccb60e01b815260040160405180910390fd5b50600380546001600160a01b0319166001600160a01b0392909216919091179055565b60009081526020819052604090206001015490565b610dc6600033611628565b158015610de85750610de66000805160206144c283398151915233611628565b155b15610e06576040516326f0f48160e01b815260040160405180910390fd5b6001600160a01b038116610e2d5760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b0381166000908152601e602052604090205460ff1615610e675760405163f411c32760e01b815260040160405180910390fd5b6001600160a01b03166000908152601e60205260409020805460ff19166001179055565b610e96600033611628565b158015610eb85750610eb66000805160206144c283398151915233611628565b155b15610ed6576040516326f0f48160e01b815260040160405180910390fd5b806017541415610ef95760405163c23f6ccb60e01b815260040160405180910390fd5b601755565b610f0782610da6565b610f1081611c54565b610f1a8383611e0a565b505050565b6000610f2a83611264565b8210610f485760405162461bcd60e51b8152600401610cb790613be7565b506001600160a01b03919091166000908152600f60209081526040808320938352929052205490565b6001600160a01b0381163314610f995760405162461bcd60e51b8152600401610cb790613c43565b610fa38282611e8e565b5050565b6000610fb281611c54565b6014546001600160a01b0383811691161415610fe15760405163c23f6ccb60e01b815260040160405180910390fd5b50601480546001600160a01b0319166001600160a01b0392909216919091179055565b61100f600033611628565b158015611031575061102f6000805160206144c283398151915233611628565b155b1561104f576040516326f0f48160e01b815260040160405180910390fd5b8060185414156110725760405163c23f6ccb60e01b815260040160405180910390fd5b601855565b600061108281611c54565b6001546001600160a01b03838116911614156110b15760405163c23f6ccb60e01b815260040160405180910390fd5b50600180546001600160a01b0319166001600160a01b0392909216919091179055565b6110de3382611ef3565b6110fa5760405162461bcd60e51b8152600401610cb790613c8a565b61110381611f16565b50565b600061111181611c54565b6008546001600160a01b03838116911614156111405760405163c23f6ccb60e01b815260040160405180910390fd5b50600880546001600160a01b0319166001600160a01b0392909216919091179055565b61116e600033611628565b158015611190575061118e6000805160206144c283398151915233611628565b155b156111ae576040516326f0f48160e01b815260040160405180910390fd5b8060165414156111d15760405163c23f6ccb60e01b815260040160405180910390fd5b601655565b6000610adb82611fb0565b60006111ec60115490565b821061120a5760405162461bcd60e51b8152600401610cb790613ce0565b6011828154811061121d5761121d613cf0565b90600052602060002001549050919050565b6000818152600d60205260408120546001600160a01b031680610adb5760405162461bcd60e51b8152600401610cb790613d32565b60006001600160a01b03821661128c5760405162461bcd60e51b8152600401610cb790613d85565b506001600160a01b03166000908152600e602052604090205490565b600060155460001480156112bc5750601654155b156112c957506000919050565b6004546001600160a01b0383811691161480156112fe57506001600160a01b03821660009081526005602052604090205460ff165b801561130c57506000601654115b1561131957505060165490565b6003546001600160a01b03838116911614801561134e57506001600160a01b03821660009081526005602052604090205460ff165b1561135b57505060155490565b6001600160a01b03821660009081526005602052604090205460ff161561138857610adb82601554611fcd565b81604051630ac29ab760e31b8152600401610cb791906136f2565b919050565b60006113b381611c54565b6004546001600160a01b03838116911614156113e25760405163c23f6ccb60e01b815260040160405180910390fd5b50600480546001600160a01b0319166001600160a01b0392909216919091179055565b600061140f611c83565b6001600160a01b03861633146114255733610c9d565b600061143f88886114378a8a8a612160565b898888611d0c565b90507f7650948236619e679e44bf502d527ec950d1d58336e6babf229f483c57d04672818888888c60155460405161147c96959493929190613d95565b60405180910390a19050610d2c6001601f55565b61149b600033611628565b1580156114bd57506114bb6000805160206144c283398151915233611628565b155b156114db576040516326f0f48160e01b815260040160405180910390fd5b80601a5414156114fe5760405163c23f6ccb60e01b815260040160405180910390fd5b601a55565b6000606080828080836115377f0000000000000000000000000000000000000000000000000000000000000000601b61219c565b6115627f0000000000000000000000000000000000000000000000000000000000000000601c61219c565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b611597600033611628565b1580156115b957506115b76000805160206144c283398151915233611628565b155b156115d7576040516326f0f48160e01b815260040160405180910390fd5b6007546001600160a01b03828116911614156116065760405163c23f6ccb60e01b815260040160405180910390fd5b600780546001600160a01b0319166001600160a01b0392909216919091179055565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600061165c81611c54565b6001600160a01b03821660009081526005602052604090205460ff1661169757816040516318317bd560e01b8152600401610cb791906136f2565b6001600160a01b0382166000908152600560205260408120805460ff191690555b600654811015610f1a57826001600160a01b0316600682815481106116df576116df613cf0565b6000918252602090912001546001600160a01b031614156117ac576006805461170a90600190613ddc565b8154811061171a5761171a613cf0565b600091825260209091200154600680546001600160a01b03909216918390811061174657611746613cf0565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600680548061178557611785613df3565b600082815260209020810160001990810180546001600160a01b0319169055019055505050565b806117b681613e09565b9150506116b8565b6060600c8054610b1a90613af7565b60006117d881611c54565b600a548214156117fb5760405163c23f6ccb60e01b815260040160405180910390fd5b50600a55565b6014546000906001600160a01b031661182d57604051630d7fe67b60e41b815260040160405180910390fd5b60006118388361122f565b60145460405163294cdf0d60e01b81529192506001600160a01b03169063294cdf0d906118699084906004016136f2565b60206040518083038186803b15801561188157600080fd5b505afa158015611895573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d429190613e2f565b60006118c481611c54565b6001600160a01b03821660009081526005602052604090205460ff16156118fe5760405163f411c32760e01b815260040160405180910390fd5b506001600160a01b03166000818152600560205260408120805460ff191660019081179091556006805491820181559091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b0319169091179055565b606061197082612240565b600061197a612265565b9050600081511161199a5760405180602001604052806000815250610d42565b806119a484612274565b6040516020016119b5929190613e72565b6040516020818303038152906040529392505050565b6119d6600033611628565b1580156119f857506119f66000805160206144c283398151915233611628565b155b15611a16576040516326f0f48160e01b815260040160405180910390fd5b6001600160a01b038116611a3d5760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b0381166000908152601e602052604090205460ff16611a7857806040516324b1f80560e21b8152600401610cb791906136f2565b6001600160a01b03166000908152601e60205260409020805460ff19169055565b611aa282610da6565b611aab81611c54565b610f1a8383611e8e565b6000611ac081611c54565b6002546001600160a01b0383811691161415611aef5760405163c23f6ccb60e01b815260040160405180910390fd5b50600280546001600160a01b0319166001600160a01b0392909216919091179055565b600080611b1e836112a8565b915081611b2b8484611d9d565b91509150915091565b611b3f600033611628565b158015611b615750611b5f6000805160206144c283398151915233611628565b155b15611b7f576040516326f0f48160e01b815260040160405180910390fd5b806015541415611ba25760405163c23f6ccb60e01b815260040160405180910390fd5b601555565b611bb2600033611628565b158015611bd45750611bd26000805160206144c283398151915233611628565b155b15611bf2576040516326f0f48160e01b815260040160405180910390fd5b806019541415611c155760405163c23f6ccb60e01b815260040160405180910390fd5b601955565b6000602083511015611c3657611c2f83612310565b9050610adb565b82828151611c4792602001906135ac565b5060ff9050610adb565b90565b611103813361234e565b60006001600160e01b0319821663780e9d6360e01b1480610adb5750610adb826123a7565b6002601f541415611ca65760405162461bcd60e51b8152600401610cb790613ed4565b6002601f55565b6000611d047f94b1435871abae349525e55cb9a064ad0eac0fab877fee876ed90f72fcf33cce858585604051602001611ce99493929190613ee4565b604051602081830303815290604052805190602001206123e7565b949350505050565b6000611d508584848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250899250612414915050565b600080611d5c89611b12565b91509150611d6b898383612495565b6000611d76601d5490565b9050611d86601d80546001019055565b611d90898261284c565b9998505050505050505050565b600954600090819015611dd8576003546001600160a01b0385811691161415611dc95750600954611dd8565b611dd584600954611fcd565b90505b600a5415610d4257611d04611e036064611dfd600a548761292890919063ffffffff16565b90612934565b8290612940565b611e148282611628565b610fa3576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055611e4a3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611e988282611628565b15610fa3576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b600080611eff8361122f565b6001600160a01b0385811691161491505092915050565b6000611f218261122f565b9050611f2f8160008461294c565b6001600160a01b0381166000908152600e60205260408120805460019290611f58908490613ddc565b90915550506000828152600d602052604080822080546001600160a01b03191690555183916001600160a01b038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59190a35050565b6000908152600d60205260409020546001600160a01b0316151590565b600081600081118015611fe957506001546001600160a01b0316155b156120075760405163fca2174f60e01b815260040160405180910390fd5b60008111801561202057506002546001600160a01b0316155b1561203e5760405163fca2174f60e01b815260040160405180910390fd5b60008111801561205757506003546001600160a01b0316155b156120755760405163fca2174f60e01b815260040160405180910390fd5b60008111801561208e57506007546001600160a01b0316155b156120ac5760405163fca2174f60e01b815260040160405180910390fd5b6001600160a01b03841660009081526005602052604090205460ff1615806120e157506003546001600160a01b038581169116145b15612101578360405163961c9a4f60e01b8152600401610cb791906136f2565b8261210f5760009150612159565b6001600160a01b0384166121415760025460035461213a916001600160a01b03908116911685612957565b9150612159565b60035461213a9085906001600160a01b031685612957565b5092915050565b6000611d047f885d61cd569c3c85a110715a0d188c45590cf3f8a77e71714f4f0211ead7ac8c858585604051602001611ce99493929190613f22565b606060ff83146121af57611c2f83612a15565b8180546121bb90613af7565b80601f01602080910402602001604051908101604052809291908181526020018280546121e790613af7565b80156122345780601f1061220957610100808354040283529160200191612234565b820191906000526020600020905b81548152906001019060200180831161221757829003601f168201915b50505050509050610adb565b61224981611fb0565b6111035760405162461bcd60e51b8152600401610cb790613d32565b606060138054610b1a90613af7565b6060600061228183612a54565b60010190506000816001600160401b038111156122a0576122a0613db0565b6040519080825280601f01601f1916602001820160405280156122ca576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461230357612308565b6122d4565b509392505050565b600080829050601f8151111561233b578260405163305a27a960e01b8152600401610cb7919061376a565b805161234682613f5d565b179392505050565b6123588282611628565b610fa35761236581612b2a565b612370836020612b3c565b604051602001612381929190613f9c565b60408051601f198184030181529082905262461bcd60e51b8252610cb79160040161376a565b60006001600160e01b031982166313f2a32f60e01b14806123d857506001600160e01b03198216635b5e139f60e01b145b80610adb5750610adb82612ca7565b6000610adb6123f4612cdc565b8360405161190160f01b8152600281019290925260228201526042902090565b60006124208484612d6c565b9050816001600160a01b0316816001600160a01b03161461245457604051638baa579f60e01b815260040160405180910390fd5b6001600160a01b0381166000908152601e602052604090205460ff1661248f5780604051634a0bfec160e01b8152600401610cb791906136f2565b50505050565b61249f8282612940565b6000811180156124b857506001546001600160a01b0316155b156124d65760405163fca2174f60e01b815260040160405180910390fd5b6000811180156124ef57506002546001600160a01b0316155b1561250d5760405163fca2174f60e01b815260040160405180910390fd5b60008111801561252657506003546001600160a01b0316155b156125445760405163fca2174f60e01b815260040160405180910390fd5b60008111801561255d57506007546001600160a01b0316155b1561257b5760405163fca2174f60e01b815260040160405180910390fd5b82158015612587575081155b156125915761248f565b6000821180156125aa57506008546001600160a01b0316155b156125c85760405163910af6f560e01b815260040160405180910390fd5b6001600160a01b03841660009081526005602052604090205460ff166126035783604051630ac29ab760e31b8152600401610cb791906136f2565b6001600160a01b0384166128085761261b8383612940565b3410156126465761262c8383612940565b60405163091a6d0f60e01b8152600401610cb791906137ef565b82156126d0576007546040516000916001600160a01b031690859061266a90613fee565b60006040518083038185875af1925050503d80600081146126a7576040519150601f19603f3d011682016040523d82523d6000602084013e6126ac565b606091505b50509050806126ce576040516312171d8360e31b815260040160405180910390fd5b505b811561275a576008546040516000916001600160a01b03169084906126f490613fee565b60006040518083038185875af1925050503d8060008114612731576040519150601f19603f3d011682016040523d82523d6000602084013e612736565b606091505b5050905080612758576040516312171d8360e31b815260040160405180910390fd5b505b6127648383612940565b34111561280357600061278161277a8585612940565b3490612d88565b90506000336001600160a01b03168260405161279c90613fee565b60006040518083038185875af1925050503d80600081146127d9576040519150601f19603f3d011682016040523d82523d6000602084013e6127de565b606091505b505090508061280057604051633c31275160e21b815260040160405180910390fd5b50505b61248f565b821561282a5760075461282a906001600160a01b038681169133911686612d94565b811561248f5760085461248f906001600160a01b038681169133911685612d94565b6001600160a01b0382166128725760405162461bcd60e51b8152600401610cb79061402a565b61287b81611fb0565b156128985760405162461bcd60e51b8152600401610cb79061406a565b6128a46000838361294c565b6001600160a01b0382166000908152600e602052604081208054600192906128cd90849061407a565b90915550506000818152600d602052604080822080546001600160a01b0319166001600160a01b038616908117909155905183927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688591a35050565b6000610d428284614092565b6000610d4282846140b1565b6000610d42828461407a565b610f1a838383612dec565b60006060806129668686612ea4565b6001546040516307c0329d60e21b81529192506001600160a01b031690631f00ca749061299990879085906004016140c5565b60006040518083038186803b1580156129b157600080fd5b505afa1580156129c5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526129ed91908101906141d0565b915081600081518110612a0257612a02613cf0565b6020026020010151925050509392505050565b60606000612a2283613036565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310612a935772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6904ee2d6d415b85acef8160201b8310612abd576904ee2d6d415b85acef8160201b830492506020015b662386f26fc100008310612adb57662386f26fc10000830492506010015b6305f5e1008310612af3576305f5e100830492506008015b6127108310612b0757612710830492506004015b60648310612b19576064830492506002015b600a8310610adb5760010192915050565b6060610adb6001600160a01b03831660145b60606000612b4b836002614092565b612b5690600261407a565b6001600160401b03811115612b6d57612b6d613db0565b6040519080825280601f01601f191660200182016040528015612b97576020820181803683370190505b509050600360fc1b81600081518110612bb257612bb2613cf0565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612be157612be1613cf0565b60200101906001600160f81b031916908160001a9053506000612c05846002614092565b612c1090600161407a565b90505b6001811115612c88576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612c4457612c44613cf0565b1a60f81b828281518110612c5a57612c5a613cf0565b60200101906001600160f81b031916908160001a90535060049490941c93612c818161420a565b9050612c13565b508315610d425760405162461bcd60e51b8152600401610cb790614253565b60006001600160e01b03198216637965db0b60e01b1480610adb57506301ffc9a760e01b6001600160e01b0319831614610adb565b6000306001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016148015612d3557507f000000000000000000000000000000000000000000000000000000000000000046145b15612d5f57507f000000000000000000000000000000000000000000000000000000000000000090565b612d6761305e565b905090565b6000806000612d7b85856130f4565b915091506123088161313a565b6000610d428284613ddc565b61248f846323b872dd60e01b858585604051602401612db593929190614263565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526131ed565b6001600160a01b038316612e4757612e4281601180546000838152601260205260408120829055600182018355919091527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c680155565b612e6a565b816001600160a01b0316836001600160a01b031614612e6a57612e6a838261327f565b6001600160a01b038216612e8157610f1a8161331c565b826001600160a01b0316826001600160a01b031614610f1a57610f1a82826133cb565b6002546060906001600160a01b0384811691161480612ed057506002546001600160a01b038381169116145b15612f9a57604080516002808252606082018352600092602083019080368337019050506002549091506001600160a01b03858116911614612f125783612f1f565b6002546001600160a01b03165b81600081518110612f3257612f32613cf0565b6001600160a01b039283166020918202929092010152600254848216911614612f5b5782612f68565b6002546001600160a01b03165b81600181518110612f7b57612f7b613cf0565b6001600160a01b03909216602092830291909101909101529050610adb565b60408051600380825260808201909252600091602082016060803683370190505090508381600081518110612fd157612fd1613cf0565b6001600160a01b03928316602091820292909201015260025482519116908290600190811061300257613002613cf0565b60200260200101906001600160a01b031690816001600160a01b0316815250508281600281518110612f7b57612f7b613cf0565b600060ff8216601f811115610adb57604051632cd44ac360e21b815260040160405180910390fd5b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000046306040516020016130d995949392919061428b565b60405160208183030381529060405280519060200120905090565b60008082516041141561312b5760208301516040840151606085015160001a61311f8782858561340f565b94509450505050613133565b506000905060025b9250929050565b600081600481111561314e5761314e6142cd565b14156131575750565b600181600481111561316b5761316b6142cd565b14156131895760405162461bcd60e51b8152600401610cb790614312565b600281600481111561319d5761319d6142cd565b14156131bb5760405162461bcd60e51b8152600401610cb790614356565b60038160048111156131cf576131cf6142cd565b14156111035760405162461bcd60e51b8152600401610cb7906143a5565b6000613242826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166134bc9092919063ffffffff16565b905080516000148061326357508080602001905181019061326391906143c8565b610f1a5760405162461bcd60e51b8152600401610cb790614430565b6000600161328c84611264565b6132969190613ddc565b6000838152601060205260409020549091508082146132e9576001600160a01b0384166000908152600f602090815260408083208584528252808320548484528184208190558352601090915290208190555b5060009182526010602090815260408084208490556001600160a01b039094168352600f81528383209183525290812055565b60115460009061332e90600190613ddc565b6000838152601260205260408120546011805493945090928490811061335657613356613cf0565b90600052602060002001549050806011838154811061337757613377613cf0565b60009182526020808320909101929092558281526012909152604080822084905585825281205560118054806133af576133af613df3565b6001900381819060005260206000200160009055905550505050565b60006133d683611264565b6001600160a01b039093166000908152600f60209081526040808320868452825280832085905593825260109052919091209190915550565b6000806fa2a8918ca85bafe22016d0b997e4df60600160ff1b0383111561343c57506000905060036134b3565b6000600187878787604051600081526020016040526040516134619493929190614449565b6020604051602081039080840390855afa158015613483573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166134ac576000600192509250506134b3565b9150600090505b94509492505050565b6060611d04848460008585600080866001600160a01b031685876040516134e39190614471565b60006040518083038185875af1925050503d8060008114613520576040519150601f19603f3d011682016040523d82523d6000602084013e613525565b606091505b509150915061353687838387613541565b979650505050505050565b6060831561357d578251613576576001600160a01b0385163b6135765760405162461bcd60e51b8152600401610cb7906144b1565b5081611d04565b611d0483838151156135925781518083602001fd5b8060405162461bcd60e51b8152600401610cb7919061376a565b8280546135b890613af7565b90600052602060002090601f0160209004810192826135da5760008555613620565b82601f106135f357805160ff1916838001178555613620565b82800160010185558215613620579182015b82811115613620578251825591602001919060010190613605565b5061362c929150613630565b5090565b5b8082111561362c5760008155600101613631565b805b811461110357600080fd5b8035610adb81613645565b60006020828403121561367257613672600080fd5b6000611d048484613652565b6001600160e01b03198116613647565b8035610adb8161367e565b6000602082840312156136ae576136ae600080fd5b6000611d04848461368e565b8015155b82525050565b60208101610adb82846136ba565b6001600160a01b031690565b6000610adb826136d2565b6136be816136de565b60208101610adb82846136e9565b60005b8381101561371b578181015183820152602001613703565b8381111561248f5750506000910152565b601f01601f191690565b6000613740825190565b808452602084019350613757818560208601613700565b6137608161372c565b9093019392505050565b60208082528101610d428184613736565b600061378783836136e9565b505060200190565b6000613799825190565b80845260209384019383018060005b838110156137cd5781516137bc888261377b565b9750602083019250506001016137a8565b509495945050505050565b60208082528101610d42818461378f565b806136be565b60208101610adb82846137e9565b613647816136de565b8035610adb816137fd565b60008083601f84011261382657613826600080fd5b5081356001600160401b0381111561384057613840600080fd5b60208301915083600182028301111561313357613133600080fd5b60008060008060008060a0878903121561387757613877600080fd5b60006138838989613806565b965050602061389489828a01613652565b95505060406138a589828a01613806565b94505060606138b689828a01613652565b93505060808701356001600160401b038111156138d5576138d5600080fd5b6138e189828a01613811565b92509250509295509295509295565b6000806040838503121561390657613906600080fd5b60006139128585613806565b925050602061392385828601613652565b9150509250929050565b60006020828403121561394257613942600080fd5b6000611d048484613806565b6000806040838503121561396457613964600080fd5b60006139708585613652565b925050602061392385828601613806565b6000610adb613992611c51846136d2565b6136d2565b6000610adb82613981565b6000610adb82613997565b6136be816139a2565b60208101610adb82846139ad565b60008060008060008060a087890312156139e0576139e0600080fd5b60006139ec8989613806565b965050602061389489828a01613806565b6001600160f81b031981166136be565b600061378783836137e9565b6000613a23825190565b80845260209384019383018060005b838110156137cd578151613a468882613a0d565b975060208301925050600101613a32565b60e08101613a65828a6139fd565b8181036020830152613a778189613736565b90508181036040830152613a8b8188613736565b9050613a9a60608301876137e9565b613aa760808301866136e9565b613ab460a08301856137e9565b81810360c0830152611d908184613a19565b60408101613ad482856137e9565b610d4260208301846137e9565b634e487b7160e01b600052602260045260246000fd5b600281046001821680613b0b57607f821691505b60208210811415613b1e57613b1e613ae1565b50919050565b8051610adb816137fd565b600060208284031215613b4457613b44600080fd5b6000611d048484613b24565b60c08101613b5e82896137e9565b613b6b60208301886137e9565b613b7860408301876136e9565b613b8560608301866137e9565b613b9260808301856136e9565b61353660a08301846137e9565b602881526000602082017f534254456e756d657261626c653a206f776e657220696e646578206f7574206f8152676620626f756e647360c01b602082015291505b5060400190565b60208082528101610adb81613b9f565b602f81526000602082017f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636581526e103937b632b9903337b91039b2b63360891b60208201529150613be0565b60208082528101610adb81613bf7565b601e81526000602082017f5342543a2063616c6c6572206973206e6f7420746f6b656e206f776e65720000815291505b5060200190565b60208082528101610adb81613c53565b602981526000602082017f534254456e756d657261626c653a20676c6f62616c20696e646578206f7574208152686f6620626f756e647360b81b60208201529150613be0565b60208082528101610adb81613c9a565b634e487b7160e01b600052603260045260246000fd5b601581526000602082017414d0950e881a5b9d985b1a59081d1bdad95b881251605a1b81529150613c83565b60208082528101610adb81613d06565b602681526000602082017f5342543a2061646472657373207a65726f206973206e6f7420612076616c69648152651037bbb732b960d11b60208201529150613be0565b60208082528101610adb81613d42565b60c08101613da382896137e9565b613b6b60208301886136e9565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082821015613dee57613dee613dc6565b500390565b634e487b7160e01b600052603160045260246000fd5b6000600019821415613e1d57613e1d613dc6565b5060010190565b8051610adb81613645565b600060208284031215613e4457613e44600080fd5b6000611d048484613e24565b6000613e5a825190565b613e68818560208601613700565b9290920192915050565b6000613e7e8285613e50565b9150613e8a8284613e50565b64173539b7b760d91b8152915060058201611d04565b601f81526000602082017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081529150613c83565b60208082528101610adb81613ea0565b60808101613ef282876137e9565b613eff60208301866137e9565b613f0c60408301856136e9565b613f1960608301846137e9565b95945050505050565b60808101613f3082876137e9565b613eff60208301866136e9565b634e487b7160e01b600052601260045260246000fd5b6000610adb825190565b6000613f67825190565b60208301613f7481613f53565b92506020821015613f9557613f90600019836020036008021b90565b831692505b5050919050565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b81526017016000613fc88285613e50565b7001034b99036b4b9b9b4b733903937b6329607d1b81526011019150611d048284613e50565b600081610adb565b601d81526000602082017f5342543a206d696e7420746f20746865207a65726f206164647265737300000081529150613c83565b60208082528101610adb81613ff6565b601981526000602082017814d0950e881d1bdad95b88185b1c9958591e481b5a5b9d1959603a1b81529150613c83565b60208082528101610adb8161403a565b6000821982111561408d5761408d613dc6565b500190565b60008160001904831182151516156140ac576140ac613dc6565b500290565b6000826140c0576140c0613f3d565b500490565b604081016140d382856137e9565b8181036020830152611d04818461378f565b6140ee8261372c565b81018181106001600160401b038211171561410b5761410b613db0565b6040525050565b600061411d60405190565b90506113a382826140e5565b60006001600160401b0382111561414257614142613db0565b5060209081020190565b600061415f61415a84614129565b614112565b8381529050602080820190840283018581111561417e5761417e600080fd5b835b818110156141a257806141938882613e24565b84525060209283019201614180565b5050509392505050565b600082601f8301126141c0576141c0600080fd5b8151611d0484826020860161414c565b6000602082840312156141e5576141e5600080fd5b81516001600160401b038111156141fe576141fe600080fd5b611d04848285016141ac565b60008161421957614219613dc6565b506000190190565b60208082527f537472696e67733a20686578206c656e67746820696e73756666696369656e7491019081526000613c83565b60208082528101610adb81614221565b6060810161427182866136e9565b61427e60208301856136e9565b611d0460408301846137e9565b60a0810161429982886137e9565b6142a660208301876137e9565b6142b360408301866137e9565b6142c060608301856137e9565b610d2c60808301846136e9565b634e487b7160e01b600052602160045260246000fd5b601881526000602082017745434453413a20696e76616c6964207369676e617475726560401b81529150613c83565b60208082528101610adb816142e3565b601f81526000602082017f45434453413a20696e76616c6964207369676e6174757265206c656e6774680081529150613c83565b60208082528101610adb81614322565b602281526000602082017f45434453413a20696e76616c6964207369676e6174757265202773272076616c815261756560f01b60208201529150613be0565b60208082528101610adb81614366565b801515613647565b8051610adb816143b5565b6000602082840312156143dd576143dd600080fd5b6000611d0484846143bd565b602a81526000602082017f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b60208201529150613be0565b60208082528101610adb816143e9565b60ff81166136be565b6080810161445782876137e9565b6144646020830186614440565b613f0c60408301856137e9565b6000610d428284613e50565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529150613c83565b60208082528101610adb8161447d56fe52eafc11f6f81f86878bffd31109a0d92f37506527754f00788853ff9f63b130a26469706673582212208396a993fa1feafeac325ed9cb51491f8962d6a3c6a9550b13178f9c65a7ebd164736f6c63430008080033000000000000000000000000d9f8d4359c034e1290d83b70e73e32fdd31a663b00000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000001e00000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010ed43c718714eb63d5aa57b78b54704e256024e000000000000000000000000bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c000000000000000000000000e9e7cea3dedca5984780bafc599bd69add087d5600000000000000000000000000000000000000000000000000000000000000000000000000000000000000009024b41ebaa34f7b1999665ec7cf2145455e0557000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a4d61736120477265656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064d472d3246410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002d68747470733a2f2f6d657461646174612e6d6173612e66696e616e63652f76312e302f677265656e2f6273632f00000000000000000000000000000000000000",
      "r": "0xce0b88d84a7f2b5e88303e10be7fcb683b2af88dbd1e4ca3d6a4af2c25e2621b",
      "s": "0x58b4d31e1354cdd2082293a385cdb607acf26d87df1f2df7bcf0a6c07601bf17",
      "v": 147,
      "chainId": 56
    }
  }
}