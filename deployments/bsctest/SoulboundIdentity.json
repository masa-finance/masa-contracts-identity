{
  "address": "0x1fCE0Ae50a8900f09E4A437F33E95313225Bb4b7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "baseTokenURI",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "swapRouter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "wrappedNativeToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "stableCoin",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "masaToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "projectFeeReceiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "protocolFeeReceiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "protocolFeeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "protocolFeePercent",
              "type": "uint256"
            }
          ],
          "internalType": "struct PaymentGateway.PaymentParams",
          "name": "paymentParams",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyAdded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "IdentityAlreadyCreated",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "InsufficientEthAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "paymentMethod",
          "type": "address"
        }
      ],
      "name": "InvalidPaymentMethod",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "InvalidToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "erc20token",
          "type": "address"
        }
      ],
      "name": "NonExistingErc20Token",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotLinkedToAnIdentitySBT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PaymentParamsNotSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProtocolFeeReceiverNotSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RefundFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SameValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SoulNameContractNotSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UserMustHaveProtocolOrProjectAdminRole",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROJECT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addLinkPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addLinkPriceMASA",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_paymentMethod",
          "type": "address"
        }
      ],
      "name": "disablePaymentMethod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_paymentMethod",
          "type": "address"
        }
      ],
      "name": "enablePaymentMethod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "enabledPaymentMethod",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "enabledPaymentMethods",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEnabledPaymentMethods",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExtension",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getIdentityId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "paymentMethod",
          "type": "address"
        }
      ],
      "name": "getMintPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "paymentMethod",
          "type": "address"
        }
      ],
      "name": "getMintPriceWithProtocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "protocolFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "paymentMethod",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getProtocolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSoulName",
      "outputs": [
        {
          "internalType": "contract ISoulName",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getSoulNames",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "sbtNames",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "getSoulNames",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "sbtNames",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "getTokenData",
      "outputs": [
        {
          "internalType": "string",
          "name": "sbtName",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "linked",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "identityId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expirationDate",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "isAvailable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "available",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masaToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "paymentMethod",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "yearsPeriod",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "mintIdentityWithName",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "paymentMethod",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "yearsPeriod",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "mintIdentityWithName",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintPriceMASA",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "projectFeeReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeeReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "queryLinkPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "queryLinkPriceMASA",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_addLinkPrice",
          "type": "uint256"
        }
      ],
      "name": "setAddLinkPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_addLinkPriceMASA",
          "type": "uint256"
        }
      ],
      "name": "setAddLinkPriceMASA",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_masaToken",
          "type": "address"
        }
      ],
      "name": "setMasaToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintPrice",
          "type": "uint256"
        }
      ],
      "name": "setMintPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintPriceMASA",
          "type": "uint256"
        }
      ],
      "name": "setMintPriceMASA",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_projectFeeReceiver",
          "type": "address"
        }
      ],
      "name": "setProjectFeeReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protocolFeeAmount",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFeeAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protocolFeePercent",
          "type": "uint256"
        }
      ],
      "name": "setProtocolFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_protocolFeeReceiver",
          "type": "address"
        }
      ],
      "name": "setProtocolFeeReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_queryLinkPrice",
          "type": "uint256"
        }
      ],
      "name": "setQueryLinkPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_queryLinkPriceMASA",
          "type": "uint256"
        }
      ],
      "name": "setQueryLinkPriceMASA",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISoulName",
          "name": "_soulName",
          "type": "address"
        }
      ],
      "name": "setSoulName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_soulboundIdentity",
          "type": "address"
        }
      ],
      "name": "setSoulboundIdentity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stableCoin",
          "type": "address"
        }
      ],
      "name": "setStableCoin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_swapRouter",
          "type": "address"
        }
      ],
      "name": "setSwapRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wrappedNativeToken",
          "type": "address"
        }
      ],
      "name": "setWrappedNativeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "soulName",
      "outputs": [
        {
          "internalType": "contract ISoulName",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "soulboundIdentity",
      "outputs": [
        {
          "internalType": "contract ISoulboundIdentity",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stableCoin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "tokenOfOwner",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedNativeToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x1c48496e1130a730d96edfe72e584597af0ee88cc7a57ae1abe6aac0534e52da",
  "receipt": {
    "to": null,
    "from": "0x46c9cdA3F83C5c13C767A07b6E80aEd302E40B28",
    "contractAddress": "0x1fCE0Ae50a8900f09E4A437F33E95313225Bb4b7",
    "transactionIndex": 5,
    "gasUsed": "4150240",
    "logsBloom": "0x
    "blockHash": "0x83f4b229c5d3ed706ab29408404c27d7664db0d7fa4ecdaea3a908489194c39c",
    "transactionHash": "0x1c48496e1130a730d96edfe72e584597af0ee88cc7a57ae1abe6aac0534e52da",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 30450091,
        "transactionHash": "0x1c48496e1130a730d96edfe72e584597af0ee88cc7a57ae1abe6aac0534e52da",
        "address": "0x1fCE0Ae50a8900f09E4A437F33E95313225Bb4b7",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000046c9cda3f83c5c13c767a07b6e80aed302e40b28",
          "0x00000000000000000000000046c9cda3f83c5c13c767a07b6e80aed302e40b28"
        ],
        "data": "0x",
        "logIndex": 23,
        "blockHash": "0x83f4b229c5d3ed706ab29408404c27d7664db0d7fa4ecdaea3a908489194c39c"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 30450091,
        "transactionHash": "0x1c48496e1130a730d96edfe72e584597af0ee88cc7a57ae1abe6aac0534e52da",
        "address": "0x1fCE0Ae50a8900f09E4A437F33E95313225Bb4b7",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6",
          "0x00000000000000000000000046c9cda3f83c5c13c767a07b6e80aed302e40b28",
          "0x00000000000000000000000046c9cda3f83c5c13c767a07b6e80aed302e40b28"
        ],
        "data": "0x",
        "logIndex": 24,
        "blockHash": "0x83f4b229c5d3ed706ab29408404c27d7664db0d7fa4ecdaea3a908489194c39c"
      }
    ],
    "blockNumber": 30450091,
    "cumulativeGasUsed": "5446485",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x46c9cdA3F83C5c13C767A07b6E80aEd302E40B28",
    "Masa Identity",
    "MID",
    "https://beta.metadata.masa.finance/v1.0/identity/bsctest/",
    [
      "0xD99D1c33F9fC3444f8101754aBC46c52416550D1",
      "0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd",
      "0x64544969ed7EBf5f083679233325356EbE738930",
      "0xEC5dCb5Dbf4B114C9d0F65BcCAb49EC54F6A0867",
      "0x46c9cdA3F83C5c13C767A07b6E80aEd302E40B28",
      "0x0000000000000000000000000000000000000000",
      "0",
      "0"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "e12b643433beb94768a1b1af52cafef8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseTokenURI\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wrappedNativeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableCoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"masaToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"projectFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"protocolFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"protocolFeeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFeePercent\",\"type\":\"uint256\"}],\"internalType\":\"struct PaymentGateway.PaymentParams\",\"name\":\"paymentParams\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyAdded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"IdentityAlreadyCreated\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InsufficientEthAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentMethod\",\"type\":\"address\"}],\"name\":\"InvalidPaymentMethod\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20token\",\"type\":\"address\"}],\"name\":\"NonExistingErc20Token\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotLinkedToAnIdentitySBT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PaymentParamsNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProtocolFeeReceiverNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RefundFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SameValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SoulNameContractNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UserMustHaveProtocolOrProjectAdminRole\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROJECT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLinkPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLinkPriceMASA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentMethod\",\"type\":\"address\"}],\"name\":\"disablePaymentMethod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentMethod\",\"type\":\"address\"}],\"name\":\"enablePaymentMethod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"enabledPaymentMethod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"enabledPaymentMethods\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEnabledPaymentMethods\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExtension\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getIdentityId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentMethod\",\"type\":\"address\"}],\"name\":\"getMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentMethod\",\"type\":\"address\"}],\"name\":\"getMintPriceWithProtocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentMethod\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getProtocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSoulName\",\"outputs\":[{\"internalType\":\"contract ISoulName\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getSoulNames\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"sbtNames\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"getSoulNames\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"sbtNames\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"getTokenData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"sbtName\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"linked\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"identityId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expirationDate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"isAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"available\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masaToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentMethod\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"yearsPeriod\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"mintIdentityWithName\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentMethod\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"yearsPeriod\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"mintIdentityWithName\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintPriceMASA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queryLinkPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"queryLinkPriceMASA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_addLinkPrice\",\"type\":\"uint256\"}],\"name\":\"setAddLinkPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_addLinkPriceMASA\",\"type\":\"uint256\"}],\"name\":\"setAddLinkPriceMASA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masaToken\",\"type\":\"address\"}],\"name\":\"setMasaToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintPrice\",\"type\":\"uint256\"}],\"name\":\"setMintPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintPriceMASA\",\"type\":\"uint256\"}],\"name\":\"setMintPriceMASA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_projectFeeReceiver\",\"type\":\"address\"}],\"name\":\"setProjectFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolFeeAmount\",\"type\":\"uint256\"}],\"name\":\"setProtocolFeeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolFeePercent\",\"type\":\"uint256\"}],\"name\":\"setProtocolFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocolFeeReceiver\",\"type\":\"address\"}],\"name\":\"setProtocolFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_queryLinkPrice\",\"type\":\"uint256\"}],\"name\":\"setQueryLinkPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_queryLinkPriceMASA\",\"type\":\"uint256\"}],\"name\":\"setQueryLinkPriceMASA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISoulName\",\"name\":\"_soulName\",\"type\":\"address\"}],\"name\":\"setSoulName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_soulboundIdentity\",\"type\":\"address\"}],\"name\":\"setSoulboundIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stableCoin\",\"type\":\"address\"}],\"name\":\"setStableCoin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_swapRouter\",\"type\":\"address\"}],\"name\":\"setSwapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wrappedNativeToken\",\"type\":\"address\"}],\"name\":\"setWrappedNativeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soulName\",\"outputs\":[{\"internalType\":\"contract ISoulName\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soulboundIdentity\",\"outputs\":[{\"internalType\":\"contract ISoulboundIdentity\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableCoin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokenOfOwner\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedNativeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Masa Finance\",\"details\":\"Soulbound identity, that inherits from the SBT contract.\",\"kind\":\"dev\",\"methods\":{\"balanceOf(address)\":{\"details\":\"See {ISBT-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Burns `tokenId`. See {SBT-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator.\"},\"constructor\":{\"details\":\"Creates a new soulbound identity, inheriting from the SBT contract.\",\"params\":{\"admin\":\"Administrator of the smart contract\",\"baseTokenURI\":\"Base URI of the token\",\"name\":\"Name of the token\",\"paymentParams\":\"Payment gateway params\",\"symbol\":\"Symbol of the token\"}},\"disablePaymentMethod(address)\":{\"details\":\"The caller must have the admin role to call this function\",\"params\":{\"_paymentMethod\":\"Token to remove\"}},\"enablePaymentMethod(address)\":{\"details\":\"The caller must have the admin role to call this function\",\"params\":{\"_paymentMethod\":\"New token to add\"}},\"exists(uint256)\":{\"details\":\"Returns true if the token has been minted\",\"params\":{\"tokenId\":\"Token to check\"},\"returns\":{\"_0\":\"True if the token exists\"}},\"getEnabledPaymentMethods()\":{\"details\":\"Returns the address of all available payment methods\",\"returns\":{\"_0\":\"Array of all enabled payment methods\"}},\"getExtension()\":{\"details\":\"This function returns the extension of the soul name\",\"returns\":{\"_0\":\"Extension of the soul name\"}},\"getIdentityId(uint256)\":{\"params\":{\"tokenId\":\"Id of the token\"},\"returns\":{\"_0\":\"Id of the identity\"}},\"getMintPrice(address)\":{\"details\":\"Returns current pricing for minting\",\"params\":{\"paymentMethod\":\"Address of token that user want to pay\"},\"returns\":{\"price\":\"Current price for minting in the given payment method\"}},\"getMintPriceWithProtocolFee(address)\":{\"details\":\"Returns current pricing for minting with protocol fee\",\"params\":{\"paymentMethod\":\"Address of token that user want to pay\"},\"returns\":{\"price\":\"Current price for minting in the given payment method\",\"protocolFee\":\"Current protocol fee for minting in the given payment method\"}},\"getProtocolFee(address,uint256)\":{\"details\":\"This method will calculate the protocol fee based on the payment method\",\"params\":{\"amount\":\"Price to be paid in the specified payment method\",\"paymentMethod\":\"Address of token that user want to pay\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getSoulName()\":{\"details\":\"This function returns the address of the SoulName contract linked to this identity\",\"returns\":{\"_0\":\"Address of the SoulName contract\"}},\"getSoulNames(address)\":{\"details\":\"This function queries all the identity names of the specified account\",\"params\":{\"owner\":\"Address of the owner of the identities\"},\"returns\":{\"sbtNames\":\"Array of soul names associated to the account\"}},\"getSoulNames(uint256)\":{\"details\":\"This function queries all the identity names of the specified identity Id\",\"params\":{\"tokenId\":\"TokenId of the identity\"},\"returns\":{\"sbtNames\":\"Array of soul names associated to the identity Id\"}},\"getTokenData(string)\":{\"details\":\"This function queries the information of a soul name\",\"params\":{\"name\":\"Name of the soul name\"},\"returns\":{\"active\":\"`true` if the soul name is active, `false` otherwise\",\"expirationDate\":\"Expiration date of the soul name\",\"identityId\":\"Identity id of the soul name\",\"linked\":\"`true` if the soul name is linked, `false` otherwise\",\"sbtName\":\"Soul name, in upper/lower case and extension\",\"tokenId\":\"SoulName id of the soul name\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isAvailable(string)\":{\"details\":\"This function queries if a soul name already exists and is in the available state\",\"params\":{\"name\":\"Name of the soul name\"},\"returns\":{\"available\":\"`true` if the soul name is available, `false` otherwise\"}},\"mint(address)\":{\"details\":\"The caller can only mint one identity per address\",\"params\":{\"to\":\"Address of the owner of the new identity\"},\"returns\":{\"_0\":\"The identity ID of the newly minted identity\"}},\"mint(address,address)\":{\"details\":\"The caller can only mint one identity per address\",\"params\":{\"paymentMethod\":\"Address of the payment method to use\",\"to\":\"Address of the owner of the new identity\"},\"returns\":{\"_0\":\"The identity ID of the newly minted identity\"}},\"mintIdentityWithName(address,address,string,uint256,string)\":{\"details\":\"The caller can only mint one identity per address, and the name must be unique\",\"params\":{\"_tokenURI\":\"URI of the NFT\",\"name\":\"Name of the new identity\",\"paymentMethod\":\"Address of the payment method to use\",\"to\":\"Address of the owner of the new identity\",\"yearsPeriod\":\"Years of validity of the name\"}},\"mintIdentityWithName(address,string,uint256,string)\":{\"details\":\"The caller can only mint one identity per address, and the name must be unique\",\"params\":{\"_tokenURI\":\"URI of the NFT\",\"name\":\"Name of the new identity\",\"to\":\"Address of the owner of the new identity\",\"yearsPeriod\":\"Years of validity of the name\"}},\"name()\":{\"details\":\"See {ISBTMetadata-name}.\"},\"ownerOf(string)\":{\"details\":\"This function returns the owner address of the soul name identity specified by the name\",\"params\":{\"name\":\"Name of the soul name\"},\"returns\":{\"_0\":\"Address of the owner of the identity\"}},\"ownerOf(uint256)\":{\"details\":\"This function returns the owner address of the identity specified by the tokenId\",\"params\":{\"tokenId\":\"TokenId of the identity\"},\"returns\":{\"_0\":\"Address of the owner of the identity\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setAddLinkPrice(uint256)\":{\"details\":\"The caller must have the admin or project admin role to call this function\",\"params\":{\"_addLinkPrice\":\"New price for adding the link in SoulLinker in stable coin\"}},\"setAddLinkPriceMASA(uint256)\":{\"details\":\"The caller must have the admin or project admin role to call this function\",\"params\":{\"_addLinkPriceMASA\":\"New price for adding the link in SoulLinker in MASA\"}},\"setMasaToken(address)\":{\"details\":\"The caller must have the admin role to call this function It can be set to address(0) to disable paying in MASA\",\"params\":{\"_masaToken\":\"New utility token to pay the fee in\"}},\"setMintPrice(uint256)\":{\"details\":\"The caller must have the admin or project admin role to call this function\",\"params\":{\"_mintPrice\":\"New price of minting in stable coin\"}},\"setMintPriceMASA(uint256)\":{\"details\":\"The caller must have the admin or project admin role to call this function\",\"params\":{\"_mintPriceMASA\":\"New price of minting in MASA\"}},\"setProjectFeeReceiver(address)\":{\"details\":\"The caller must have the admin or project admin role to call this function\",\"params\":{\"_projectFeeReceiver\":\"New project fee receiver wallet\"}},\"setProtocolFeeAmount(uint256)\":{\"details\":\"The caller must have the admin role to call this function\",\"params\":{\"_protocolFeeAmount\":\"New protocol fee amount\"}},\"setProtocolFeePercent(uint256)\":{\"details\":\"The caller must have the admin role to call this function\",\"params\":{\"_protocolFeePercent\":\"New protocol fee percent\"}},\"setProtocolFeeReceiver(address)\":{\"details\":\"The caller must have the admin role to call this function\",\"params\":{\"_protocolFeeReceiver\":\"New protocol fee wallet\"}},\"setQueryLinkPrice(uint256)\":{\"details\":\"The caller must have the admin or project admin role to call this function\",\"params\":{\"_queryLinkPrice\":\"New price for reading data in SoulLinker in stable coin\"}},\"setQueryLinkPriceMASA(uint256)\":{\"details\":\"The caller must have the admin or project admin role to call this function\",\"params\":{\"_queryLinkPriceMASA\":\"New price for reading data in SoulLinker in MASA\"}},\"setSoulName(address)\":{\"details\":\"The caller must have the admin role to call this function\",\"params\":{\"_soulName\":\"Address of the SoulName contract\"}},\"setSoulboundIdentity(address)\":{\"details\":\"The caller must be the admin to call this function\",\"params\":{\"_soulboundIdentity\":\"Address of the SoulboundIdentity contract\"}},\"setStableCoin(address)\":{\"details\":\"The caller must have the admin role to call this function\",\"params\":{\"_stableCoin\":\"New stable coin to pay the fee in\"}},\"setSwapRouter(address)\":{\"details\":\"The caller must have the admin role to call this function\",\"params\":{\"_swapRouter\":\"New swap router address\"}},\"setWrappedNativeToken(address)\":{\"details\":\"The caller must have the admin role to call this function\",\"params\":{\"_wrappedNativeToken\":\"New wrapped native token address\"}},\"supportsInterface(bytes4)\":{\"details\":\"Interface identification is specified in ERC-165.\",\"params\":{\"interfaceId\":\"The interface identifier, as specified in ERC-165\"},\"returns\":{\"_0\":\"`true` if the contract implements `interfaceId` and  `interfaceId` is not 0xffffffff, `false` otherwise\"}},\"symbol()\":{\"details\":\"See {ISBTMetadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {ISBTEnumerable-tokenByIndex}.\"},\"tokenOfOwner(address)\":{\"details\":\"This function returns the tokenId of the identity owned by an account\",\"params\":{\"owner\":\"Address of the owner of the identity\"},\"returns\":{\"_0\":\"TokenId of the identity owned by the account\"}},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {ISBTEnumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(address)\":{\"details\":\"This function returns the token URI of the identity owned by an account\",\"params\":{\"owner\":\"Address of the owner of the identity\"},\"returns\":{\"_0\":\"URI of the identity owned by the account\"}},\"tokenURI(string)\":{\"details\":\"This function returns the token URI of the soul name identity specified by the name\",\"params\":{\"name\":\"Name of the soul name\"},\"returns\":{\"_0\":\"URI of the identity associated to a soul name\"}},\"tokenURI(uint256)\":{\"details\":\"Throws if `_tokenId` is not a valid SBT. URIs are defined in RFC  3986. The URI may point to a JSON file that conforms to the \\\"ERC721  Metadata JSON Schema\\\".\",\"params\":{\"tokenId\":\"SBT to get the URI of\"},\"returns\":{\"_0\":\"URI of the SBT\"}},\"totalSupply()\":{\"details\":\"See {ISBTEnumerable-totalSupply}.\"}},\"title\":\"Soulbound Identity\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Creates a new soulbound identity\"},\"disablePaymentMethod(address)\":{\"notice\":\"Removes a token as a valid payment method\"},\"enablePaymentMethod(address)\":{\"notice\":\"Adds a new token as a valid payment method\"},\"exists(uint256)\":{\"notice\":\"Returns true if the token exists\"},\"getEnabledPaymentMethods()\":{\"notice\":\"Returns all available payment methods\"},\"getExtension()\":{\"notice\":\"Returns the extension of the soul name\"},\"getIdentityId(uint256)\":{\"notice\":\"Returns the identityId owned by the given token\"},\"getMintPrice(address)\":{\"notice\":\"Returns the price for minting\"},\"getMintPriceWithProtocolFee(address)\":{\"notice\":\"Returns the price for minting with protocol fee\"},\"getProtocolFee(address,uint256)\":{\"notice\":\"Calculates the protocol fee\"},\"getSoulName()\":{\"notice\":\"Returns the address of the SoulName contract linked to this identity\"},\"getSoulNames(address)\":{\"notice\":\"Returns all the active soul names of an account\"},\"getSoulNames(uint256)\":{\"notice\":\"Returns all the active soul names of an account\"},\"getTokenData(string)\":{\"notice\":\"Returns the information of a soul name\"},\"isAvailable(string)\":{\"notice\":\"Checks if a soul name is available\"},\"mint(address)\":{\"notice\":\"Mints a new soulbound identity\"},\"mint(address,address)\":{\"notice\":\"Mints a new soulbound identity\"},\"mintIdentityWithName(address,address,string,uint256,string)\":{\"notice\":\"Mints a new soulbound identity with a SoulName associated to it\"},\"mintIdentityWithName(address,string,uint256,string)\":{\"notice\":\"Mints a new soulbound identity with a SoulName associated to it\"},\"ownerOf(string)\":{\"notice\":\"Returns the owner address of a soul name\"},\"ownerOf(uint256)\":{\"notice\":\"Returns the owner address of an identity\"},\"setAddLinkPrice(uint256)\":{\"notice\":\"Sets the price for adding the link in SoulLinker in stable coin\"},\"setAddLinkPriceMASA(uint256)\":{\"notice\":\"Sets the price for adding the link in SoulLinker in MASA\"},\"setMasaToken(address)\":{\"notice\":\"Sets the utility token to pay the fee in (MASA)\"},\"setMintPrice(uint256)\":{\"notice\":\"Sets the price of minting in stable coin\"},\"setMintPriceMASA(uint256)\":{\"notice\":\"Sets the price of minting in MASA\"},\"setProjectFeeReceiver(address)\":{\"notice\":\"Set the project fee receiver wallet\"},\"setProtocolFeeAmount(uint256)\":{\"notice\":\"Set the protocol fee amount\"},\"setProtocolFeePercent(uint256)\":{\"notice\":\"Set the protocol fee percent\"},\"setProtocolFeeReceiver(address)\":{\"notice\":\"Set the protocol fee wallet\"},\"setQueryLinkPrice(uint256)\":{\"notice\":\"Sets the price for reading data in SoulLinker in stable coin\"},\"setQueryLinkPriceMASA(uint256)\":{\"notice\":\"Sets the price for reading data in SoulLinker in MASA\"},\"setSoulName(address)\":{\"notice\":\"Sets the SoulName contract address linked to this identity\"},\"setSoulboundIdentity(address)\":{\"notice\":\"Sets the SoulboundIdentity contract address linked to this SBT\"},\"setStableCoin(address)\":{\"notice\":\"Sets the stable coin to pay the fee in (USDC)\"},\"setSwapRouter(address)\":{\"notice\":\"Sets the swap router address\"},\"setWrappedNativeToken(address)\":{\"notice\":\"Sets the wrapped native token address\"},\"supportsInterface(bytes4)\":{\"notice\":\"Query if a contract implements an interface\"},\"tokenOfOwner(address)\":{\"notice\":\"Returns the identity id of an account\"},\"tokenURI(address)\":{\"notice\":\"Returns the URI of the owner of an identity\"},\"tokenURI(string)\":{\"notice\":\"Returns the URI of a soul name\"},\"tokenURI(uint256)\":{\"notice\":\"A distinct Uniform Resource Identifier (URI) for a given asset.\"}},\"notice\":\"Soulbound token that represents an identity.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SoulboundIdentity.sol\":\"SoulboundIdentity\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x909d608c2db6eb165ca178c81289a07ed2e118e444d0025b2a85c97d0b44a4fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/SoulboundIdentity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./libraries/Errors.sol\\\";\\nimport \\\"./interfaces/ISoulboundIdentity.sol\\\";\\nimport \\\"./interfaces/ISoulName.sol\\\";\\nimport \\\"./tokens/MasaSBTAuthority.sol\\\";\\n\\n/// @title Soulbound Identity\\n/// @author Masa Finance\\n/// @notice Soulbound token that represents an identity.\\n/// @dev Soulbound identity, that inherits from the SBT contract.\\ncontract SoulboundIdentity is\\n    MasaSBTAuthority,\\n    ISoulboundIdentity,\\n    ReentrancyGuard\\n{\\n    /* ========== STATE VARIABLES =========================================== */\\n\\n    ISoulName public soulName;\\n\\n    /* ========== INITIALIZE ================================================ */\\n\\n    /// @notice Creates a new soulbound identity\\n    /// @dev Creates a new soulbound identity, inheriting from the SBT contract.\\n    /// @param admin Administrator of the smart contract\\n    /// @param name Name of the token\\n    /// @param symbol Symbol of the token\\n    /// @param baseTokenURI Base URI of the token\\n    /// @param paymentParams Payment gateway params\\n    constructor(\\n        address admin,\\n        string memory name,\\n        string memory symbol,\\n        string memory baseTokenURI,\\n        PaymentParams memory paymentParams\\n    )\\n        MasaSBTAuthority(\\n            admin,\\n            name,\\n            symbol,\\n            baseTokenURI,\\n            address(0),\\n            paymentParams\\n        )\\n    {}\\n\\n    /* ========== RESTRICTED FUNCTIONS ====================================== */\\n\\n    /// @notice Sets the SoulName contract address linked to this identity\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _soulName Address of the SoulName contract\\n    function setSoulName(\\n        ISoulName _soulName\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (address(_soulName) == address(0)) revert ZeroAddress();\\n        if (soulName == _soulName) revert SameValue();\\n        soulName = _soulName;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ======================================== */\\n\\n    /// @notice Mints a new soulbound identity\\n    /// @dev The caller can only mint one identity per address\\n    /// @param to Address of the owner of the new identity\\n    /// @return The identity ID of the newly minted identity\\n    function mint(address to) external payable override returns (uint256) {\\n        return mint(address(0), to);\\n    }\\n\\n    /// @notice Mints a new soulbound identity\\n    /// @dev The caller can only mint one identity per address\\n    /// @param paymentMethod Address of the payment method to use\\n    /// @param to Address of the owner of the new identity\\n    /// @return The identity ID of the newly minted identity\\n    function mint(\\n        address paymentMethod,\\n        address to\\n    ) public payable override returns (uint256) {\\n        // Soulbound identity already created!\\n        if (balanceOf(to) > 0) revert IdentityAlreadyCreated(to);\\n\\n        return _mintWithCounter(paymentMethod, to);\\n    }\\n\\n    /// @notice Mints a new soulbound identity with a SoulName associated to it\\n    /// @dev The caller can only mint one identity per address, and the name must be unique\\n    /// @param to Address of the owner of the new identity\\n    /// @param name Name of the new identity\\n    /// @param yearsPeriod Years of validity of the name\\n    /// @param _tokenURI URI of the NFT\\n    function mintIdentityWithName(\\n        address to,\\n        string memory name,\\n        uint256 yearsPeriod,\\n        string memory _tokenURI\\n    ) external payable override soulNameAlreadySet returns (uint256) {\\n        return\\n            mintIdentityWithName(address(0), to, name, yearsPeriod, _tokenURI);\\n    }\\n\\n    /// @notice Mints a new soulbound identity with a SoulName associated to it\\n    /// @dev The caller can only mint one identity per address, and the name must be unique\\n    /// @param paymentMethod Address of the payment method to use\\n    /// @param to Address of the owner of the new identity\\n    /// @param name Name of the new identity\\n    /// @param yearsPeriod Years of validity of the name\\n    /// @param _tokenURI URI of the NFT\\n    function mintIdentityWithName(\\n        address paymentMethod,\\n        address to,\\n        string memory name,\\n        uint256 yearsPeriod,\\n        string memory _tokenURI\\n    )\\n        public\\n        payable\\n        override\\n        soulNameAlreadySet\\n        nonReentrant\\n        returns (uint256)\\n    {\\n        uint256 identityId = mint(paymentMethod, to);\\n        soulName.mint(to, name, yearsPeriod, _tokenURI);\\n\\n        return identityId;\\n    }\\n\\n    /* ========== VIEWS ===================================================== */\\n\\n    /// @notice Returns the address of the SoulName contract linked to this identity\\n    /// @dev This function returns the address of the SoulName contract linked to this identity\\n    /// @return Address of the SoulName contract\\n    function getSoulName() external view override returns (ISoulName) {\\n        return soulName;\\n    }\\n\\n    /// @notice Returns the extension of the soul name\\n    /// @dev This function returns the extension of the soul name\\n    /// @return Extension of the soul name\\n    function getExtension() external view returns (string memory) {\\n        return soulName.getExtension();\\n    }\\n\\n    /// @notice Returns the owner address of an identity\\n    /// @dev This function returns the owner address of the identity specified by the tokenId\\n    /// @param tokenId TokenId of the identity\\n    /// @return Address of the owner of the identity\\n    function ownerOf(\\n        uint256 tokenId\\n    ) public view override(SBT, ISBT) returns (address) {\\n        return super.ownerOf(tokenId);\\n    }\\n\\n    /// @notice Returns the owner address of a soul name\\n    /// @dev This function returns the owner address of the soul name identity specified by the name\\n    /// @param name Name of the soul name\\n    /// @return Address of the owner of the identity\\n    function ownerOf(\\n        string memory name\\n    ) external view soulNameAlreadySet returns (address) {\\n        (, , uint256 identityId, , , ) = soulName.getTokenData(name);\\n        return super.ownerOf(identityId);\\n    }\\n\\n    /// @notice Returns the URI of a soul name\\n    /// @dev This function returns the token URI of the soul name identity specified by the name\\n    /// @param name Name of the soul name\\n    /// @return URI of the identity associated to a soul name\\n    function tokenURI(\\n        string memory name\\n    ) external view soulNameAlreadySet returns (string memory) {\\n        (, , uint256 identityId, , , ) = soulName.getTokenData(name);\\n        return super.tokenURI(identityId);\\n    }\\n\\n    /// @notice Returns the URI of the owner of an identity\\n    /// @dev This function returns the token URI of the identity owned by an account\\n    /// @param owner Address of the owner of the identity\\n    /// @return URI of the identity owned by the account\\n    function tokenURI(address owner) external view returns (string memory) {\\n        uint256 tokenId = tokenOfOwner(owner);\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /// @notice Returns the identity id of an account\\n    /// @dev This function returns the tokenId of the identity owned by an account\\n    /// @param owner Address of the owner of the identity\\n    /// @return TokenId of the identity owned by the account\\n    function tokenOfOwner(\\n        address owner\\n    ) public view override returns (uint256) {\\n        return super.tokenOfOwnerByIndex(owner, 0);\\n    }\\n\\n    /// @notice Checks if a soul name is available\\n    /// @dev This function queries if a soul name already exists and is in the available state\\n    /// @param name Name of the soul name\\n    /// @return available `true` if the soul name is available, `false` otherwise\\n    function isAvailable(\\n        string memory name\\n    ) external view soulNameAlreadySet returns (bool available) {\\n        return soulName.isAvailable(name);\\n    }\\n\\n    /// @notice Returns the information of a soul name\\n    /// @dev This function queries the information of a soul name\\n    /// @param name Name of the soul name\\n    /// @return sbtName Soul name, in upper/lower case and extension\\n    /// @return linked `true` if the soul name is linked, `false` otherwise\\n    /// @return identityId Identity id of the soul name\\n    /// @return tokenId SoulName id of the soul name\\n    /// @return expirationDate Expiration date of the soul name\\n    /// @return active `true` if the soul name is active, `false` otherwise\\n    function getTokenData(\\n        string memory name\\n    )\\n        external\\n        view\\n        soulNameAlreadySet\\n        returns (\\n            string memory sbtName,\\n            bool linked,\\n            uint256 identityId,\\n            uint256 tokenId,\\n            uint256 expirationDate,\\n            bool active\\n        )\\n    {\\n        return soulName.getTokenData(name);\\n    }\\n\\n    /// @notice Returns all the active soul names of an account\\n    /// @dev This function queries all the identity names of the specified account\\n    /// @param owner Address of the owner of the identities\\n    /// @return sbtNames Array of soul names associated to the account\\n    function getSoulNames(\\n        address owner\\n    ) external view soulNameAlreadySet returns (string[] memory sbtNames) {\\n        return soulName.getSoulNames(owner);\\n    }\\n\\n    // SoulName -> SoulboundIdentity.tokenId\\n    // SoulName -> account -> SoulboundIdentity.tokenId\\n\\n    /// @notice Returns all the active soul names of an account\\n    /// @dev This function queries all the identity names of the specified identity Id\\n    /// @param tokenId TokenId of the identity\\n    /// @return sbtNames Array of soul names associated to the identity Id\\n    function getSoulNames(\\n        uint256 tokenId\\n    ) external view soulNameAlreadySet returns (string[] memory sbtNames) {\\n        return soulName.getSoulNames(tokenId);\\n    }\\n\\n    /* ========== PRIVATE FUNCTIONS ========================================= */\\n\\n    /* ========== MODIFIERS ================================================= */\\n\\n    modifier soulNameAlreadySet() {\\n        if (address(soulName) == address(0)) revert SoulNameContractNotSet();\\n        _;\\n    }\\n\\n    /* ========== EVENTS ==================================================== */\\n}\\n\",\"keccak256\":\"0xb56652d6f33d8161c96c41cca6e1cff1a999faeceb62c992bec0fb6a3b032ed0\",\"license\":\"MIT\"},\"contracts/dex/PaymentGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"../libraries/Errors.sol\\\";\\nimport \\\"../interfaces/dex/IUniswapRouter.sol\\\";\\n\\n/// @title Pay using a Decentralized automated market maker (AMM) when needed\\n/// @author Masa Finance\\n/// @notice Smart contract to call a Dex AMM smart contract to pay to a project fee receiver\\n/// wallet recipient\\n/// @dev This smart contract will call the Uniswap Router interface, based on\\n/// https://github.com/Uniswap/v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router01.sol\\nabstract contract PaymentGateway is AccessControl {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    bytes32 public constant PROJECT_ADMIN_ROLE =\\n        keccak256(\\\"PROJECT_ADMIN_ROLE\\\");\\n\\n    struct PaymentParams {\\n        address swapRouter; // Swap router address\\n        address wrappedNativeToken; // Wrapped native token address\\n        address stableCoin; // Stable coin to pay the fee in (USDC)\\n        address masaToken; // Utility token to pay the fee in (MASA)\\n        address projectFeeReceiver; // Wallet that will receive the project fee\\n        address protocolFeeReceiver; // Wallet that will receive the protocol fee\\n        uint256 protocolFeeAmount; // Protocol fee amount in USD\\n        uint256 protocolFeePercent; // Protocol fee amount\\n    }\\n\\n    /* ========== STATE VARIABLES =========================================== */\\n\\n    address public swapRouter;\\n    address public wrappedNativeToken;\\n\\n    address public stableCoin; // USDC. It also needs to be enabled as payment method, if we want to pay in USDC\\n    address public masaToken; // MASA. It also needs to be enabled as payment method, if we want to pay in MASA\\n\\n    // enabled payment methods: ETH and ERC20 tokens\\n    mapping(address => bool) public enabledPaymentMethod;\\n    address[] public enabledPaymentMethods;\\n\\n    address public projectFeeReceiver;\\n    address public protocolFeeReceiver;\\n    uint256 public protocolFeeAmount;\\n    uint256 public protocolFeePercent;\\n\\n    /* ========== INITIALIZE ================================================ */\\n\\n    /// @notice Creates a new Dex AMM\\n    /// @dev Creates a new Decentralized automated market maker (AMM) smart contract,\\n    // that will call the Uniswap Router interface\\n    /// @param admin Administrator of the smart contract\\n    /// @param paymentParams Payment params\\n    constructor(address admin, PaymentParams memory paymentParams) {\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\\n\\n        swapRouter = paymentParams.swapRouter;\\n        wrappedNativeToken = paymentParams.wrappedNativeToken;\\n        stableCoin = paymentParams.stableCoin;\\n        masaToken = paymentParams.masaToken;\\n        projectFeeReceiver = paymentParams.projectFeeReceiver;\\n        protocolFeeReceiver = paymentParams.protocolFeeReceiver;\\n        protocolFeeAmount = paymentParams.protocolFeeAmount;\\n        protocolFeePercent = paymentParams.protocolFeePercent;\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ====================================== */\\n\\n    /// @notice Sets the swap router address\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _swapRouter New swap router address\\n    function setSwapRouter(\\n        address _swapRouter\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (swapRouter == _swapRouter) revert SameValue();\\n        swapRouter = _swapRouter;\\n    }\\n\\n    /// @notice Sets the wrapped native token address\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _wrappedNativeToken New wrapped native token address\\n    function setWrappedNativeToken(\\n        address _wrappedNativeToken\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (wrappedNativeToken == _wrappedNativeToken) revert SameValue();\\n        wrappedNativeToken = _wrappedNativeToken;\\n    }\\n\\n    /// @notice Sets the stable coin to pay the fee in (USDC)\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _stableCoin New stable coin to pay the fee in\\n    function setStableCoin(\\n        address _stableCoin\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (stableCoin == _stableCoin) revert SameValue();\\n        stableCoin = _stableCoin;\\n    }\\n\\n    /// @notice Sets the utility token to pay the fee in (MASA)\\n    /// @dev The caller must have the admin role to call this function\\n    /// It can be set to address(0) to disable paying in MASA\\n    /// @param _masaToken New utility token to pay the fee in\\n    function setMasaToken(\\n        address _masaToken\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (masaToken == _masaToken) revert SameValue();\\n        masaToken = _masaToken;\\n    }\\n\\n    /// @notice Adds a new token as a valid payment method\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _paymentMethod New token to add\\n    function enablePaymentMethod(\\n        address _paymentMethod\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (enabledPaymentMethod[_paymentMethod]) revert AlreadyAdded();\\n\\n        enabledPaymentMethod[_paymentMethod] = true;\\n        enabledPaymentMethods.push(_paymentMethod);\\n    }\\n\\n    /// @notice Removes a token as a valid payment method\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _paymentMethod Token to remove\\n    function disablePaymentMethod(\\n        address _paymentMethod\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (!enabledPaymentMethod[_paymentMethod])\\n            revert NonExistingErc20Token(_paymentMethod);\\n\\n        enabledPaymentMethod[_paymentMethod] = false;\\n        for (uint256 i = 0; i < enabledPaymentMethods.length; i++) {\\n            if (enabledPaymentMethods[i] == _paymentMethod) {\\n                enabledPaymentMethods[i] = enabledPaymentMethods[\\n                    enabledPaymentMethods.length - 1\\n                ];\\n                enabledPaymentMethods.pop();\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @notice Set the project fee receiver wallet\\n    /// @dev The caller must have the admin or project admin role to call this function\\n    /// @param _projectFeeReceiver New project fee receiver wallet\\n    function setProjectFeeReceiver(address _projectFeeReceiver) external {\\n        if (\\n            !hasRole(DEFAULT_ADMIN_ROLE, _msgSender()) &&\\n            !hasRole(PROJECT_ADMIN_ROLE, _msgSender())\\n        ) revert UserMustHaveProtocolOrProjectAdminRole();\\n        if (_projectFeeReceiver == projectFeeReceiver) revert SameValue();\\n        projectFeeReceiver = _projectFeeReceiver;\\n    }\\n\\n    /// @notice Set the protocol fee wallet\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _protocolFeeReceiver New protocol fee wallet\\n    function setProtocolFeeReceiver(\\n        address _protocolFeeReceiver\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (_protocolFeeReceiver == protocolFeeReceiver) revert SameValue();\\n        protocolFeeReceiver = _protocolFeeReceiver;\\n    }\\n\\n    /// @notice Set the protocol fee amount\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _protocolFeeAmount New protocol fee amount\\n    function setProtocolFeeAmount(\\n        uint256 _protocolFeeAmount\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (_protocolFeeAmount == protocolFeeAmount) revert SameValue();\\n        protocolFeeAmount = _protocolFeeAmount;\\n    }\\n\\n    /// @notice Set the protocol fee percent\\n    /// @dev The caller must have the admin role to call this function\\n    /// @param _protocolFeePercent New protocol fee percent\\n    function setProtocolFeePercent(\\n        uint256 _protocolFeePercent\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (_protocolFeePercent == protocolFeePercent) revert SameValue();\\n        protocolFeePercent = _protocolFeePercent;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ======================================== */\\n\\n    /* ========== VIEWS ===================================================== */\\n\\n    /// @notice Returns all available payment methods\\n    /// @dev Returns the address of all available payment methods\\n    /// @return Array of all enabled payment methods\\n    function getEnabledPaymentMethods()\\n        external\\n        view\\n        returns (address[] memory)\\n    {\\n        return enabledPaymentMethods;\\n    }\\n\\n    /// @notice Calculates the protocol fee\\n    /// @dev This method will calculate the protocol fee based on the payment method\\n    /// @param paymentMethod Address of token that user want to pay\\n    /// @param amount Price to be paid in the specified payment method\\n    function getProtocolFee(\\n        address paymentMethod,\\n        uint256 amount\\n    ) external view returns (uint256) {\\n        return _getProtocolFee(paymentMethod, amount);\\n    }\\n\\n    /* ========== PRIVATE FUNCTIONS ========================================= */\\n\\n    /// @notice Converts an amount from a stable coin to a payment method amount\\n    /// @dev This method will perform the swap between the stable coin and the\\n    /// payment method, and return the amount of the payment method,\\n    /// performing the swap if necessary\\n    /// @param paymentMethod Address of token that user want to pay\\n    /// @param amount Price to be converted in the specified payment method\\n    function _convertFromStableCoin(\\n        address paymentMethod,\\n        uint256 amount\\n    ) internal view paymentParamsAlreadySet(amount) returns (uint256) {\\n        if (!enabledPaymentMethod[paymentMethod] || paymentMethod == stableCoin)\\n            revert InvalidToken(paymentMethod);\\n\\n        if (amount == 0) return 0;\\n\\n        if (paymentMethod == address(0)) {\\n            return _estimateSwapAmount(wrappedNativeToken, stableCoin, amount);\\n        } else {\\n            return _estimateSwapAmount(paymentMethod, stableCoin, amount);\\n        }\\n    }\\n\\n    /// @notice Calculates the protocol fee\\n    /// @dev This method will calculate the protocol fee based on the payment method\\n    /// @param paymentMethod Address of token that user want to pay\\n    /// @param amount Price to be paid in the specified payment method\\n    function _getProtocolFee(\\n        address paymentMethod,\\n        uint256 amount\\n    ) internal view returns (uint256) {\\n        uint256 protocolFee = 0;\\n        if (protocolFeeAmount > 0) {\\n            if (paymentMethod == stableCoin) {\\n                protocolFee = protocolFeeAmount;\\n            } else {\\n                protocolFee = _convertFromStableCoin(\\n                    paymentMethod,\\n                    protocolFeeAmount\\n                );\\n            }\\n        }\\n        if (protocolFeePercent > 0) {\\n            protocolFee = protocolFee.add(\\n                amount.mul(protocolFeePercent).div(100)\\n            );\\n        }\\n        return protocolFee;\\n    }\\n\\n    /// @notice Performs the payment in any payment method\\n    /// @dev This method will transfer the funds to the project fee receiver wallet, performing\\n    /// the swap if necessary, and transfer the protocol fee to the protocol fee wallet\\n    /// @param paymentMethod Address of token that user want to pay\\n    /// @param amount Price to be paid in the specified payment method\\n    /// @param protocolFee Protocol fee to be paid in the specified payment method\\n    function _pay(\\n        address paymentMethod,\\n        uint256 amount,\\n        uint256 protocolFee\\n    ) internal paymentParamsAlreadySet(amount.add(protocolFee)) {\\n        if (amount == 0 && protocolFee == 0) return;\\n        if (protocolFee > 0 && protocolFeeReceiver == address(0))\\n            revert ProtocolFeeReceiverNotSet();\\n\\n        if (!enabledPaymentMethod[paymentMethod])\\n            revert InvalidPaymentMethod(paymentMethod);\\n        if (paymentMethod == address(0)) {\\n            // ETH\\n            if (msg.value < amount.add(protocolFee))\\n                revert InsufficientEthAmount(amount.add(protocolFee));\\n            if (amount > 0) {\\n                (bool success, ) = payable(projectFeeReceiver).call{\\n                    value: amount\\n                }(\\\"\\\");\\n                if (!success) revert TransferFailed();\\n            }\\n            if (protocolFee > 0) {\\n                (bool success, ) = payable(protocolFeeReceiver).call{\\n                    value: protocolFee\\n                }(\\\"\\\");\\n                if (!success) revert TransferFailed();\\n            }\\n            if (msg.value > amount.add(protocolFee)) {\\n                // return diff\\n                uint256 refund = msg.value.sub(amount.add(protocolFee));\\n                (bool success, ) = payable(msg.sender).call{value: refund}(\\\"\\\");\\n                if (!success) revert RefundFailed();\\n            }\\n        } else {\\n            // ERC20 token, including MASA and USDC\\n            if (amount > 0) {\\n                IERC20(paymentMethod).safeTransferFrom(\\n                    msg.sender,\\n                    projectFeeReceiver,\\n                    amount\\n                );\\n            }\\n            if (protocolFee > 0) {\\n                IERC20(paymentMethod).safeTransferFrom(\\n                    msg.sender,\\n                    protocolFeeReceiver,\\n                    protocolFee\\n                );\\n            }\\n        }\\n    }\\n\\n    function _estimateSwapAmount(\\n        address _fromToken,\\n        address _toToken,\\n        uint256 _amountOut\\n    ) private view returns (uint256) {\\n        uint256[] memory amounts;\\n        address[] memory path;\\n        path = _getPathFromTokenToToken(_fromToken, _toToken);\\n        amounts = IUniswapRouter(swapRouter).getAmountsIn(_amountOut, path);\\n        return amounts[0];\\n    }\\n\\n    function _getPathFromTokenToToken(\\n        address fromToken,\\n        address toToken\\n    ) private view returns (address[] memory) {\\n        if (fromToken == wrappedNativeToken || toToken == wrappedNativeToken) {\\n            address[] memory path = new address[](2);\\n            path[0] = fromToken == wrappedNativeToken\\n                ? wrappedNativeToken\\n                : fromToken;\\n            path[1] = toToken == wrappedNativeToken\\n                ? wrappedNativeToken\\n                : toToken;\\n            return path;\\n        } else {\\n            address[] memory path = new address[](3);\\n            path[0] = fromToken;\\n            path[1] = wrappedNativeToken;\\n            path[2] = toToken;\\n            return path;\\n        }\\n    }\\n\\n    /* ========== MODIFIERS ================================================= */\\n\\n    modifier paymentParamsAlreadySet(uint256 amount) {\\n        if (amount > 0 && swapRouter == address(0))\\n            revert PaymentParamsNotSet();\\n        if (amount > 0 && wrappedNativeToken == address(0))\\n            revert PaymentParamsNotSet();\\n        if (amount > 0 && stableCoin == address(0))\\n            revert PaymentParamsNotSet();\\n        if (amount > 0 && projectFeeReceiver == address(0))\\n            revert PaymentParamsNotSet();\\n        _;\\n    }\\n\\n    /* ========== EVENTS ==================================================== */\\n}\\n\",\"keccak256\":\"0xc52fa60e0022b87f3b2376c84e0b1c686bc1328bf0a9e5e3d8a5861fdd9d3a38\",\"license\":\"MIT\"},\"contracts/interfaces/ILinkableSBT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"../tokens/SBT/ISBT.sol\\\";\\n\\ninterface ILinkableSBT is ISBT {\\n    function addLinkPrice() external view returns (uint256);\\n\\n    function addLinkPriceMASA() external view returns (uint256);\\n\\n    function queryLinkPrice() external view returns (uint256);\\n\\n    function queryLinkPriceMASA() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf04c9991650db0cc5b2a96d6bacdc8a1f908cfe2467aed5d679d740938f8dfd4\",\"license\":\"MIT\"},\"contracts/interfaces/ISoulName.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\ninterface ISoulName {\\n    function mint(\\n        address to,\\n        string memory name,\\n        uint256 yearsPeriod,\\n        string memory _tokenURI\\n    ) external returns (uint256);\\n\\n    function getExtension() external view returns (string memory);\\n\\n    function isAvailable(\\n        string memory name\\n    ) external view returns (bool available);\\n\\n    function tokenData(\\n        uint256 tokenId\\n    ) external view returns (string memory name, uint256 expirationDate);\\n\\n    function getTokenData(\\n        string memory name\\n    )\\n        external\\n        view\\n        returns (\\n            string memory sbtName,\\n            bool linked,\\n            uint256 identityId,\\n            uint256 tokenId,\\n            uint256 expirationDate,\\n            bool active\\n        );\\n\\n    function getTokenId(string memory name) external view returns (uint256);\\n\\n    function getSoulNames(\\n        address owner\\n    ) external view returns (string[] memory sbtNames);\\n\\n    function getSoulNames(\\n        uint256 identityId\\n    ) external view returns (string[] memory sbtNames);\\n}\\n\",\"keccak256\":\"0x1c33b08f2c565a77b4f55632530d66b52ab27d18b0c492cfc217b2124e75c265\",\"license\":\"MIT\"},\"contracts/interfaces/ISoulboundIdentity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"../tokens/SBT/ISBT.sol\\\";\\n\\nimport \\\"./ISoulName.sol\\\";\\n\\ninterface ISoulboundIdentity is ISBT {\\n    function mint(address to) external payable returns (uint256);\\n\\n    function mint(\\n        address paymentMethod,\\n        address to\\n    ) external payable returns (uint256);\\n\\n    function mintIdentityWithName(\\n        address to,\\n        string memory name,\\n        uint256 yearsPeriod,\\n        string memory _tokenURI\\n    ) external payable returns (uint256);\\n\\n    function mintIdentityWithName(\\n        address paymentMethod,\\n        address to,\\n        string memory name,\\n        uint256 yearsPeriod,\\n        string memory _tokenURI\\n    ) external payable returns (uint256);\\n\\n    function getSoulName() external view returns (ISoulName);\\n\\n    function tokenOfOwner(address owner) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x98b5b36506a2c09611590afae40c885036dc6042b41e6d504ae8cb5ec63a5a05\",\"license\":\"MIT\"},\"contracts/interfaces/dex/IUniswapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title Uniswap Router interface\\n/// @author Masa Finance\\n/// @notice Interface of the Uniswap Router contract\\n/// @dev This interface is used to interact with the Uniswap Router contract,\\n/// and gets the most important functions of the contract. It's based on\\n/// https://github.com/Uniswap/v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router01.sol\\ninterface IUniswapRouter {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function getAmountsOut(\\n        uint256 amountIn,\\n        address[] calldata path\\n    ) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(\\n        uint256 amountOut,\\n        address[] calldata path\\n    ) external view returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0xbf4d6d62c713d1fb92b955240f49b82ec0ab7800d01a287a5615202d96948a0f\",\"license\":\"MIT\"},\"contracts/libraries/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nerror AddressDoesNotHaveIdentity(address to);\\nerror AlreadyAdded();\\nerror AuthorityNotExists(address authority);\\nerror CallerNotOwner(address caller);\\nerror CallerNotReader(address caller);\\nerror CreditScoreAlreadyCreated(address to);\\nerror IdentityAlreadyCreated(address to);\\nerror IdentityOwnerIsReader(uint256 readerIdentityId);\\nerror InsufficientEthAmount(uint256 amount);\\nerror IdentityOwnerNotTokenOwner(uint256 tokenId, uint256 ownerIdentityId);\\nerror InvalidPaymentMethod(address paymentMethod);\\nerror InvalidSignature();\\nerror InvalidSignatureDate(uint256 signatureDate);\\nerror InvalidToken(address token);\\nerror InvalidTokenURI(string tokenURI);\\nerror LinkAlreadyExists(\\n    address token,\\n    uint256 tokenId,\\n    uint256 readerIdentityId,\\n    uint256 signatureDate\\n);\\nerror LinkAlreadyRevoked();\\nerror LinkDoesNotExist();\\nerror NameAlreadyExists(string name);\\nerror NameNotFound(string name);\\nerror NameRegisteredByOtherAccount(string name, uint256 tokenId);\\nerror NotAuthorized(address signer);\\nerror NonExistingErc20Token(address erc20token);\\nerror NotLinkedToAnIdentitySBT();\\nerror PaymentParamsNotSet();\\nerror ProtocolFeeReceiverNotSet();\\nerror RefundFailed();\\nerror SameValue();\\nerror SBTAlreadyLinked(address token);\\nerror SoulNameContractNotSet();\\nerror SoulNameNotExist();\\nerror SoulNameNotRegistered(address token);\\nerror TokenNotFound(uint256 tokenId);\\nerror TransferFailed();\\nerror URIAlreadyExists(string tokenURI);\\nerror UserMustHaveProtocolOrProjectAdminRole();\\nerror ValidPeriodExpired(uint256 expirationDate);\\nerror ZeroAddress();\\nerror ZeroLengthName(string name);\\nerror ZeroYearsPeriod(uint256 yearsPeriod);\\n\",\"keccak256\":\"0xc5a156fde299580c3114bf007230c139fb6e0b3a23fe68398f174b8cf246b6d1\",\"license\":\"MIT\"},\"contracts/tokens/MasaSBT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"../dex/PaymentGateway.sol\\\";\\nimport \\\"../libraries/Errors.sol\\\";\\nimport \\\"../interfaces/ISoulboundIdentity.sol\\\";\\nimport \\\"../interfaces/ILinkableSBT.sol\\\";\\nimport \\\"./SBT/SBT.sol\\\";\\nimport \\\"./SBT/extensions/SBTEnumerable.sol\\\";\\nimport \\\"./SBT/extensions/SBTBurnable.sol\\\";\\n\\n/// @title MasaSBT\\n/// @author Masa Finance\\n/// @notice Soulbound token. Non-fungible token that is not transferable.\\n/// @dev Implementation of https://papers.ssrn.com/sol3/papers.cfm?abstract_id=4105763 Soulbound token.\\n/// Adds a link to a SoulboundIdentity SC to let minting using the identityId\\n/// Adds a payment gateway to let minting paying a fee\\nabstract contract MasaSBT is\\n    PaymentGateway,\\n    SBT,\\n    SBTEnumerable,\\n    SBTBurnable,\\n    ILinkableSBT\\n{\\n    /* ========== STATE VARIABLES =========================================== */\\n\\n    using Strings for uint256;\\n\\n    string private _baseTokenURI;\\n\\n    ISoulboundIdentity public soulboundIdentity;\\n\\n    uint256 public mintPrice; // price in stable coin\\n    uint256 public mintPriceMASA; // price in MASA\\n\\n    uint256 public override addLinkPrice; // price in stable coin\\n    uint256 public override addLinkPriceMASA; // price in MASA\\n    uint256 public override queryLinkPrice; // price in stable coin\\n    uint256 public override queryLinkPriceMASA; // price in MASA\\n\\n    /* ========== INITIALIZE ================================================ */\\n\\n    /// @notice Creates a new soulbound token\\n    /// @dev Creates a new soulbound token\\n    /// @param admin Administrator of the smart contract\\n    /// @param name Name of the token\\n    /// @param symbol Symbol of the token\\n    /// @param baseTokenURI Base URI of the token\\n    /// @param _soulboundIdentity Address of the SoulboundIdentity contract\\n    /// @param paymentParams Payment gateway params\\n    constructor(\\n        address admin,\\n        string memory name,\\n        string memory symbol,\\n        string memory baseTokenURI,\\n        address _soulboundIdentity,\\n        PaymentParams memory paymentParams\\n    ) SBT(name, symbol) PaymentGateway(admin, paymentParams) {\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\\n\\n        _baseTokenURI = baseTokenURI;\\n        soulboundIdentity = ISoulboundIdentity(_soulboundIdentity);\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ====================================== */\\n\\n    /// @notice Sets the price of minting in stable coin\\n    /// @dev The caller must have the admin or project admin role to call this function\\n    /// @param _mintPrice New price of minting in stable coin\\n    function setMintPrice(uint256 _mintPrice) external {\\n        if (\\n            !hasRole(DEFAULT_ADMIN_ROLE, _msgSender()) &&\\n            !hasRole(PROJECT_ADMIN_ROLE, _msgSender())\\n        ) revert UserMustHaveProtocolOrProjectAdminRole();\\n        if (mintPrice == _mintPrice) revert SameValue();\\n        mintPrice = _mintPrice;\\n    }\\n\\n    /// @notice Sets the price of minting in MASA\\n    /// @dev The caller must have the admin or project admin role to call this function\\n    /// @param _mintPriceMASA New price of minting in MASA\\n    function setMintPriceMASA(uint256 _mintPriceMASA) external {\\n        if (\\n            !hasRole(DEFAULT_ADMIN_ROLE, _msgSender()) &&\\n            !hasRole(PROJECT_ADMIN_ROLE, _msgSender())\\n        ) revert UserMustHaveProtocolOrProjectAdminRole();\\n        if (mintPriceMASA == _mintPriceMASA) revert SameValue();\\n        mintPriceMASA = _mintPriceMASA;\\n    }\\n\\n    /// @notice Sets the SoulboundIdentity contract address linked to this SBT\\n    /// @dev The caller must be the admin to call this function\\n    /// @param _soulboundIdentity Address of the SoulboundIdentity contract\\n    function setSoulboundIdentity(\\n        address _soulboundIdentity\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (address(soulboundIdentity) == _soulboundIdentity)\\n            revert SameValue();\\n        soulboundIdentity = ISoulboundIdentity(_soulboundIdentity);\\n    }\\n\\n    /// @notice Sets the price for adding the link in SoulLinker in stable coin\\n    /// @dev The caller must have the admin or project admin role to call this function\\n    /// @param _addLinkPrice New price for adding the link in SoulLinker in stable coin\\n    function setAddLinkPrice(uint256 _addLinkPrice) external {\\n        if (\\n            !hasRole(DEFAULT_ADMIN_ROLE, _msgSender()) &&\\n            !hasRole(PROJECT_ADMIN_ROLE, _msgSender())\\n        ) revert UserMustHaveProtocolOrProjectAdminRole();\\n        if (addLinkPrice == _addLinkPrice) revert SameValue();\\n        addLinkPrice = _addLinkPrice;\\n    }\\n\\n    /// @notice Sets the price for adding the link in SoulLinker in MASA\\n    /// @dev The caller must have the admin or project admin role to call this function\\n    /// @param _addLinkPriceMASA New price for adding the link in SoulLinker in MASA\\n    function setAddLinkPriceMASA(uint256 _addLinkPriceMASA) external {\\n        if (\\n            !hasRole(DEFAULT_ADMIN_ROLE, _msgSender()) &&\\n            !hasRole(PROJECT_ADMIN_ROLE, _msgSender())\\n        ) revert UserMustHaveProtocolOrProjectAdminRole();\\n        if (addLinkPriceMASA == _addLinkPriceMASA) revert SameValue();\\n        addLinkPriceMASA = _addLinkPriceMASA;\\n    }\\n\\n    /// @notice Sets the price for reading data in SoulLinker in stable coin\\n    /// @dev The caller must have the admin or project admin role to call this function\\n    /// @param _queryLinkPrice New price for reading data in SoulLinker in stable coin\\n    function setQueryLinkPrice(uint256 _queryLinkPrice) external {\\n        if (\\n            !hasRole(DEFAULT_ADMIN_ROLE, _msgSender()) &&\\n            !hasRole(PROJECT_ADMIN_ROLE, _msgSender())\\n        ) revert UserMustHaveProtocolOrProjectAdminRole();\\n        if (queryLinkPrice == _queryLinkPrice) revert SameValue();\\n        queryLinkPrice = _queryLinkPrice;\\n    }\\n\\n    /// @notice Sets the price for reading data in SoulLinker in MASA\\n    /// @dev The caller must have the admin or project admin role to call this function\\n    /// @param _queryLinkPriceMASA New price for reading data in SoulLinker in MASA\\n    function setQueryLinkPriceMASA(uint256 _queryLinkPriceMASA) external {\\n        if (\\n            !hasRole(DEFAULT_ADMIN_ROLE, _msgSender()) &&\\n            !hasRole(PROJECT_ADMIN_ROLE, _msgSender())\\n        ) revert UserMustHaveProtocolOrProjectAdminRole();\\n        if (queryLinkPriceMASA == _queryLinkPriceMASA) revert SameValue();\\n        queryLinkPriceMASA = _queryLinkPriceMASA;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ======================================== */\\n\\n    /* ========== VIEWS ===================================================== */\\n\\n    /// @notice Returns the identityId owned by the given token\\n    /// @param tokenId Id of the token\\n    /// @return Id of the identity\\n    function getIdentityId(uint256 tokenId) external view returns (uint256) {\\n        if (soulboundIdentity == ISoulboundIdentity(address(0)))\\n            revert NotLinkedToAnIdentitySBT();\\n\\n        address owner = super.ownerOf(tokenId);\\n        return soulboundIdentity.tokenOfOwner(owner);\\n    }\\n\\n    /// @notice Returns true if the token exists\\n    /// @dev Returns true if the token has been minted\\n    /// @param tokenId Token to check\\n    /// @return True if the token exists\\n    function exists(uint256 tokenId) external view returns (bool) {\\n        return _exists(tokenId);\\n    }\\n\\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n    /// @dev Throws if `_tokenId` is not a valid SBT. URIs are defined in RFC\\n    ///  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\n    ///  Metadata JSON Schema\\\".\\n    /// @param tokenId SBT to get the URI of\\n    /// @return URI of the SBT\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return\\n            bytes(baseURI).length > 0\\n                ? string(abi.encodePacked(baseURI, tokenId.toString(), \\\".json\\\"))\\n                : \\\"\\\";\\n    }\\n\\n    /// @notice Query if a contract implements an interface\\n    /// @dev Interface identification is specified in ERC-165.\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @return `true` if the contract implements `interfaceId` and\\n    ///  `interfaceId` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    )\\n        public\\n        view\\n        virtual\\n        override(SBT, SBTEnumerable, AccessControl, IERC165)\\n        returns (bool)\\n    {\\n        return super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @notice Returns the price for minting\\n    /// @dev Returns current pricing for minting\\n    /// @param paymentMethod Address of token that user want to pay\\n    /// @return price Current price for minting in the given payment method\\n    function getMintPrice(\\n        address paymentMethod\\n    ) public view returns (uint256 price) {\\n        if (mintPrice == 0 && mintPriceMASA == 0) {\\n            price = 0;\\n        } else if (\\n            paymentMethod == masaToken &&\\n            enabledPaymentMethod[paymentMethod] &&\\n            mintPriceMASA > 0\\n        ) {\\n            // price in MASA without conversion rate\\n            price = mintPriceMASA;\\n        } else if (\\n            paymentMethod == stableCoin && enabledPaymentMethod[paymentMethod]\\n        ) {\\n            // stable coin\\n            price = mintPrice;\\n        } else if (enabledPaymentMethod[paymentMethod]) {\\n            // ETH and ERC 20 token\\n            price = _convertFromStableCoin(paymentMethod, mintPrice);\\n        } else {\\n            revert InvalidPaymentMethod(paymentMethod);\\n        }\\n        return price;\\n    }\\n\\n    /// @notice Returns the price for minting with protocol fee\\n    /// @dev Returns current pricing for minting with protocol fee\\n    /// @param paymentMethod Address of token that user want to pay\\n    /// @return price Current price for minting in the given payment method\\n    /// @return protocolFee Current protocol fee for minting in the given payment method\\n    function getMintPriceWithProtocolFee(\\n        address paymentMethod\\n    ) public view returns (uint256 price, uint256 protocolFee) {\\n        price = getMintPrice(paymentMethod);\\n        return (price, _getProtocolFee(paymentMethod, price));\\n    }\\n\\n    /* ========== PRIVATE FUNCTIONS ========================================= */\\n\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return _baseTokenURI;\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override(SBT, SBTEnumerable) {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /* ========== MODIFIERS ================================================= */\\n\\n    /* ========== EVENTS ==================================================== */\\n}\\n\",\"keccak256\":\"0x913d788fb936a6fad591592b8f42698c951208a4de4c1a85fceabbf64f9da1d4\",\"license\":\"MIT\"},\"contracts/tokens/MasaSBTAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nimport \\\"./MasaSBT.sol\\\";\\n\\n/// @title MasaSBT\\n/// @author Masa Finance\\n/// @notice Soulbound token. Non-fungible token that is not transferable.\\n/// @dev Implementation of https://papers.ssrn.com/sol3/papers.cfm?abstract_id=4105763 Soulbound token.\\nabstract contract MasaSBTAuthority is MasaSBT {\\n    /* ========== STATE VARIABLES =========================================== */\\n\\n    using Counters for Counters.Counter;\\n\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    Counters.Counter private _tokenIdCounter;\\n\\n    /* ========== INITIALIZE ================================================ */\\n\\n    /// @notice Creates a new soulbound token\\n    /// @dev Creates a new soulbound token\\n    /// @param admin Administrator of the smart contract\\n    /// @param name Name of the token\\n    /// @param symbol Symbol of the token\\n    /// @param baseTokenURI Base URI of the token\\n    /// @param soulboundIdentity Address of the SoulboundIdentity contract\\n    /// @param paymentParams Payment gateway params\\n    constructor(\\n        address admin,\\n        string memory name,\\n        string memory symbol,\\n        string memory baseTokenURI,\\n        address soulboundIdentity,\\n        PaymentParams memory paymentParams\\n    )\\n        MasaSBT(\\n            admin,\\n            name,\\n            symbol,\\n            baseTokenURI,\\n            soulboundIdentity,\\n            paymentParams\\n        )\\n    {\\n        _grantRole(MINTER_ROLE, admin);\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ====================================== */\\n\\n    function _mintWithCounter(\\n        address paymentMethod,\\n        address to\\n    ) internal virtual onlyRole(MINTER_ROLE) returns (uint256) {\\n        (uint256 price, uint256 protocolFee) = getMintPriceWithProtocolFee(\\n            paymentMethod\\n        );\\n        _pay(paymentMethod, price, protocolFee);\\n\\n        uint256 tokenId = _tokenIdCounter.current();\\n        _tokenIdCounter.increment();\\n        _mint(to, tokenId);\\n\\n        return tokenId;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ======================================== */\\n\\n    /* ========== VIEWS ===================================================== */\\n\\n    /* ========== PRIVATE FUNCTIONS ========================================= */\\n\\n    /* ========== MODIFIERS ================================================= */\\n\\n    /* ========== EVENTS ==================================================== */\\n}\\n\",\"keccak256\":\"0x9021fe86fc114c48d261034835e5833c4517e66bb99ddc4e141931042d6daf75\",\"license\":\"MIT\"},\"contracts/tokens/SBT/ISBT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\ninterface ISBT is IERC165 {\\n    /// @dev This emits when an SBT is newly minted.\\n    ///  This event emits when SBTs are created\\n    event Mint(address indexed _owner, uint256 indexed _tokenId);\\n\\n    /// @dev This emits when an SBT is burned\\n    ///  This event emits when SBTs are destroyed\\n    event Burn(address indexed _owner, uint256 indexed _tokenId);\\n\\n    /// @notice Count all SBTs assigned to an owner\\n    /// @dev SBTs assigned to the zero address are considered invalid, and this\\n    ///  function throws for queries about the zero address.\\n    /// @param _owner An address for whom to query the balance\\n    /// @return The number of SBTs owned by `_owner`, possibly zero\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    /// @notice Find the owner of an SBT\\n    /// @dev SBTs assigned to zero address are considered invalid, and queries\\n    ///  about them do throw.\\n    /// @param _tokenId The identifier for an SBT\\n    /// @return The address of the owner of the SBT\\n    function ownerOf(uint256 _tokenId) external view returns (address);\\n}\\n\",\"keccak256\":\"0x812a1960f104ddd3078722e113141807e0ba9b51e9082906d62d91d9e6a4e50e\",\"license\":\"MIT\"},\"contracts/tokens/SBT/SBT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport \\\"./ISBT.sol\\\";\\nimport \\\"./extensions/ISBTMetadata.sol\\\";\\n\\n/// @title SBT\\n/// @author Masa Finance\\n/// @notice Soulbound token is an NFT token that is not transferable.\\ncontract SBT is Context, ERC165, ISBT, ISBTMetadata {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(ISBT).interfaceId ||\\n            interfaceId == type(ISBTMetadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {ISBT-balanceOf}.\\n     */\\n    function balanceOf(\\n        address owner\\n    ) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"SBT: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {ISBT-ownerOf}.\\n     */\\n    function ownerOf(\\n        uint256 tokenId\\n    ) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"SBT: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {ISBTMetadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {ISBTMetadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {ISBTMetadata-tokenURI}.\\n     */\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return\\n            bytes(baseURI).length > 0\\n                ? string(abi.encodePacked(baseURI, tokenId.toString()))\\n                : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isOwner(\\n        address spender,\\n        uint256 tokenId\\n    ) internal view virtual returns (bool) {\\n        address owner = SBT.ownerOf(tokenId);\\n        return (spender == owner);\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Mint} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"SBT: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"SBT: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Mint(to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     *\\n     * Requirements:\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Burn} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = SBT.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Burn(owner, tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"SBT: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token minting/burning\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address, address, uint256) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any minting/burning of tokens\\n     *\\n     * Calling conditions:\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address, address, uint256) internal virtual {}\\n}\\n\",\"keccak256\":\"0xda0d5fdff23e71006ee342b6db0f28459b1219eb4d8a169c18d52563ae04f5ab\",\"license\":\"MIT\"},\"contracts/tokens/SBT/extensions/ISBTEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"../ISBT.sol\\\";\\n\\n/**\\n * @title SBT Soulbound Token Standard, optional enumeration extension\\n */\\ninterface ISBTEnumerable is ISBT {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(\\n        address owner,\\n        uint256 index\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7678a1100f3e14496e671d2161ba347d427c88e0f2eba0b45a4a6bc27e15a4c9\",\"license\":\"MIT\"},\"contracts/tokens/SBT/extensions/ISBTMetadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"../ISBT.sol\\\";\\n\\n/**\\n * @title SBT Soulbound Token Standard, optional metadata extension\\n */\\ninterface ISBTMetadata is ISBT {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xec16c2d3a4f22312b2e5f6bde96a477ad05786431f6a908f2ebea573bbf3f32b\",\"license\":\"MIT\"},\"contracts/tokens/SBT/extensions/SBTBurnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport \\\"../SBT.sol\\\";\\n\\n/**\\n * @title SBT Burnable Token\\n * @dev SBT Token that can be burned (destroyed).\\n */\\nabstract contract SBTBurnable is Context, SBT {\\n    /**\\n     * @dev Burns `tokenId`. See {SBT-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        //solhint-disable-next-line max-line-length\\n        require(\\n            _isOwner(_msgSender(), tokenId),\\n            \\\"SBT: caller is not token owner\\\"\\n        );\\n        _burn(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xbf3ccb2414d17021e622373983f559730f45803262bc837fd4def17ba08ca3ff\",\"license\":\"MIT\"},\"contracts/tokens/SBT/extensions/SBTEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"../SBT.sol\\\";\\nimport \\\"./ISBTEnumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {SBT} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract SBTEnumerable is SBT, ISBTEnumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(IERC165, SBT) returns (bool) {\\n        return\\n            interfaceId == type(ISBTEnumerable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {ISBTEnumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(\\n        address owner,\\n        uint256 index\\n    ) public view virtual override returns (uint256) {\\n        require(\\n            index < SBT.balanceOf(owner),\\n            \\\"SBTEnumerable: owner index out of bounds\\\"\\n        );\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {ISBTEnumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {ISBTEnumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(\\n        uint256 index\\n    ) public view virtual override returns (uint256) {\\n        require(\\n            index < SBTEnumerable.totalSupply(),\\n            \\\"SBTEnumerable: global index out of bounds\\\"\\n        );\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = SBT.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(\\n        address from,\\n        uint256 tokenId\\n    ) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = SBT.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x6535b79ebe3aebaa913e1a9d6c1785fec5a2b2173c12c22ec242e80d56bf4b6d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106103405760003560e01c8062bdfde51461034557806301ffc9a7146103675780630513c3e91461039d57806306fdde03146103ca5780630f2e68af146103ec578063102005191461041957806313150b481461043b57806317fcb39b1461045e57806318160ddd1461047e5780631830e881146104935780631f37c124146104a9578063217a2c7b146104bf57806323af4e17146104df578063248a9ca3146104ff578063289c686b1461051f578063294cdf0d1461053f5780632f2ff15d1461055f5780632f745c591461057f57806336568abe1461059f57806339a51be5146105bf5780633ad3033e146105df5780633c72ae70146105ff578063412736571461061f57806341c04d5e1461063f57806342966c681461066157806346877b1a1461068157806346b2b087146106a15780634962a158146106d35780634cf12d26146106f35780634f558e79146107135780634f6ccce7146107335780635141453e146107535780636352211e146107665780636817c76c146107865780636a6278421461079c57806370a08231146107af578063719d0f2b146107cf57806376ad1997146107ef578063776ce6a11461080f578063776d1a541461082457806377bed5ed1461083a5780637a0d16461461085a5780637db8cb681461088a5780637e669891146108aa5780638d018461146108d75780638ec9c93b146108f757806391d148541461090d578063920ffa261461092d57806393702f331461094d57806394a665e91461096d57806395d89b411461098d578063965306aa146109a257806398acb9a9146109c2578063992642e5146109d557806399b589cb146109f5578063a217fddf14610a15578063a498342114610a2a578063b507d48114610a4a578063b79636b614610a68578063b97d6b2314610a88578063c1177d1914610a9e578063c31c9c0714610abe578063c86aadb614610ade578063c87b56dd14610afe578063d539139314610b1e578063d547741f14610b40578063d6e6eb9f14610b60578063da058ae314610b76578063eb93e85514610b96578063ebda439614610bc4578063ee1fe2ad14610be4578063ee7a9ec514610bf7578063f4a0a52814610c17578063fd48ac8314610c37575b600080fd5b34801561035157600080fd5b50610365610360366004613472565b610c57565b005b34801561037357600080fd5b506103876103823660046134ae565b610c8b565b60405161039491906134d9565b60405180910390f35b3480156103a957600080fd5b506103bd6103b8366004613472565b610c9c565b6040516103949190613507565b3480156103d657600080fd5b506103df610cc6565b604051610394919061357f565b3480156103f857600080fd5b50601d5461040c906001600160a01b031681565b60405161039491906135c8565b34801561042557600080fd5b5061042e610d58565b6040516103949190613633565b34801561044757600080fd5b50610451601a5481565b604051610394919061364a565b34801561046a57600080fd5b506002546103bd906001600160a01b031681565b34801561048a57600080fd5b50601154610451565b34801561049f57600080fd5b5061045160165481565b3480156104b557600080fd5b5061045160175481565b3480156104cb57600080fd5b506104516104da36600461366c565b610db9565b3480156104eb57600080fd5b506103656104fa3660046136a9565b610dcc565b34801561050b57600080fd5b5061045161051a366004613472565b610e29565b34801561052b57600080fd5b5061036561053a366004613472565b610e3e565b34801561054b57600080fd5b5061045161055a3660046136a9565b610eb1565b34801561056b57600080fd5b5061036561057a3660046136ca565b610ebe565b34801561058b57600080fd5b5061045161059a36600461366c565b610edf565b3480156105ab57600080fd5b506103656105ba3660046136ca565b610f3a565b3480156105cb57600080fd5b506008546103bd906001600160a01b031681565b3480156105eb57600080fd5b506103656105fa3660046136a9565b610f70565b34801561060b57600080fd5b5061036561061a366004613472565b610fcd565b34801561062b57600080fd5b5061036561063a3660046136a9565b611040565b34801561064b57600080fd5b506104516000805160206143f083398151915281565b34801561066d57600080fd5b5061036561067c366004613472565b61109d565b34801561068d57600080fd5b5061036561069c3660046136a9565b6110cf565b3480156106ad57600080fd5b506106c16106bc3660046137eb565b61112c565b60405161039496959493929190613825565b3480156106df57600080fd5b506103656106ee366004613472565b6111fb565b3480156106ff57600080fd5b506103df61070e3660046137eb565b61126e565b34801561071f57600080fd5b5061038761072e366004613472565b611338565b34801561073f57600080fd5b5061045161074e366004613472565b611343565b610451610761366004613879565b611391565b34801561077257600080fd5b506103bd610781366004613472565b6113d6565b34801561079257600080fd5b5061045160155481565b6104516107aa3660046136a9565b6113e1565b3480156107bb57600080fd5b506104516107ca3660046136a9565b6113ee565b3480156107db57600080fd5b506104516107ea3660046136a9565b611432565b3480156107fb57600080fd5b5061036561080a3660046136a9565b61152d565b34801561081b57600080fd5b506103df61158a565b34801561083057600080fd5b5061045160185481565b34801561084657600080fd5b5060145461040c906001600160a01b031681565b34801561086657600080fd5b506103876108753660046136a9565b60056020526000908152604090205460ff1681565b34801561089657600080fd5b506103656108a5366004613472565b611610565b3480156108b657600080fd5b506108ca6108c5366004613472565b611683565b6040516103949190613983565b3480156108e357600080fd5b506103656108f23660046136a9565b611733565b34801561090357600080fd5b5061045160095481565b34801561091957600080fd5b506103876109283660046136ca565b6117cf565b34801561093957600080fd5b506103bd6109483660046137eb565b6117f8565b34801561095957600080fd5b506103df6109683660046136a9565b6118b9565b34801561097957600080fd5b506103656109883660046136a9565b6118d1565b34801561099957600080fd5b506103df611a3e565b3480156109ae57600080fd5b506103876109bd3660046137eb565b611a4d565b6104516109d0366004613994565b611af9565b3480156109e157600080fd5b506003546103bd906001600160a01b031681565b348015610a0157600080fd5b506007546103bd906001600160a01b031681565b348015610a2157600080fd5b50610451600081565b348015610a3657600080fd5b50610365610a45366004613472565b611bd8565b348015610a5657600080fd5b50601d546001600160a01b031661040c565b348015610a7457600080fd5b506108ca610a833660046136a9565b611c0c565b348015610a9457600080fd5b5061045160195481565b348015610aaa57600080fd5b50610451610ab9366004613472565b611c68565b348015610aca57600080fd5b506001546103bd906001600160a01b031681565b348015610aea57600080fd5b50610365610af93660046136a9565b611d20565b348015610b0a57600080fd5b506103df610b19366004613472565b611dcc565b348015610b2a57600080fd5b5061045160008051602061441083398151915281565b348015610b4c57600080fd5b50610365610b5b3660046136ca565b611e32565b348015610b6c57600080fd5b50610451600a5481565b348015610b8257600080fd5b50610365610b913660046136a9565b611e4e565b348015610ba257600080fd5b50610bb6610bb13660046136a9565b611eab565b604051610394929190613a40565b348015610bd057600080fd5b506004546103bd906001600160a01b031681565b610451610bf2366004613a5b565b611ecd565b348015610c0357600080fd5b50610365610c12366004613a9c565b611f04565b348015610c2357600080fd5b50610365610c32366004613472565b611f88565b348015610c4357600080fd5b50610365610c52366004613472565b611ffb565b6000610c628161206e565b600954821415610c855760405163c23f6ccb60e01b815260040160405180910390fd5b50600955565b6000610c9682612078565b92915050565b60068181548110610cac57600080fd5b6000918252602090912001546001600160a01b0316905081565b6060600b8054610cd590613ad3565b80601f0160208091040260200160405190810160405280929190818152602001828054610d0190613ad3565b8015610d4e5780601f10610d2357610100808354040283529160200191610d4e565b820191906000526020600020905b815481529060010190602001808311610d3157829003601f168201915b5050505050905090565b60606006805480602002602001604051908101604052809291908181526020018280548015610d4e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610d92575050505050905090565b6000610dc5838361209d565b9392505050565b6000610dd78161206e565b6003546001600160a01b0383811691161415610e065760405163c23f6ccb60e01b815260040160405180910390fd5b50600380546001600160a01b0319166001600160a01b0392909216919091179055565b60009081526020819052604090206001015490565b610e496000336117cf565b158015610e6b5750610e696000805160206143f0833981519152336117cf565b155b15610e89576040516326f0f48160e01b815260040160405180910390fd5b806017541415610eac5760405163c23f6ccb60e01b815260040160405180910390fd5b601755565b6000610c96826000610edf565b610ec782610e29565b610ed08161206e565b610eda838361210a565b505050565b6000610eea836113ee565b8210610f115760405162461bcd60e51b8152600401610f0890613b48565b60405180910390fd5b506001600160a01b03919091166000908152600f60209081526040808320938352929052205490565b6001600160a01b0381163314610f625760405162461bcd60e51b8152600401610f0890613ba4565b610f6c828261218e565b5050565b6000610f7b8161206e565b6014546001600160a01b0383811691161415610faa5760405163c23f6ccb60e01b815260040160405180910390fd5b50601480546001600160a01b0319166001600160a01b0392909216919091179055565b610fd86000336117cf565b158015610ffa5750610ff86000805160206143f0833981519152336117cf565b155b15611018576040516326f0f48160e01b815260040160405180910390fd5b80601854141561103b5760405163c23f6ccb60e01b815260040160405180910390fd5b601855565b600061104b8161206e565b6001546001600160a01b038381169116141561107a5760405163c23f6ccb60e01b815260040160405180910390fd5b50600180546001600160a01b0319166001600160a01b0392909216919091179055565b6110a733826121f3565b6110c35760405162461bcd60e51b8152600401610f0890613beb565b6110cc81612216565b50565b60006110da8161206e565b6008546001600160a01b03838116911614156111095760405163c23f6ccb60e01b815260040160405180910390fd5b50600880546001600160a01b0319166001600160a01b0392909216919091179055565b601d5460609060009081908190819081906001600160a01b031661116357604051636d9e949f60e01b815260040160405180910390fd5b601d546040516346b2b08760e01b81526001600160a01b03909116906346b2b08790611193908a9060040161357f565b60006040518083038186803b1580156111ab57600080fd5b505afa1580156111bf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111e79190810190613c71565b949c939b5091995097509550909350915050565b6112066000336117cf565b15801561122857506112266000805160206143f0833981519152336117cf565b155b15611246576040516326f0f48160e01b815260040160405180910390fd5b8060165414156112695760405163c23f6ccb60e01b815260040160405180910390fd5b601655565b601d546060906001600160a01b031661129a57604051636d9e949f60e01b815260040160405180910390fd5b601d546040516346b2b08760e01b81526000916001600160a01b0316906346b2b087906112cb90869060040161357f565b60006040518083038186803b1580156112e357600080fd5b505afa1580156112f7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261131f9190810190613c71565b5050509250505061132f81611dcc565b9150505b919050565b6000610c96826122b0565b600061134e60115490565b821061136c5760405162461bcd60e51b8152600401610f0890613d5a565b6011828154811061137f5761137f613d6a565b90600052602060002001549050919050565b601d546000906001600160a01b03166113bd57604051636d9e949f60e01b815260040160405180910390fd5b6113cb600086868686611af9565b90505b949350505050565b6000610c96826122cd565b6000610c96600083611ecd565b60006001600160a01b0382166114165760405162461bcd60e51b8152600401610f0890613dc3565b506001600160a01b03166000908152600e602052604090205490565b600060155460001480156114465750601654155b1561145357506000919050565b6004546001600160a01b03838116911614801561148857506001600160a01b03821660009081526005602052604090205460ff165b801561149657506000601654115b156114a357505060165490565b6003546001600160a01b0383811691161480156114d857506001600160a01b03821660009081526005602052604090205460ff165b156114e557505060155490565b6001600160a01b03821660009081526005602052604090205460ff161561151257610c9682601554612302565b81604051630ac29ab760e31b8152600401610f089190613507565b60006115388161206e565b6004546001600160a01b03838116911614156115675760405163c23f6ccb60e01b815260040160405180910390fd5b50600480546001600160a01b0319166001600160a01b0392909216919091179055565b601d546040805163776ce6a160e01b815290516060926001600160a01b03169163776ce6a1916004808301926000929190829003018186803b1580156115cf57600080fd5b505afa1580156115e3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261160b9190810190613dd3565b905090565b61161b6000336117cf565b15801561163d575061163b6000805160206143f0833981519152336117cf565b155b1561165b576040516326f0f48160e01b815260040160405180910390fd5b80601a54141561167e5760405163c23f6ccb60e01b815260040160405180910390fd5b601a55565b601d546060906001600160a01b03166116af57604051636d9e949f60e01b815260040160405180910390fd5b601d54604051637e66989160e01b81526001600160a01b0390911690637e669891906116df90859060040161364a565b60006040518083038186803b1580156116f757600080fd5b505afa15801561170b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c969190810190613ecb565b61173e6000336117cf565b158015611760575061175e6000805160206143f0833981519152336117cf565b155b1561177e576040516326f0f48160e01b815260040160405180910390fd5b6007546001600160a01b03828116911614156117ad5760405163c23f6ccb60e01b815260040160405180910390fd5b600780546001600160a01b0319166001600160a01b0392909216919091179055565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b601d546000906001600160a01b031661182457604051636d9e949f60e01b815260040160405180910390fd5b601d546040516346b2b08760e01b81526000916001600160a01b0316906346b2b0879061185590869060040161357f565b60006040518083038186803b15801561186d57600080fd5b505afa158015611881573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118a99190810190613c71565b5050509250505061132f816122cd565b606060006118c683610eb1565b905061132f81611dcc565b60006118dc8161206e565b6001600160a01b03821660009081526005602052604090205460ff1661191757816040516318317bd560e01b8152600401610f089190613507565b6001600160a01b0382166000908152600560205260408120805460ff191690555b600654811015610eda57826001600160a01b03166006828154811061195f5761195f613d6a565b6000918252602090912001546001600160a01b03161415611a2c576006805461198a90600190613f1b565b8154811061199a5761199a613d6a565b600091825260209091200154600680546001600160a01b0390921691839081106119c6576119c6613d6a565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506006805480611a0557611a05613f32565b600082815260209020810160001990810180546001600160a01b0319169055019055505050565b80611a3681613f48565b915050611938565b6060600c8054610cd590613ad3565b601d546000906001600160a01b0316611a7957604051636d9e949f60e01b815260040160405180910390fd5b601d54604051634b29835560e11b81526001600160a01b039091169063965306aa90611aa990859060040161357f565b60206040518083038186803b158015611ac157600080fd5b505afa158015611ad5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c969190613f63565b601d546000906001600160a01b0316611b2557604051636d9e949f60e01b815260040160405180910390fd5b611b2d612495565b6000611b398787611ecd565b601d546040516303dd904360e41b81529192506001600160a01b031690633dd9043090611b70908990899089908990600401613f84565b602060405180830381600087803b158015611b8a57600080fd5b505af1158015611b9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bc29190613fc5565b509050611bcf6001601c55565b95945050505050565b6000611be38161206e565b600a54821415611c065760405163c23f6ccb60e01b815260040160405180910390fd5b50600a55565b601d546060906001600160a01b0316611c3857604051636d9e949f60e01b815260040160405180910390fd5b601d54604051635bcb1b5b60e11b81526001600160a01b039091169063b79636b6906116df908590600401613507565b6014546000906001600160a01b0316611c9457604051630d7fe67b60e41b815260040160405180910390fd5b6000611c9f836122cd565b60145460405163294cdf0d60e01b81529192506001600160a01b03169063294cdf0d90611cd0908490600401613507565b60206040518083038186803b158015611ce857600080fd5b505afa158015611cfc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132f9190613fc5565b6000611d2b8161206e565b6001600160a01b03821660009081526005602052604090205460ff1615611d655760405163f411c32760e01b815260040160405180910390fd5b506001600160a01b03166000818152600560205260408120805460ff191660019081179091556006805491820181559091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0180546001600160a01b0319169091179055565b6060611dd7826124bf565b6000611de16124e4565b90506000815111611e01576040518060200160405280600081525061132f565b80611e0b846124f3565b604051602001611e1c929190614008565b6040516020818303038152906040529392505050565b611e3b82610e29565b611e448161206e565b610eda838361218e565b6000611e598161206e565b6002546001600160a01b0383811691161415611e885760405163c23f6ccb60e01b815260040160405180910390fd5b50600280546001600160a01b0319166001600160a01b0392909216919091179055565b600080611eb783611432565b915081611ec4848461209d565b91509150915091565b600080611ed9836113ee565b1115611efa57816040516312d5c31d60e01b8152600401610f089190613507565b610dc5838361258f565b6000611f0f8161206e565b6001600160a01b038216611f365760405163d92e233d60e01b815260040160405180910390fd5b601d546001600160a01b0383811691161415611f655760405163c23f6ccb60e01b815260040160405180910390fd5b50601d80546001600160a01b0319166001600160a01b0392909216919091179055565b611f936000336117cf565b158015611fb55750611fb36000805160206143f0833981519152336117cf565b155b15611fd3576040516326f0f48160e01b815260040160405180910390fd5b806015541415611ff65760405163c23f6ccb60e01b815260040160405180910390fd5b601555565b6120066000336117cf565b15801561202857506120266000805160206143f0833981519152336117cf565b155b15612046576040516326f0f48160e01b815260040160405180910390fd5b8060195414156120695760405163c23f6ccb60e01b815260040160405180910390fd5b601955565b6110cc81336125f3565b60006001600160e01b0319821663780e9d6360e01b1480610c965750610c968261264c565b6009546000908190156120d8576003546001600160a01b03858116911614156120c957506009546120d8565b6120d584600954612302565b90505b600a5415610dc5576113ce61210360646120fd600a548761268c90919063ffffffff16565b90612698565b82906126a4565b61211482826117cf565b610f6c576000828152602081815260408083206001600160a01b03851684529091529020805460ff1916600117905561214a3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61219882826117cf565b15610f6c576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000806121ff836122cd565b6001600160a01b0385811691161491505092915050565b6000612221826122cd565b905061222f816000846126b0565b6001600160a01b0381166000908152600e60205260408120805460019290612258908490613f1b565b90915550506000828152600d602052604080822080546001600160a01b03191690555183916001600160a01b038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59190a35050565b6000908152600d60205260409020546001600160a01b0316151590565b6000818152600d60205260408120546001600160a01b031680610c965760405162461bcd60e51b8152600401610f0890614062565b60008160008111801561231e57506001546001600160a01b0316155b1561233c5760405163fca2174f60e01b815260040160405180910390fd5b60008111801561235557506002546001600160a01b0316155b156123735760405163fca2174f60e01b815260040160405180910390fd5b60008111801561238c57506003546001600160a01b0316155b156123aa5760405163fca2174f60e01b815260040160405180910390fd5b6000811180156123c357506007546001600160a01b0316155b156123e15760405163fca2174f60e01b815260040160405180910390fd5b6001600160a01b03841660009081526005602052604090205460ff16158061241657506003546001600160a01b038581169116145b15612436578360405163961c9a4f60e01b8152600401610f089190613507565b82612444576000915061248e565b6001600160a01b0384166124765760025460035461246f916001600160a01b039081169116856126bb565b915061248e565b60035461246f9085906001600160a01b0316856126bb565b5092915050565b6002601c5414156124b85760405162461bcd60e51b8152600401610f08906140a6565b6002601c55565b6124c8816122b0565b6110cc5760405162461bcd60e51b8152600401610f0890614062565b606060138054610cd590613ad3565b6060600061250083612779565b60010190506000816001600160401b0381111561251f5761251f6136fd565b6040519080825280601f01601f191660200182016040528015612549576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461258257612587565b612553565b509392505050565b60006000805160206144108339815191526125a98161206e565b6000806125b586611eab565b915091506125c486838361284f565b60006125cf601b5490565b90506125df601b80546001019055565b6125e98682612c0c565b9695505050505050565b6125fd82826117cf565b610f6c5761260a81612ce8565b612615836020612cfa565b6040516020016126269291906140cc565b60408051601f198184030181529082905262461bcd60e51b8252610f089160040161357f565b60006001600160e01b031982166313f2a32f60e01b148061267d57506001600160e01b03198216635b5e139f60e01b145b80610c965750610c9682612e65565b6000610dc5828461411e565b6000610dc5828461413d565b6000610dc58284614151565b610eda838383612e9a565b60006060806126ca8686612f52565b6001546040516307c0329d60e21b81529192506001600160a01b031690631f00ca74906126fd9087908590600401614169565b60006040518083038186803b15801561271557600080fd5b505afa158015612729573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261275191908101906141fe565b91508160008151811061276657612766613d6a565b6020026020010151925050509392505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106127b85772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6904ee2d6d415b85acef8160201b83106127e2576904ee2d6d415b85acef8160201b830492506020015b662386f26fc10000831061280057662386f26fc10000830492506010015b6305f5e1008310612818576305f5e100830492506008015b612710831061282c57612710830492506004015b6064831061283e576064830492506002015b600a8310610c965760010192915050565b61285982826126a4565b60008111801561287257506001546001600160a01b0316155b156128905760405163fca2174f60e01b815260040160405180910390fd5b6000811180156128a957506002546001600160a01b0316155b156128c75760405163fca2174f60e01b815260040160405180910390fd5b6000811180156128e057506003546001600160a01b0316155b156128fe5760405163fca2174f60e01b815260040160405180910390fd5b60008111801561291757506007546001600160a01b0316155b156129355760405163fca2174f60e01b815260040160405180910390fd5b82158015612941575081155b1561294b57612c06565b60008211801561296457506008546001600160a01b0316155b156129825760405163910af6f560e01b815260040160405180910390fd5b6001600160a01b03841660009081526005602052604090205460ff166129bd5783604051630ac29ab760e31b8152600401610f089190613507565b6001600160a01b038416612bc2576129d583836126a4565b341015612a00576129e683836126a4565b60405163091a6d0f60e01b8152600401610f08919061364a565b8215612a8a576007546040516000916001600160a01b0316908590612a2490614238565b60006040518083038185875af1925050503d8060008114612a61576040519150601f19603f3d011682016040523d82523d6000602084013e612a66565b606091505b5050905080612a88576040516312171d8360e31b815260040160405180910390fd5b505b8115612b14576008546040516000916001600160a01b0316908490612aae90614238565b60006040518083038185875af1925050503d8060008114612aeb576040519150601f19603f3d011682016040523d82523d6000602084013e612af0565b606091505b5050905080612b12576040516312171d8360e31b815260040160405180910390fd5b505b612b1e83836126a4565b341115612bbd576000612b3b612b3485856126a4565b34906130e4565b90506000336001600160a01b031682604051612b5690614238565b60006040518083038185875af1925050503d8060008114612b93576040519150601f19603f3d011682016040523d82523d6000602084013e612b98565b606091505b5050905080612bba57604051633c31275160e21b815260040160405180910390fd5b50505b612c06565b8215612be457600754612be4906001600160a01b0386811691339116866130f0565b8115612c0657600854612c06906001600160a01b0386811691339116856130f0565b50505050565b6001600160a01b038216612c325760405162461bcd60e51b8152600401610f0890614277565b612c3b816122b0565b15612c585760405162461bcd60e51b8152600401610f08906142b7565b612c64600083836126b0565b6001600160a01b0382166000908152600e60205260408120805460019290612c8d908490614151565b90915550506000818152600d602052604080822080546001600160a01b0319166001600160a01b038616908117909155905183927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688591a35050565b6060610c966001600160a01b03831660145b60606000612d0983600261411e565b612d14906002614151565b6001600160401b03811115612d2b57612d2b6136fd565b6040519080825280601f01601f191660200182016040528015612d55576020820181803683370190505b509050600360fc1b81600081518110612d7057612d70613d6a565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110612d9f57612d9f613d6a565b60200101906001600160f81b031916908160001a9053506000612dc384600261411e565b612dce906001614151565b90505b6001811115612e46576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110612e0257612e02613d6a565b1a60f81b828281518110612e1857612e18613d6a565b60200101906001600160f81b031916908160001a90535060049490941c93612e3f816142c7565b9050612dd1565b508315610dc55760405162461bcd60e51b8152600401610f0890614310565b60006001600160e01b03198216637965db0b60e01b1480610c9657506301ffc9a760e01b6001600160e01b0319831614610c96565b6001600160a01b038316612ef557612ef081601180546000838152601260205260408120829055600182018355919091527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c680155565b612f18565b816001600160a01b0316836001600160a01b031614612f1857612f188382613148565b6001600160a01b038216612f2f57610eda816131e5565b826001600160a01b0316826001600160a01b031614610eda57610eda8282613294565b6002546060906001600160a01b0384811691161480612f7e57506002546001600160a01b038381169116145b1561304857604080516002808252606082018352600092602083019080368337019050506002549091506001600160a01b03858116911614612fc05783612fcd565b6002546001600160a01b03165b81600081518110612fe057612fe0613d6a565b6001600160a01b0392831660209182029290920101526002548482169116146130095782613016565b6002546001600160a01b03165b8160018151811061302957613029613d6a565b6001600160a01b03909216602092830291909101909101529050610c96565b6040805160038082526080820190925260009160208201606080368337019050509050838160008151811061307f5761307f613d6a565b6001600160a01b0392831660209182029290920101526002548251911690829060019081106130b0576130b0613d6a565b60200260200101906001600160a01b031690816001600160a01b031681525050828160028151811061302957613029613d6a565b6000610dc58284613f1b565b612c06846323b872dd60e01b85858560405160240161311193929190614320565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526132d8565b60006001613155846113ee565b61315f9190613f1b565b6000838152601060205260409020549091508082146131b2576001600160a01b0384166000908152600f602090815260408083208584528252808320548484528184208190558352601090915290208190555b5060009182526010602090815260408084208490556001600160a01b039094168352600f81528383209183525290812055565b6011546000906131f790600190613f1b565b6000838152601260205260408120546011805493945090928490811061321f5761321f613d6a565b90600052602060002001549050806011838154811061324057613240613d6a565b600091825260208083209091019290925582815260129091526040808220849055858252812055601180548061327857613278613f32565b6001900381819060005260206000200160009055905550505050565b600061329f836113ee565b6001600160a01b039093166000908152600f60209081526040808320868452825280832085905593825260109052919091209190915550565b600061332d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661336a9092919063ffffffff16565b905080516000148061334e57508080602001905181019061334e9190613f63565b610eda5760405162461bcd60e51b8152600401610f089061438f565b60606113ce848460008585600080866001600160a01b03168587604051613391919061439f565b60006040518083038185875af1925050503d80600081146133ce576040519150601f19603f3d011682016040523d82523d6000602084013e6133d3565b606091505b50915091506133e4878383876133ef565b979650505050505050565b6060831561342b578251613424576001600160a01b0385163b6134245760405162461bcd60e51b8152600401610f08906143df565b50816113ce565b6113ce83838151156134405781518083602001fd5b8060405162461bcd60e51b8152600401610f08919061357f565b805b81146110cc57600080fd5b8035610c968161345a565b60006020828403121561348757613487600080fd5b60006113ce8484613467565b6001600160e01b0319811661345c565b8035610c9681613493565b6000602082840312156134c3576134c3600080fd5b60006113ce84846134a3565b8015155b82525050565b60208101610c9682846134cf565b6001600160a01b031690565b6000610c96826134e7565b6134d3816134f3565b60208101610c9682846134fe565b60005b83811015613530578181015183820152602001613518565b83811115612c065750506000910152565b601f01601f191690565b6000613555825190565b80845260208401935061356c818560208601613515565b61357581613541565b9093019392505050565b60208082528101610dc5818461354b565b6000610c966135a46135a1846134e7565b90565b6134e7565b6000610c9682613590565b6000610c96826135a9565b6134d3816135b4565b60208101610c9682846135bf565b60006135e283836134fe565b505060200190565b60006135f4825190565b80845260209384019383018060005b8381101561362857815161361788826135d6565b975060208301925050600101613603565b509495945050505050565b60208082528101610dc581846135ea565b806134d3565b60208101610c968284613644565b61345c816134f3565b8035610c9681613658565b6000806040838503121561368257613682600080fd5b600061368e8585613661565b925050602061369f85828601613467565b9150509250929050565b6000602082840312156136be576136be600080fd5b60006113ce8484613661565b600080604083850312156136e0576136e0600080fd5b60006136ec8585613467565b925050602061369f85828601613661565b634e487b7160e01b600052604160045260246000fd5b61371c82613541565b81018181106001600160401b0382111715613739576137396136fd565b6040525050565b600061374b60405190565b90506113338282613713565b60006001600160401b03821115613770576137706136fd565b61377982613541565b60200192915050565b82818337506000910152565b60006137a161379c84613757565b613740565b9050828152602081018484840111156137bc576137bc600080fd5b612587848285613782565b600082601f8301126137db576137db600080fd5b81356113ce84826020860161378e565b60006020828403121561380057613800600080fd5b81356001600160401b0381111561381957613819600080fd5b6113ce848285016137c7565b60c08082528101613836818961354b565b905061384560208301886134cf565b6138526040830187613644565b61385f6060830186613644565b61386c6080830185613644565b6133e460a08301846134cf565b6000806000806080858703121561389257613892600080fd5b600061389e8787613661565b94505060208501356001600160401b038111156138bd576138bd600080fd5b6138c9878288016137c7565b93505060406138da87828801613467565b92505060608501356001600160401b038111156138f9576138f9600080fd5b613905878288016137c7565b91505092959194509250565b6000610dc5838361354b565b6000613927825190565b808452602084019350836020820285016139418560200190565b8060005b85811015613976578484038952815161395e8582613911565b94506020830160209a909a0199925050600101613945565b5091979650505050505050565b60208082528101610dc5818461391d565b600080600080600060a086880312156139af576139af600080fd5b60006139bb8888613661565b95505060206139cc88828901613661565b94505060408601356001600160401b038111156139eb576139eb600080fd5b6139f7888289016137c7565b9350506060613a0888828901613467565b92505060808601356001600160401b03811115613a2757613a27600080fd5b613a33888289016137c7565b9150509295509295909350565b60408101613a4e8285613644565b610dc56020830184613644565b60008060408385031215613a7157613a71600080fd5b60006136ec8585613661565b6000610c96826134f3565b61345c81613a7d565b8035610c9681613a88565b600060208284031215613ab157613ab1600080fd5b60006113ce8484613a91565b634e487b7160e01b600052602260045260246000fd5b600281046001821680613ae757607f821691505b60208210811415613afa57613afa613abd565b50919050565b602881526000602082017f534254456e756d657261626c653a206f776e657220696e646578206f7574206f8152676620626f756e647360c01b602082015291505b5060400190565b60208082528101610c9681613b00565b602f81526000602082017f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636581526e103937b632b9903337b91039b2b63360891b60208201529150613b41565b60208082528101610c9681613b58565b601e81526000602082017f5342543a2063616c6c6572206973206e6f7420746f6b656e206f776e65720000815291505b5060200190565b60208082528101610c9681613bb4565b6000613c0961379c84613757565b905082815260208101848484011115613c2457613c24600080fd5b612587848285613515565b600082601f830112613c4357613c43600080fd5b81516113ce848260208601613bfb565b80151561345c565b8051610c9681613c53565b8051610c968161345a565b60008060008060008060c08789031215613c8d57613c8d600080fd5b86516001600160401b03811115613ca657613ca6600080fd5b613cb289828a01613c2f565b9650506020613cc389828a01613c5b565b9550506040613cd489828a01613c66565b9450506060613ce589828a01613c66565b9350506080613cf689828a01613c66565b92505060a0613d0789828a01613c5b565b9150509295509295509295565b602981526000602082017f534254456e756d657261626c653a20676c6f62616c20696e646578206f7574208152686f6620626f756e647360b81b60208201529150613b41565b60208082528101610c9681613d14565b634e487b7160e01b600052603260045260246000fd5b602681526000602082017f5342543a2061646472657373207a65726f206973206e6f7420612076616c69648152651037bbb732b960d11b60208201529150613b41565b60208082528101610c9681613d80565b600060208284031215613de857613de8600080fd5b81516001600160401b03811115613e0157613e01600080fd5b6113ce84828501613c2f565b60006001600160401b03821115613e2657613e266136fd565b5060209081020190565b6000613e3e61379c84613e0d565b83815290506020808201908402830185811115613e5d57613e5d600080fd5b835b81811015613e9d5780516001600160401b03811115613e8057613e80600080fd5b808601613e8d8982613c2f565b8552505060209283019201613e5f565b5050509392505050565b600082601f830112613ebb57613ebb600080fd5b81516113ce848260208601613e30565b600060208284031215613ee057613ee0600080fd5b81516001600160401b03811115613ef957613ef9600080fd5b6113ce84828501613ea7565b634e487b7160e01b600052601160045260246000fd5b600082821015613f2d57613f2d613f05565b500390565b634e487b7160e01b600052603160045260246000fd5b6000600019821415613f5c57613f5c613f05565b5060010190565b600060208284031215613f7857613f78600080fd5b60006113ce8484613c5b565b60808101613f9282876134fe565b8181036020830152613fa4818661354b565b9050613fb36040830185613644565b81810360608301526125e9818461354b565b600060208284031215613fda57613fda600080fd5b60006113ce8484613c66565b6000613ff0825190565b613ffe818560208601613515565b9290920192915050565b60006140148285613fe6565b91506140208284613fe6565b64173539b7b760d91b81529150600582016113ce565b601581526000602082017414d0950e881a5b9d985b1a59081d1bdad95b881251605a1b81529150613be4565b60208082528101610c9681614036565b601f81526000602082017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081529150613be4565b60208082528101610c9681614072565b634e487b7160e01b600052601260045260246000fd5b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260170160006140f88285613fe6565b7001034b99036b4b9b9b4b733903937b6329607d1b815260110191506113ce8284613fe6565b600081600019048311821515161561413857614138613f05565b500290565b60008261414c5761414c6140b6565b500490565b6000821982111561416457614164613f05565b500190565b604081016141778285613644565b81810360208301526113ce81846135ea565b600061419761379c84613e0d565b838152905060208082019084028301858111156141b6576141b6600080fd5b835b81811015613e9d57806141cb8882613c66565b845250602092830192016141b8565b600082601f8301126141ee576141ee600080fd5b81516113ce848260208601614189565b60006020828403121561421357614213600080fd5b81516001600160401b0381111561422c5761422c600080fd5b6113ce848285016141da565b6000610c96826135a1565b601d81526000602082017f5342543a206d696e7420746f20746865207a65726f206164647265737300000081529150613be4565b60208082528101610c9681614243565b601981526000602082017814d0950e881d1bdad95b88185b1c9958591e481b5a5b9d1959603a1b81529150613be4565b60208082528101610c9681614287565b6000816142d6576142d6613f05565b506000190190565b60208082527f537472696e67733a20686578206c656e67746820696e73756666696369656e7491019081526000613be4565b60208082528101610c96816142de565b6060810161432e82866134fe565b61433b60208301856134fe565b6113ce6040830184613644565b602a81526000602082017f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b60208201529150613b41565b60208082528101610c9681614348565b6000610dc58284613fe6565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529150613be4565b60208082528101610c96816143ab56fe52eafc11f6f81f86878bffd31109a0d92f37506527754f00788853ff9f63b1309f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6a264697066735822122094be9ca07f525fe081d63af8a10cd91cf70af2905dc64ef7eb5fa4f97439466764736f6c63430008080033",
  "devdoc": {
    "author": "Masa Finance",
    "details": "Soulbound identity, that inherits from the SBT contract.",
    "kind": "dev",
    "methods": {
      "balanceOf(address)": {
        "details": "See {ISBT-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Burns `tokenId`. See {SBT-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator."
      },
      "constructor": {
        "details": "Creates a new soulbound identity, inheriting from the SBT contract.",
        "params": {
          "admin": "Administrator of the smart contract",
          "baseTokenURI": "Base URI of the token",
          "name": "Name of the token",
          "paymentParams": "Payment gateway params",
          "symbol": "Symbol of the token"
        }
      },
      "disablePaymentMethod(address)": {
        "details": "The caller must have the admin role to call this function",
        "params": {
          "_paymentMethod": "Token to remove"
        }
      },
      "enablePaymentMethod(address)": {
        "details": "The caller must have the admin role to call this function",
        "params": {
          "_paymentMethod": "New token to add"
        }
      },
      "exists(uint256)": {
        "details": "Returns true if the token has been minted",
        "params": {
          "tokenId": "Token to check"
        },
        "returns": {
          "_0": "True if the token exists"
        }
      },
      "getEnabledPaymentMethods()": {
        "details": "Returns the address of all available payment methods",
        "returns": {
          "_0": "Array of all enabled payment methods"
        }
      },
      "getExtension()": {
        "details": "This function returns the extension of the soul name",
        "returns": {
          "_0": "Extension of the soul name"
        }
      },
      "getIdentityId(uint256)": {
        "params": {
          "tokenId": "Id of the token"
        },
        "returns": {
          "_0": "Id of the identity"
        }
      },
      "getMintPrice(address)": {
        "details": "Returns current pricing for minting",
        "params": {
          "paymentMethod": "Address of token that user want to pay"
        },
        "returns": {
          "price": "Current price for minting in the given payment method"
        }
      },
      "getMintPriceWithProtocolFee(address)": {
        "details": "Returns current pricing for minting with protocol fee",
        "params": {
          "paymentMethod": "Address of token that user want to pay"
        },
        "returns": {
          "price": "Current price for minting in the given payment method",
          "protocolFee": "Current protocol fee for minting in the given payment method"
        }
      },
      "getProtocolFee(address,uint256)": {
        "details": "This method will calculate the protocol fee based on the payment method",
        "params": {
          "amount": "Price to be paid in the specified payment method",
          "paymentMethod": "Address of token that user want to pay"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getSoulName()": {
        "details": "This function returns the address of the SoulName contract linked to this identity",
        "returns": {
          "_0": "Address of the SoulName contract"
        }
      },
      "getSoulNames(address)": {
        "details": "This function queries all the identity names of the specified account",
        "params": {
          "owner": "Address of the owner of the identities"
        },
        "returns": {
          "sbtNames": "Array of soul names associated to the account"
        }
      },
      "getSoulNames(uint256)": {
        "details": "This function queries all the identity names of the specified identity Id",
        "params": {
          "tokenId": "TokenId of the identity"
        },
        "returns": {
          "sbtNames": "Array of soul names associated to the identity Id"
        }
      },
      "getTokenData(string)": {
        "details": "This function queries the information of a soul name",
        "params": {
          "name": "Name of the soul name"
        },
        "returns": {
          "active": "`true` if the soul name is active, `false` otherwise",
          "expirationDate": "Expiration date of the soul name",
          "identityId": "Identity id of the soul name",
          "linked": "`true` if the soul name is linked, `false` otherwise",
          "sbtName": "Soul name, in upper/lower case and extension",
          "tokenId": "SoulName id of the soul name"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isAvailable(string)": {
        "details": "This function queries if a soul name already exists and is in the available state",
        "params": {
          "name": "Name of the soul name"
        },
        "returns": {
          "available": "`true` if the soul name is available, `false` otherwise"
        }
      },
      "mint(address)": {
        "details": "The caller can only mint one identity per address",
        "params": {
          "to": "Address of the owner of the new identity"
        },
        "returns": {
          "_0": "The identity ID of the newly minted identity"
        }
      },
      "mint(address,address)": {
        "details": "The caller can only mint one identity per address",
        "params": {
          "paymentMethod": "Address of the payment method to use",
          "to": "Address of the owner of the new identity"
        },
        "returns": {
          "_0": "The identity ID of the newly minted identity"
        }
      },
      "mintIdentityWithName(address,address,string,uint256,string)": {
        "details": "The caller can only mint one identity per address, and the name must be unique",
        "params": {
          "_tokenURI": "URI of the NFT",
          "name": "Name of the new identity",
          "paymentMethod": "Address of the payment method to use",
          "to": "Address of the owner of the new identity",
          "yearsPeriod": "Years of validity of the name"
        }
      },
      "mintIdentityWithName(address,string,uint256,string)": {
        "details": "The caller can only mint one identity per address, and the name must be unique",
        "params": {
          "_tokenURI": "URI of the NFT",
          "name": "Name of the new identity",
          "to": "Address of the owner of the new identity",
          "yearsPeriod": "Years of validity of the name"
        }
      },
      "name()": {
        "details": "See {ISBTMetadata-name}."
      },
      "ownerOf(string)": {
        "details": "This function returns the owner address of the soul name identity specified by the name",
        "params": {
          "name": "Name of the soul name"
        },
        "returns": {
          "_0": "Address of the owner of the identity"
        }
      },
      "ownerOf(uint256)": {
        "details": "This function returns the owner address of the identity specified by the tokenId",
        "params": {
          "tokenId": "TokenId of the identity"
        },
        "returns": {
          "_0": "Address of the owner of the identity"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setAddLinkPrice(uint256)": {
        "details": "The caller must have the admin or project admin role to call this function",
        "params": {
          "_addLinkPrice": "New price for adding the link in SoulLinker in stable coin"
        }
      },
      "setAddLinkPriceMASA(uint256)": {
        "details": "The caller must have the admin or project admin role to call this function",
        "params": {
          "_addLinkPriceMASA": "New price for adding the link in SoulLinker in MASA"
        }
      },
      "setMasaToken(address)": {
        "details": "The caller must have the admin role to call this function It can be set to address(0) to disable paying in MASA",
        "params": {
          "_masaToken": "New utility token to pay the fee in"
        }
      },
      "setMintPrice(uint256)": {
        "details": "The caller must have the admin or project admin role to call this function",
        "params": {
          "_mintPrice": "New price of minting in stable coin"
        }
      },
      "setMintPriceMASA(uint256)": {
        "details": "The caller must have the admin or project admin role to call this function",
        "params": {
          "_mintPriceMASA": "New price of minting in MASA"
        }
      },
      "setProjectFeeReceiver(address)": {
        "details": "The caller must have the admin or project admin role to call this function",
        "params": {
          "_projectFeeReceiver": "New project fee receiver wallet"
        }
      },
      "setProtocolFeeAmount(uint256)": {
        "details": "The caller must have the admin role to call this function",
        "params": {
          "_protocolFeeAmount": "New protocol fee amount"
        }
      },
      "setProtocolFeePercent(uint256)": {
        "details": "The caller must have the admin role to call this function",
        "params": {
          "_protocolFeePercent": "New protocol fee percent"
        }
      },
      "setProtocolFeeReceiver(address)": {
        "details": "The caller must have the admin role to call this function",
        "params": {
          "_protocolFeeReceiver": "New protocol fee wallet"
        }
      },
      "setQueryLinkPrice(uint256)": {
        "details": "The caller must have the admin or project admin role to call this function",
        "params": {
          "_queryLinkPrice": "New price for reading data in SoulLinker in stable coin"
        }
      },
      "setQueryLinkPriceMASA(uint256)": {
        "details": "The caller must have the admin or project admin role to call this function",
        "params": {
          "_queryLinkPriceMASA": "New price for reading data in SoulLinker in MASA"
        }
      },
      "setSoulName(address)": {
        "details": "The caller must have the admin role to call this function",
        "params": {
          "_soulName": "Address of the SoulName contract"
        }
      },
      "setSoulboundIdentity(address)": {
        "details": "The caller must be the admin to call this function",
        "params": {
          "_soulboundIdentity": "Address of the SoulboundIdentity contract"
        }
      },
      "setStableCoin(address)": {
        "details": "The caller must have the admin role to call this function",
        "params": {
          "_stableCoin": "New stable coin to pay the fee in"
        }
      },
      "setSwapRouter(address)": {
        "details": "The caller must have the admin role to call this function",
        "params": {
          "_swapRouter": "New swap router address"
        }
      },
      "setWrappedNativeToken(address)": {
        "details": "The caller must have the admin role to call this function",
        "params": {
          "_wrappedNativeToken": "New wrapped native token address"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Interface identification is specified in ERC-165.",
        "params": {
          "interfaceId": "The interface identifier, as specified in ERC-165"
        },
        "returns": {
          "_0": "`true` if the contract implements `interfaceId` and  `interfaceId` is not 0xffffffff, `false` otherwise"
        }
      },
      "symbol()": {
        "details": "See {ISBTMetadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {ISBTEnumerable-tokenByIndex}."
      },
      "tokenOfOwner(address)": {
        "details": "This function returns the tokenId of the identity owned by an account",
        "params": {
          "owner": "Address of the owner of the identity"
        },
        "returns": {
          "_0": "TokenId of the identity owned by the account"
        }
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {ISBTEnumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(address)": {
        "details": "This function returns the token URI of the identity owned by an account",
        "params": {
          "owner": "Address of the owner of the identity"
        },
        "returns": {
          "_0": "URI of the identity owned by the account"
        }
      },
      "tokenURI(string)": {
        "details": "This function returns the token URI of the soul name identity specified by the name",
        "params": {
          "name": "Name of the soul name"
        },
        "returns": {
          "_0": "URI of the identity associated to a soul name"
        }
      },
      "tokenURI(uint256)": {
        "details": "Throws if `_tokenId` is not a valid SBT. URIs are defined in RFC  3986. The URI may point to a JSON file that conforms to the \"ERC721  Metadata JSON Schema\".",
        "params": {
          "tokenId": "SBT to get the URI of"
        },
        "returns": {
          "_0": "URI of the SBT"
        }
      },
      "totalSupply()": {
        "details": "See {ISBTEnumerable-totalSupply}."
      }
    },
    "title": "Soulbound Identity",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Creates a new soulbound identity"
      },
      "disablePaymentMethod(address)": {
        "notice": "Removes a token as a valid payment method"
      },
      "enablePaymentMethod(address)": {
        "notice": "Adds a new token as a valid payment method"
      },
      "exists(uint256)": {
        "notice": "Returns true if the token exists"
      },
      "getEnabledPaymentMethods()": {
        "notice": "Returns all available payment methods"
      },
      "getExtension()": {
        "notice": "Returns the extension of the soul name"
      },
      "getIdentityId(uint256)": {
        "notice": "Returns the identityId owned by the given token"
      },
      "getMintPrice(address)": {
        "notice": "Returns the price for minting"
      },
      "getMintPriceWithProtocolFee(address)": {
        "notice": "Returns the price for minting with protocol fee"
      },
      "getProtocolFee(address,uint256)": {
        "notice": "Calculates the protocol fee"
      },
      "getSoulName()": {
        "notice": "Returns the address of the SoulName contract linked to this identity"
      },
      "getSoulNames(address)": {
        "notice": "Returns all the active soul names of an account"
      },
      "getSoulNames(uint256)": {
        "notice": "Returns all the active soul names of an account"
      },
      "getTokenData(string)": {
        "notice": "Returns the information of a soul name"
      },
      "isAvailable(string)": {
        "notice": "Checks if a soul name is available"
      },
      "mint(address)": {
        "notice": "Mints a new soulbound identity"
      },
      "mint(address,address)": {
        "notice": "Mints a new soulbound identity"
      },
      "mintIdentityWithName(address,address,string,uint256,string)": {
        "notice": "Mints a new soulbound identity with a SoulName associated to it"
      },
      "mintIdentityWithName(address,string,uint256,string)": {
        "notice": "Mints a new soulbound identity with a SoulName associated to it"
      },
      "ownerOf(string)": {
        "notice": "Returns the owner address of a soul name"
      },
      "ownerOf(uint256)": {
        "notice": "Returns the owner address of an identity"
      },
      "setAddLinkPrice(uint256)": {
        "notice": "Sets the price for adding the link in SoulLinker in stable coin"
      },
      "setAddLinkPriceMASA(uint256)": {
        "notice": "Sets the price for adding the link in SoulLinker in MASA"
      },
      "setMasaToken(address)": {
        "notice": "Sets the utility token to pay the fee in (MASA)"
      },
      "setMintPrice(uint256)": {
        "notice": "Sets the price of minting in stable coin"
      },
      "setMintPriceMASA(uint256)": {
        "notice": "Sets the price of minting in MASA"
      },
      "setProjectFeeReceiver(address)": {
        "notice": "Set the project fee receiver wallet"
      },
      "setProtocolFeeAmount(uint256)": {
        "notice": "Set the protocol fee amount"
      },
      "setProtocolFeePercent(uint256)": {
        "notice": "Set the protocol fee percent"
      },
      "setProtocolFeeReceiver(address)": {
        "notice": "Set the protocol fee wallet"
      },
      "setQueryLinkPrice(uint256)": {
        "notice": "Sets the price for reading data in SoulLinker in stable coin"
      },
      "setQueryLinkPriceMASA(uint256)": {
        "notice": "Sets the price for reading data in SoulLinker in MASA"
      },
      "setSoulName(address)": {
        "notice": "Sets the SoulName contract address linked to this identity"
      },
      "setSoulboundIdentity(address)": {
        "notice": "Sets the SoulboundIdentity contract address linked to this SBT"
      },
      "setStableCoin(address)": {
        "notice": "Sets the stable coin to pay the fee in (USDC)"
      },
      "setSwapRouter(address)": {
        "notice": "Sets the swap router address"
      },
      "setWrappedNativeToken(address)": {
        "notice": "Sets the wrapped native token address"
      },
      "supportsInterface(bytes4)": {
        "notice": "Query if a contract implements an interface"
      },
      "tokenOfOwner(address)": {
        "notice": "Returns the identity id of an account"
      },
      "tokenURI(address)": {
        "notice": "Returns the URI of the owner of an identity"
      },
      "tokenURI(string)": {
        "notice": "Returns the URI of a soul name"
      },
      "tokenURI(uint256)": {
        "notice": "A distinct Uniform Resource Identifier (URI) for a given asset."
      }
    },
    "notice": "Soulbound token that represents an identity.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/SoulboundIdentity.sol:SoulboundIdentity",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 9918,
        "contract": "contracts/SoulboundIdentity.sol:SoulboundIdentity",
        "label": "swapRouter",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 9920,
        "contract": "contracts/SoulboundIdentity.sol:SoulboundIdentity",
        "label": "wrappedNativeToken",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 9922,
        "contract": "contracts/SoulboundIdentity.sol:SoulboundIdentity",
        "label": "stableCoin",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 9924,
        "contract": "contracts/SoulboundIdentity.sol:SoulboundIdentity",
        "label": "masaToken",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 9928,
        "contract": "contracts/SoulboundIdentity.sol:SoulboundIdentity",
        "label": "enabledPaymentMethod",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 9931,
        "contract": "contracts/SoulboundIdentity.sol:SoulboundIdentity",
        "label": "enabledPaymentMethods",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 9933,
        "contract": "contracts/SoulboundIdentity.sol:SoulboundIdentity",
        "label": "projectFeeReceiver",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 9935,
        "contract": "contracts/SoulboundIdentity.sol:SoulboundIdentity",
        "label": "protocolFeeReceiver",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 9937,
        "contract": "contracts/SoulboundIdentity.sol:SoulboundIdentity",
        "label": "protocolFeeAmount",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 9939,
        "contract": "contracts/SoulboundIdentity.sol:SoulboundIdentity",
        "label": "protocolFeePercent",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 12945,
        "contract": "contracts/SoulboundIdentity.sol:SoulboundIdentity",
        "label": "_name",
        "offset": 0,
        "slot": "11",
        "type": "t_string_storage"
      },
      {
        "astId": 12947,
        "contract": "contracts/SoulboundIdentity.sol:SoulboundIdentity",
        "label": "_symbol",
        "offset": 0,
        "slot": "12",
        "type": "t_string_storage"
      },
      {
        "astId": 12951,
        "contract": "contracts/SoulboundIdentity.sol:SoulboundIdentity",
        "label": "_owners",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 12955,
        "contract": "contracts/SoulboundIdentity.sol:SoulboundIdentity",
        "label": "_balances",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13414,
        "contract": "contracts/SoulboundIdentity.sol:SoulboundIdentity",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 13418,
        "contract": "contracts/SoulboundIdentity.sol:SoulboundIdentity",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 13421,
        "contract": "contracts/SoulboundIdentity.sol:SoulboundIdentity",
        "label": "_allTokens",
        "offset": 0,
        "slot": "17",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 13425,
        "contract": "contracts/SoulboundIdentity.sol:SoulboundIdentity",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 12031,
        "contract": "contracts/SoulboundIdentity.sol:SoulboundIdentity",
        "label": "_baseTokenURI",
        "offset": 0,
        "slot": "19",
        "type": "t_string_storage"
      },
      {
        "astId": 12034,
        "contract": "contracts/SoulboundIdentity.sol:SoulboundIdentity",
        "label": "soulboundIdentity",
        "offset": 0,
        "slot": "20",
        "type": "t_contract(ISoulboundIdentity)10954"
      },
      {
        "astId": 12036,
        "contract": "contracts/SoulboundIdentity.sol:SoulboundIdentity",
        "label": "mintPrice",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 12038,
        "contract": "contracts/SoulboundIdentity.sol:SoulboundIdentity",
        "label": "mintPriceMASA",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 12041,
        "contract": "contracts/SoulboundIdentity.sol:SoulboundIdentity",
        "label": "addLinkPrice",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 12044,
        "contract": "contracts/SoulboundIdentity.sol:SoulboundIdentity",
        "label": "addLinkPriceMASA",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 12047,
        "contract": "contracts/SoulboundIdentity.sol:SoulboundIdentity",
        "label": "queryLinkPrice",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      },
      {
        "astId": 12050,
        "contract": "contracts/SoulboundIdentity.sol:SoulboundIdentity",
        "label": "queryLinkPriceMASA",
        "offset": 0,
        "slot": "26",
        "type": "t_uint256"
      },
      {
        "astId": 12577,
        "contract": "contracts/SoulboundIdentity.sol:SoulboundIdentity",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "27",
        "type": "t_struct(Counter)3050_storage"
      },
      {
        "astId": 645,
        "contract": "contracts/SoulboundIdentity.sol:SoulboundIdentity",
        "label": "_status",
        "offset": 0,
        "slot": "28",
        "type": "t_uint256"
      },
      {
        "astId": 9485,
        "contract": "contracts/SoulboundIdentity.sol:SoulboundIdentity",
        "label": "soulName",
        "offset": 0,
        "slot": "29",
        "type": "t_contract(ISoulName)10890"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ISoulName)10890": {
        "encoding": "inplace",
        "label": "contract ISoulName",
        "numberOfBytes": "20"
      },
      "t_contract(ISoulboundIdentity)10954": {
        "encoding": "inplace",
        "label": "contract ISoulboundIdentity",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)3050_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 3049,
            "contract": "contracts/SoulboundIdentity.sol:SoulboundIdentity",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/SoulboundIdentity.sol:SoulboundIdentity",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/SoulboundIdentity.sol:SoulboundIdentity",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}