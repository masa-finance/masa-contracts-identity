{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/interfaces/ILinkableSBT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../tokens/SBT/ISBT.sol\";\n\ninterface ILinkableSBT is ISBT {\n    function addLinkPrice() external view returns (uint256);\n\n    function addLinkPriceMASA() external view returns (uint256);\n\n    function queryLinkPrice() external view returns (uint256);\n\n    function queryLinkPriceMASA() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/ISoulboundIdentity.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../tokens/SBT/ISBT.sol\";\n\nimport \"./ISoulName.sol\";\n\ninterface ISoulboundIdentity is ISBT {\n    function mint(address to) external returns (uint256);\n\n    function mintIdentityWithName(\n        address to,\n        string memory name,\n        uint256 yearsPeriod,\n        string memory _tokenURI\n    ) external returns (uint256);\n\n    function getSoulName() external view returns (ISoulName);\n\n    function tokenOfOwner(address owner) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/ISoulName.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\ninterface ISoulName {\n    function mint(\n        address to,\n        string memory name,\n        uint256 yearsPeriod,\n        string memory _tokenURI\n    ) external returns (uint256);\n\n    function getExtension() external view returns (string memory);\n\n    function isAvailable(\n        string memory name\n    ) external view returns (bool available);\n\n    function getTokenData(\n        string memory name\n    )\n        external\n        view\n        returns (\n            string memory sbtName,\n            bool linked,\n            uint256 identityId,\n            uint256 tokenId,\n            uint256 expirationDate,\n            bool active\n        );\n\n    function getTokenId(string memory name) external view returns (uint256);\n\n    function getSoulNames(\n        address owner\n    ) external view returns (string[] memory sbtNames);\n\n    function getSoulNames(\n        uint256 identityId\n    ) external view returns (string[] memory sbtNames);\n}\n"
    },
    "contracts/libraries/Errors.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nerror AddressDoesNotHaveIdentity(address to);\nerror AlreadyAdded();\nerror AuthorityNotExists(address authority);\nerror CallerNotOwner(address caller);\nerror CallerNotReader(address caller);\nerror CreditScoreAlreadyCreated(address to);\nerror IdentityAlreadyCreated(address to);\nerror IdentityOwnerIsReader(uint256 readerIdentityId);\nerror InsufficientEthAmount(uint256 amount);\nerror IdentityOwnerNotTokenOwner(uint256 tokenId, uint256 ownerIdentityId);\nerror InvalidPaymentMethod(address paymentMethod);\nerror InvalidSignature();\nerror InvalidSignatureDate(uint256 signatureDate);\nerror InvalidToken(address token);\nerror InvalidTokenURI(string tokenURI);\nerror LinkAlreadyExists(\n    address token,\n    uint256 tokenId,\n    uint256 readerIdentityId,\n    uint256 signatureDate\n);\nerror LinkAlreadyRevoked();\nerror LinkDoesNotExist();\nerror NameAlreadyExists(string name);\nerror NameNotFound(string name);\nerror NameRegisteredByOtherAccount(string name, uint256 tokenId);\nerror NotAuthorized(address signer);\nerror NonExistingErc20Token(address erc20token);\nerror NotLinkedToAnIdentitySBT();\nerror RefundFailed();\nerror SameValue();\nerror SBTAlreadyLinked(address token);\nerror SoulNameContractNotSet();\nerror TokenNotFound(uint256 tokenId);\nerror TransferFailed();\nerror URIAlreadyExists(string tokenURI);\nerror ValidPeriodExpired(uint256 expirationDate);\nerror ZeroAddress();\nerror ZeroLengthName(string name);\nerror ZeroYearsPeriod(uint256 yearsPeriod);\n"
    },
    "contracts/SoulboundIdentity.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nimport \"./libraries/Errors.sol\";\nimport \"./interfaces/ISoulboundIdentity.sol\";\nimport \"./interfaces/ISoulName.sol\";\nimport \"./tokens/MasaSBTAuthority.sol\";\n\n/// @title Soulbound Identity\n/// @author Masa Finance\n/// @notice Soulbound token that represents an identity.\n/// @dev Soulbound identity, that inherits from the SBT contract.\ncontract SoulboundIdentity is\n    MasaSBTAuthority,\n    ISoulboundIdentity,\n    ReentrancyGuard\n{\n    /* ========== STATE VARIABLES =========================================== */\n\n    ISoulName public soulName;\n\n    /* ========== INITIALIZE ================================================ */\n\n    /// @notice Creates a new soulbound identity\n    /// @dev Creates a new soulbound identity, inheriting from the SBT contract.\n    /// @param admin Administrator of the smart contract\n    /// @param name Name of the token\n    /// @param symbol Symbol of the token\n    /// @param baseTokenURI Base URI of the token\n    constructor(\n        address admin,\n        string memory name,\n        string memory symbol,\n        string memory baseTokenURI\n    ) MasaSBTAuthority(admin, name, symbol, baseTokenURI) {}\n\n    /* ========== RESTRICTED FUNCTIONS ====================================== */\n\n    /// @notice Sets the SoulName contract address linked to this identity\n    /// @dev The caller must have the admin role to call this function\n    /// @param _soulName Address of the SoulName contract\n    function setSoulName(\n        ISoulName _soulName\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (address(_soulName) == address(0)) revert ZeroAddress();\n        if (soulName == _soulName) revert SameValue();\n        soulName = _soulName;\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ======================================== */\n\n    /// @notice Mints a new soulbound identity\n    /// @dev The caller can only mint one identity per address\n    /// @param to Address of the owner of the new identity\n    function mint(address to) public override returns (uint256) {\n        // Soulbound identity already created!\n        if (balanceOf(to) > 0) revert IdentityAlreadyCreated(to);\n\n        return _mintWithCounter(to);\n    }\n\n    /// @notice Mints a new soulbound identity with a SoulName associated to it\n    /// @dev The caller can only mint one identity per address, and the name must be unique\n    /// @param to Address of the owner of the new identity\n    /// @param name Name of the new identity\n    /// @param yearsPeriod Years of validity of the name\n    /// @param _tokenURI URI of the NFT\n    function mintIdentityWithName(\n        address to,\n        string memory name,\n        uint256 yearsPeriod,\n        string memory _tokenURI\n    ) external override soulNameAlreadySet nonReentrant returns (uint256) {\n        uint256 identityId = mint(to);\n        soulName.mint(to, name, yearsPeriod, _tokenURI);\n\n        return identityId;\n    }\n\n    /* ========== VIEWS ===================================================== */\n\n    /// @notice Returns the address of the SoulName contract linked to this identity\n    /// @dev This function returns the address of the SoulName contract linked to this identity\n    /// @return Address of the SoulName contract\n    function getSoulName() external view override returns (ISoulName) {\n        return soulName;\n    }\n\n    /// @notice Returns the extension of the soul name\n    /// @dev This function returns the extension of the soul name\n    /// @return Extension of the soul name\n    function getExtension() external view returns (string memory) {\n        return soulName.getExtension();\n    }\n\n    /// @notice Returns the owner address of an identity\n    /// @dev This function returns the owner address of the identity specified by the tokenId\n    /// @param tokenId TokenId of the identity\n    /// @return Address of the owner of the identity\n    function ownerOf(\n        uint256 tokenId\n    ) public view override(SBT, ISBT) returns (address) {\n        return super.ownerOf(tokenId);\n    }\n\n    /// @notice Returns the owner address of a soul name\n    /// @dev This function returns the owner address of the soul name identity specified by the name\n    /// @param name Name of the soul name\n    /// @return Address of the owner of the identity\n    function ownerOf(\n        string memory name\n    ) external view soulNameAlreadySet returns (address) {\n        (, , uint256 identityId, , , ) = soulName.getTokenData(name);\n        return super.ownerOf(identityId);\n    }\n\n    /// @notice Returns the URI of a soul name\n    /// @dev This function returns the token URI of the soul name identity specified by the name\n    /// @param name Name of the soul name\n    /// @return URI of the identity associated to a soul name\n    function tokenURI(\n        string memory name\n    ) external view soulNameAlreadySet returns (string memory) {\n        (, , uint256 identityId, , , ) = soulName.getTokenData(name);\n        return super.tokenURI(identityId);\n    }\n\n    /// @notice Returns the URI of the owner of an identity\n    /// @dev This function returns the token URI of the identity owned by an account\n    /// @param owner Address of the owner of the identity\n    /// @return URI of the identity owned by the account\n    function tokenURI(address owner) external view returns (string memory) {\n        uint256 tokenId = tokenOfOwner(owner);\n        return super.tokenURI(tokenId);\n    }\n\n    /// @notice Returns the identity id of an account\n    /// @dev This function returns the tokenId of the identity owned by an account\n    /// @param owner Address of the owner of the identity\n    /// @return TokenId of the identity owned by the account\n    function tokenOfOwner(\n        address owner\n    ) public view override returns (uint256) {\n        return super.tokenOfOwnerByIndex(owner, 0);\n    }\n\n    /// @notice Checks if a soul name is available\n    /// @dev This function queries if a soul name already exists and is in the available state\n    /// @param name Name of the soul name\n    /// @return available `true` if the soul name is available, `false` otherwise\n    function isAvailable(\n        string memory name\n    ) external view soulNameAlreadySet returns (bool available) {\n        return soulName.isAvailable(name);\n    }\n\n    /// @notice Returns the information of a soul name\n    /// @dev This function queries the information of a soul name\n    /// @param name Name of the soul name\n    /// @return sbtName Soul name, in upper/lower case and extension\n    /// @return linked `true` if the soul name is linked, `false` otherwise\n    /// @return identityId Identity id of the soul name\n    /// @return tokenId SoulName id of the soul name\n    /// @return expirationDate Expiration date of the soul name\n    /// @return active `true` if the soul name is active, `false` otherwise\n    function getTokenData(\n        string memory name\n    )\n        external\n        view\n        soulNameAlreadySet\n        returns (\n            string memory sbtName,\n            bool linked,\n            uint256 identityId,\n            uint256 tokenId,\n            uint256 expirationDate,\n            bool active\n        )\n    {\n        return soulName.getTokenData(name);\n    }\n\n    /// @notice Returns all the active soul names of an account\n    /// @dev This function queries all the identity names of the specified account\n    /// @param owner Address of the owner of the identities\n    /// @return sbtNames Array of soul names associated to the account\n    function getSoulNames(\n        address owner\n    ) external view soulNameAlreadySet returns (string[] memory sbtNames) {\n        return soulName.getSoulNames(owner);\n    }\n\n    // SoulName -> SoulboundIdentity.tokenId\n    // SoulName -> account -> SoulboundIdentity.tokenId\n\n    /// @notice Returns all the active soul names of an account\n    /// @dev This function queries all the identity names of the specified identity Id\n    /// @param tokenId TokenId of the identity\n    /// @return sbtNames Array of soul names associated to the identity Id\n    function getSoulNames(\n        uint256 tokenId\n    ) external view soulNameAlreadySet returns (string[] memory sbtNames) {\n        return soulName.getSoulNames(tokenId);\n    }\n\n    /* ========== PRIVATE FUNCTIONS ========================================= */\n\n    /* ========== MODIFIERS ================================================= */\n\n    modifier soulNameAlreadySet() {\n        if (address(soulName) == address(0)) revert SoulNameContractNotSet();\n        _;\n    }\n\n    /* ========== EVENTS ==================================================== */\n}\n"
    },
    "contracts/tokens/MasaSBT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\nimport \"../libraries/Errors.sol\";\nimport \"../interfaces/ILinkableSBT.sol\";\nimport \"./SBT/SBT.sol\";\nimport \"./SBT/extensions/SBTEnumerable.sol\";\nimport \"./SBT/extensions/SBTBurnable.sol\";\n\n/// @title MasaSBT\n/// @author Masa Finance\n/// @notice Soulbound token. Non-fungible token that is not transferable.\n/// @dev Implementation of https://papers.ssrn.com/sol3/papers.cfm?abstract_id=4105763 Soulbound token.\nabstract contract MasaSBT is\n    SBT,\n    SBTEnumerable,\n    AccessControl,\n    SBTBurnable,\n    ILinkableSBT\n{\n    /* ========== STATE VARIABLES =========================================== */\n\n    using Strings for uint256;\n\n    string private _baseTokenURI;\n\n    uint256 public override addLinkPrice; // price in stable coin\n    uint256 public override addLinkPriceMASA; // price in MASA\n    uint256 public override queryLinkPrice; // price in stable coin\n    uint256 public override queryLinkPriceMASA; // price in MASA\n\n    /* ========== INITIALIZE ================================================ */\n\n    /// @notice Creates a new soulbound token\n    /// @dev Creates a new soulbound token\n    /// @param admin Administrator of the smart contract\n    /// @param name Name of the token\n    /// @param symbol Symbol of the token\n    /// @param baseTokenURI Base URI of the token\n    constructor(\n        address admin,\n        string memory name,\n        string memory symbol,\n        string memory baseTokenURI\n    ) SBT(name, symbol) {\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\n\n        _baseTokenURI = baseTokenURI;\n    }\n\n    /* ========== RESTRICTED FUNCTIONS ====================================== */\n\n    /// @notice Sets the price for adding the link in SoulLinker in stable coin\n    /// @dev The caller must have the admin role to call this function\n    /// @param _addLinkPrice New price for adding the link in SoulLinker in stable coin\n    function setAddLinkPrice(\n        uint256 _addLinkPrice\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (addLinkPrice == _addLinkPrice) revert SameValue();\n        addLinkPrice = _addLinkPrice;\n    }\n\n    /// @notice Sets the price for adding the link in SoulLinker in MASA\n    /// @dev The caller must have the admin role to call this function\n    /// @param _addLinkPriceMASA New price for adding the link in SoulLinker in MASA\n    function setAddLinkPriceMASA(\n        uint256 _addLinkPriceMASA\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (addLinkPriceMASA == _addLinkPriceMASA) revert SameValue();\n        addLinkPriceMASA = _addLinkPriceMASA;\n    }\n\n    /// @notice Sets the price for reading data in SoulLinker in stable coin\n    /// @dev The caller must have the admin role to call this function\n    /// @param _queryLinkPrice New price for reading data in SoulLinker in stable coin\n    function setQueryLinkPrice(\n        uint256 _queryLinkPrice\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (queryLinkPrice == _queryLinkPrice) revert SameValue();\n        queryLinkPrice = _queryLinkPrice;\n    }\n\n    /// @notice Sets the price for reading data in SoulLinker in MASA\n    /// @dev The caller must have the admin role to call this function\n    /// @param _queryLinkPriceMASA New price for reading data in SoulLinker in MASA\n    function setQueryLinkPriceMASA(\n        uint256 _queryLinkPriceMASA\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (queryLinkPriceMASA == _queryLinkPriceMASA) revert SameValue();\n        queryLinkPriceMASA = _queryLinkPriceMASA;\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ======================================== */\n\n    /* ========== VIEWS ===================================================== */\n\n    /// @notice Returns true if the token exists\n    /// @dev Returns true if the token has been minted\n    /// @param tokenId Token to check\n    /// @return True if the token exists\n    function exists(uint256 tokenId) external view returns (bool) {\n        return _exists(tokenId);\n    }\n\n    /// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\n    /// @dev Throws if `_tokenId` is not a valid SBT. URIs are defined in RFC\n    ///  3986. The URI may point to a JSON file that conforms to the \"ERC721\n    ///  Metadata JSON Schema\".\n    /// @param tokenId SBT to get the URI of\n    /// @return URI of the SBT\n    function tokenURI(\n        uint256 tokenId\n    ) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return\n            bytes(baseURI).length > 0\n                ? string(abi.encodePacked(baseURI, tokenId.toString(), \".json\"))\n                : \"\";\n    }\n\n    /// @notice Query if a contract implements an interface\n    /// @dev Interface identification is specified in ERC-165.\n    /// @param interfaceId The interface identifier, as specified in ERC-165\n    /// @return `true` if the contract implements `interfaceId` and\n    ///  `interfaceId` is not 0xffffffff, `false` otherwise\n    function supportsInterface(\n        bytes4 interfaceId\n    )\n        public\n        view\n        virtual\n        override(SBT, SBTEnumerable, AccessControl, IERC165)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n\n    /* ========== PRIVATE FUNCTIONS ========================================= */\n\n    function _baseURI() internal view virtual override returns (string memory) {\n        return _baseTokenURI;\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override(SBT, SBTEnumerable) {\n        super._beforeTokenTransfer(from, to, tokenId);\n    }\n\n    /* ========== MODIFIERS ================================================= */\n\n    /* ========== EVENTS ==================================================== */\n}\n"
    },
    "contracts/tokens/MasaSBTAuthority.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\nimport \"./MasaSBT.sol\";\n\n/// @title MasaSBT\n/// @author Masa Finance\n/// @notice Soulbound token. Non-fungible token that is not transferable.\n/// @dev Implementation of https://papers.ssrn.com/sol3/papers.cfm?abstract_id=4105763 Soulbound token.\nabstract contract MasaSBTAuthority is MasaSBT {\n    /* ========== STATE VARIABLES =========================================== */\n\n    using Counters for Counters.Counter;\n\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    Counters.Counter private _tokenIdCounter;\n\n    /* ========== INITIALIZE ================================================ */\n\n    /// @notice Creates a new soulbound token\n    /// @dev Creates a new soulbound token\n    /// @param admin Administrator of the smart contract\n    /// @param name Name of the token\n    /// @param symbol Symbol of the token\n    /// @param baseTokenURI Base URI of the token\n    constructor(\n        address admin,\n        string memory name,\n        string memory symbol,\n        string memory baseTokenURI\n    ) MasaSBT(admin, name, symbol, baseTokenURI) {\n        _grantRole(MINTER_ROLE, admin);\n    }\n\n    /* ========== RESTRICTED FUNCTIONS ====================================== */\n\n    function _mintWithCounter(\n        address to\n    ) internal virtual onlyRole(MINTER_ROLE) returns (uint256) {\n        uint256 tokenId = _tokenIdCounter.current();\n        _tokenIdCounter.increment();\n        _mint(to, tokenId);\n\n        return tokenId;\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ======================================== */\n\n    /* ========== VIEWS ===================================================== */\n\n    /* ========== PRIVATE FUNCTIONS ========================================= */\n\n    /* ========== MODIFIERS ================================================= */\n\n    /* ========== EVENTS ==================================================== */\n}\n"
    },
    "contracts/tokens/SBT/extensions/ISBTEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../ISBT.sol\";\n\n/**\n * @title SBT Soulbound Token Standard, optional enumeration extension\n */\ninterface ISBTEnumerable is ISBT {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(\n        address owner,\n        uint256 index\n    ) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "contracts/tokens/SBT/extensions/ISBTMetadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../ISBT.sol\";\n\n/**\n * @title SBT Soulbound Token Standard, optional metadata extension\n */\ninterface ISBTMetadata is ISBT {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "contracts/tokens/SBT/extensions/SBTBurnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\nimport \"../SBT.sol\";\n\n/**\n * @title SBT Burnable Token\n * @dev SBT Token that can be burned (destroyed).\n */\nabstract contract SBTBurnable is Context, SBT {\n    /**\n     * @dev Burns `tokenId`. See {SBT-_burn}.\n     *\n     * Requirements:\n     *\n     * - The caller must own `tokenId` or be an approved operator.\n     */\n    function burn(uint256 tokenId) public virtual {\n        //solhint-disable-next-line max-line-length\n        require(\n            _isOwner(_msgSender(), tokenId),\n            \"SBT: caller is not token owner\"\n        );\n        _burn(tokenId);\n    }\n}\n"
    },
    "contracts/tokens/SBT/extensions/SBTEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"../SBT.sol\";\nimport \"./ISBTEnumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {SBT} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract SBTEnumerable is SBT, ISBTEnumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override(IERC165, SBT) returns (bool) {\n        return\n            interfaceId == type(ISBTEnumerable).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {ISBTEnumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(\n        address owner,\n        uint256 index\n    ) public view virtual override returns (uint256) {\n        require(\n            index < SBT.balanceOf(owner),\n            \"SBTEnumerable: owner index out of bounds\"\n        );\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {ISBTEnumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {ISBTEnumerable-tokenByIndex}.\n     */\n    function tokenByIndex(\n        uint256 index\n    ) public view virtual override returns (uint256) {\n        require(\n            index < SBTEnumerable.totalSupply(),\n            \"SBTEnumerable: global index out of bounds\"\n        );\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = SBT.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(\n        address from,\n        uint256 tokenId\n    ) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = SBT.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"
    },
    "contracts/tokens/SBT/ISBT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\ninterface ISBT is IERC165 {\n    /// @dev This emits when an SBT is newly minted.\n    ///  This event emits when SBTs are created\n    event Mint(address indexed _owner, uint256 indexed _tokenId);\n\n    /// @dev This emits when an SBT is burned\n    ///  This event emits when SBTs are destroyed\n    event Burn(address indexed _owner, uint256 indexed _tokenId);\n\n    /// @notice Count all SBTs assigned to an owner\n    /// @dev SBTs assigned to the zero address are considered invalid, and this\n    ///  function throws for queries about the zero address.\n    /// @param _owner An address for whom to query the balance\n    /// @return The number of SBTs owned by `_owner`, possibly zero\n    function balanceOf(address _owner) external view returns (uint256);\n\n    /// @notice Find the owner of an SBT\n    /// @dev SBTs assigned to zero address are considered invalid, and queries\n    ///  about them do throw.\n    /// @param _tokenId The identifier for an SBT\n    /// @return The address of the owner of the SBT\n    function ownerOf(uint256 _tokenId) external view returns (address);\n}\n"
    },
    "contracts/tokens/SBT/SBT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\nimport \"./ISBT.sol\";\nimport \"./extensions/ISBTMetadata.sol\";\n\n/// @title SBT\n/// @author Masa Finance\n/// @notice Soulbound token is an NFT token that is not transferable.\ncontract SBT is Context, ERC165, ISBT, ISBTMetadata {\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(\n        bytes4 interfaceId\n    ) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(ISBT).interfaceId ||\n            interfaceId == type(ISBTMetadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {ISBT-balanceOf}.\n     */\n    function balanceOf(\n        address owner\n    ) public view virtual override returns (uint256) {\n        require(owner != address(0), \"SBT: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {ISBT-ownerOf}.\n     */\n    function ownerOf(\n        uint256 tokenId\n    ) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"SBT: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {ISBTMetadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {ISBTMetadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {ISBTMetadata-tokenURI}.\n     */\n    function tokenURI(\n        uint256 tokenId\n    ) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return\n            bytes(baseURI).length > 0\n                ? string(abi.encodePacked(baseURI, tokenId.toString()))\n                : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isOwner(\n        address spender,\n        uint256 tokenId\n    ) internal view virtual returns (bool) {\n        address owner = SBT.ownerOf(tokenId);\n        return (spender == owner);\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Mint} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"SBT: mint to the zero address\");\n        require(!_exists(tokenId), \"SBT: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Mint(to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     *\n     * Requirements:\n     * - `tokenId` must exist.\n     *\n     * Emits a {Burn} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = SBT.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Burn(owner, tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"SBT: invalid token ID\");\n    }\n\n    /**\n     * @dev Hook that is called before any token minting/burning\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address, address, uint256) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any minting/burning of tokens\n     *\n     * Calling conditions:\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address, address, uint256) internal virtual {}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1,
      "details": {
        "yul": false
      }
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}